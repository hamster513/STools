#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./apply_migrations.sh

set -e

echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ docker-compose –∑–∞–ø—É—â–µ–Ω
if ! docker-compose ps | grep -q "Up"; then
    echo "‚ùå Docker-compose –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: docker-compose up -d"
    exit 1
fi

# –°–ø–∏—Å–æ–∫ –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
MIGRATIONS=(
    "04-add-refresh-tokens.sql"
    "05-add-rbac-tables.sql" 
    "06-insert-rbac-data.sql"
    "07-add-audit-tables.sql"
    "08-add-hosts-unique-index.sql"
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏
apply_migration() {
    local migration_file=$1
    local migration_path="/app/init-db/$migration_file"
    
    echo "üìã –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é: $migration_file"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
    if ! docker-compose exec -T vulnanalizer_web test -f "$migration_path"; then
        echo "‚ö†Ô∏è  –§–∞–π–ª $migration_file –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
        return 0
    fi
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ Python (psql –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ vulnanalizer_web)
    if docker-compose exec -T vulnanalizer_web python3 -c "
import asyncio
import sys
sys.path.append('/app')
from database.hosts_repository import HostsRepository

async def apply_migration():
    db = HostsRepository()
    conn = await db.get_connection()
    try:
        with open('$migration_path', 'r') as f:
            sql = f.read()
        await conn.execute(sql)
        print('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è $migration_file –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞: {e}')
        sys.exit(1)
    finally:
        await db.release_connection(conn)

asyncio.run(apply_migration())
"; then
        echo "‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è $migration_file –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
    else
        echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ $migration_file"
        return 1
    fi
}

# –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏
for migration in "${MIGRATIONS[@]}"; do
    apply_migration "$migration"
done

echo ""
echo "üéØ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!"
echo ""
echo "üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —á–µ—Ä–µ–∑ Python
docker-compose exec -T vulnanalizer_web python3 -c "
import asyncio
import sys
sys.path.append('/app')
from database.hosts_repository import HostsRepository

async def check_tables():
    db = HostsRepository()
    conn = await db.get_connection()
    try:
        tables = await conn.fetch('''
            SELECT schemaname, tablename, tableowner
            FROM pg_tables 
            WHERE schemaname IN ('auth', 'vulnanalizer', 'loganalizer')
            ORDER BY schemaname, tablename
        ''')
        print(f'üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}')
        for table in tables:
            print(f'  {table[\"schemaname\"]}.{table[\"tablename\"]}')
    finally:
        await db.release_connection(conn)

asyncio.run(check_tables())
"

echo ""
echo "‚úÖ –ì–æ—Ç–æ–≤–æ! –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ."
echo ""
echo "üîß –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ:"
echo "   1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–º–ø–æ—Ä—Ç VM"
echo "   2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∑–∞–ø–∏—Å–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑—É"
echo "   3. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"