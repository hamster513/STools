from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.middleware.cors import CORSMiddleware
from datetime import datetime
import os

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç—ã (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ)
# from routes.backup import router as backup_router

def get_version():
    try:
        with open('VERSION', 'r') as f:
            return f.read().strip()
    except:
        return "0.6.03"

app = FastAPI(title="STools", version=get_version())

# –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ (–æ—Ç–ª–∞–¥–æ—á–Ω–æ)
# print(f"üöÄ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {app.title} v{app.version}")
# print(f"üìÅ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
# print(f"üìÅ –§–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {os.listdir('.')}")

# –î–æ–±–∞–≤–ª—è–µ–º CORS middleware
app.mount("/static", StaticFiles(directory="static"), name="static")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
templates = Jinja2Templates(directory="templates")

# –î–æ–±–∞–≤–ª—è–µ–º CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/", response_class=HTMLResponse)
async def root(request: Request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ vulnanalizer"""
    return templates.TemplateResponse("base.html", {"request": request, "version": get_version()})

@app.get("/users/", response_class=HTMLResponse)
async def users_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    return templates.TemplateResponse("users.html", {"request": request, "version": get_version()})

@app.get("/background-tasks/", response_class=HTMLResponse)
async def background_tasks_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—è–º–∏"""
    return templates.TemplateResponse("background-tasks.html", {"request": request, "version": get_version()})

@app.get("/settings/", response_class=HTMLResponse)
async def settings_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã"""
    return templates.TemplateResponse("settings.html", {"request": request, "version": get_version()})

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç—ã (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ)
# try:
#     app.include_router(backup_router)
#     print("‚úÖ Backup router –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
# except Exception as e:
#     print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è backup router: {e}")

# –ü—Ä–æ—Å—Ç—ã–µ —Ä–æ—É—Ç—ã –¥–ª—è –±—ç–∫–∞–ø–∞ (–≤—Ä–µ–º–µ–Ω–Ω–æ)
@app.get("/api/backup/tables")
async def get_backup_tables():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è –±—ç–∫–∞–ø–∞"""
    tables = [
        {"schema": "auth", "name": "users", "description": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–∏—Å—Ç–µ–º—ã"},
        {"schema": "auth", "name": "sessions", "description": "–°–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"},
        {"schema": "vulnanalizer", "name": "cve", "description": "–£—è–∑–≤–∏–º–æ—Å—Ç–∏ CVE"},
        {"schema": "vulnanalizer", "name": "hosts", "description": "–•–æ—Å—Ç—ã"},
                    {"schema": "vulnanalizer", "name": "metasploit_modules", "description": "–ú–æ–¥—É–ª–∏ Metasploit"},
        {"schema": "vulnanalizer", "name": "epss", "description": "–î–∞–Ω–Ω—ã–µ EPSS"},
        {"schema": "vulnanalizer", "name": "exploitdb", "description": "–ë–∞–∑–∞ ExploitDB"},
        {"schema": "vulnanalizer", "name": "background_tasks", "description": "–§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏"},
        {"schema": "vulnanalizer", "name": "settings", "description": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"},
        {"schema": "loganalizer", "name": "log_entries", "description": "–ó–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤"},
        {"schema": "loganalizer", "name": "log_files", "description": "–§–∞–π–ª—ã –ª–æ–≥–æ–≤"},
        {"schema": "loganalizer", "name": "analysis_settings", "description": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞"}
    ]
    return {"success": True, "tables": tables}

@app.get("/api/backup/list")
async def list_backups():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤"""
    return {"success": True, "backups": []}

@app.post("/api/backup/create")
async def create_backup(request: dict):
    """–°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü"""
    try:
        if not request.get('tables'):
            raise HTTPException(status_code=400, detail="–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã")
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        return {
            "success": True, 
            "message": "–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ",
            "backup_id": f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {str(e)}")

@app.get("/api/version")
async def get_api_version():
    """–ü–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é API"""
    return {"version": get_version(), "api": "v1"}

# –¢–µ—Å—Ç–æ–≤—ã–π —Ä–æ—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
@app.get("/test-backup")
async def test_backup():
    """–¢–µ—Å—Ç–æ–≤—ã–π —Ä–æ—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    return {"message": "Backup API —Ä–∞–±–æ—Ç–∞–µ—Ç!", "status": "ok"}

@app.get("/simple-test")
async def simple_test():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–æ—É—Ç"""
    return {"message": "–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"}

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {"status": "healthy", "service": "main"}

# –õ–æ–≥–∏—Ä—É–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–æ—É—Ç—ã (–æ—Ç–ª–∞–¥–æ—á–Ω–æ)
# print("üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–æ—É—Ç—ã:")
# for route in app.routes:
#     try:
#         if hasattr(route, 'path') and hasattr(route, 'methods'):
#             print(f"  - {route.methods} {route.path}")
#         elif hasattr(route, 'path'):
#             print(f"  - {route.path}")
#     except Exception as e:
#         print(f"  - –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–æ—É—Ç–∞: {e}")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
