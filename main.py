from fastapi import FastAPI, Request, HTTPException, Depends
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.middleware.cors import CORSMiddleware
from datetime import datetime
import os
import sys

# TODO: –î–æ–±–∞–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç auth –º–æ–¥—É–ª—è –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç–µ–π
# from auth.database import AuthDatabase

# Backup —Ä–æ—É—Ç—ã –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ vulnanalizer/app/routes/backup.py

def get_version():
    try:
        with open('VERSION', 'r') as f:
            return f.read().strip()
    except:
        return "0.6.03"

app = FastAPI(title="STools Main Service", version=get_version())

# –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ (–æ—Ç–ª–∞–¥–æ—á–Ω–æ)
# print(f"üöÄ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {app.title} v{app.version}")
# print(f"üìÅ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
# print(f"üìÅ –§–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {os.listdir('.')}")

# –î–æ–±–∞–≤–ª—è–µ–º CORS middleware
app.mount("/static", StaticFiles(directory="static"), name="static")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
templates = Jinja2Templates(directory="templates")

# TODO: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å auth_db –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∞
# auth_db = AuthDatabase()

# TODO: –î–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∞
async def get_current_user(request: Request) -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ—Å—Å–∏–∏"""
    # –í—Ä–µ–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º admin –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    return {"username": "admin", "is_admin": True}

async def require_admin(request: Request) -> dict:
    """–¢—Ä–µ–±–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    # –í—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    user = await get_current_user(request)
    if not user.get('is_admin', False):
        raise HTTPException(status_code=403, detail="–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    return user

# –î–æ–±–∞–≤–ª—è–µ–º CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/", response_class=HTMLResponse)
async def root(request: Request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ vulnanalizer"""
    return templates.TemplateResponse("base.html", {"request": request, "version": get_version()})

@app.get("/users/", response_class=HTMLResponse)
async def users_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await require_admin(request)
    return templates.TemplateResponse("users.html", {"request": request, "version": get_version()})

@app.get("/background-tasks/", response_class=HTMLResponse)
async def background_tasks_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—è–º–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await require_admin(request)
    return templates.TemplateResponse("background-tasks.html", {"request": request, "version": get_version()})

@app.get("/settings/", response_class=HTMLResponse)
async def settings_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await require_admin(request)
    return templates.TemplateResponse("settings.html", {"request": request, "version": get_version()})

# Backup —Ä–æ—É—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –≤ vulnanalizer/app/main.py

@app.get("/api/version")
async def get_api_version():
    """–ü–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é API"""
    return {"version": get_version(), "api": "v1"}

# –¢–µ—Å—Ç–æ–≤—ã–π —Ä–æ—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
# –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —É–¥–∞–ª–µ–Ω

@app.get("/simple-test")
async def simple_test():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–æ—É—Ç"""
    return {"message": "–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"}

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {"status": "healthy", "service": "main"}

# –õ–æ–≥–∏—Ä—É–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–æ—É—Ç—ã (–æ—Ç–ª–∞–¥–æ—á–Ω–æ)
# print("ÔøΩÔøΩ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–æ—É—Ç—ã:")
# for route in app.routes:
#     try:
#         if hasattr(route, 'path') and hasattr(route, 'methods'):
#             print(f"  - {route.methods} {route.path}")
#         elif hasattr(route, 'path'):
#             print(f"  - {route.path}")
#     except Exception as e:
#         print(f"  - –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–æ—É—Ç–∞: {e}")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
