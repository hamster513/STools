#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ CVE –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import csv
import random
import subprocess
from datetime import datetime

class RealisticDataGeneratorWithRealCVEs:
    def __init__(self):
        self.os_names = [
            "Windows 10", "Windows 11", "Windows Server 2019", "Windows Server 2022",
            "Ubuntu 20.04", "Ubuntu 22.04", "CentOS 7", "CentOS 8", "RHEL 8", "RHEL 9",
            "Debian 11", "Debian 12", "Alpine Linux", "macOS 12", "macOS 13"
        ]
        
        self.zones = ["Internal", "DMZ", "External", "Management", "Production", "Development"]
        self.criticality_levels = ["Critical", "High", "Medium", "Low"]
        
    def get_real_cves_from_database(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ CVE –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö CVE –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º CVE –∏–∑ —Ç–∞–±–ª–∏—Ü—ã cve (NVD) —Å CVSS
            print("üîç –ó–∞–≥—Ä—É–∑–∫–∞ CVE –∏–∑ NVD...")
            nvd_query = """
                SELECT cve_id, description, cvss_v3_base_score, cvss_v2_base_score, 
                       cvss_v3_base_severity, cvss_v2_base_severity
                FROM vulnanalizer.cve 
                WHERE cve_id IS NOT NULL 
                AND (cvss_v3_base_score IS NOT NULL OR cvss_v2_base_score IS NOT NULL)
                ORDER BY RANDOM() 
                LIMIT 90000;
            """
            result = subprocess.run([
                'docker', 'exec', 'stools_postgres', 'psql', 
                '-U', 'stools_user', '-d', 'stools_db', 
                '-c', nvd_query, '--csv', '--no-align', '--tuples-only'
            ], capture_output=True, text=True)
            
            if result.returncode != 0:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ NVD CVE: {result.stderr}")
                return []
            
            nvd_cves = []
            for line in result.stdout.strip().split('\n'):
                if line and ',' in line:
                    parts = line.split(',')
                    if len(parts) >= 6:
                        try:
                            cvss_v3 = parts[2].strip('"')
                            cvss_v2 = parts[3].strip('"')
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–∞
                            cvss_v3_score = None
                            cvss_v2_score = None
                            
                            if cvss_v3 and cvss_v3.replace('.', '').isdigit():
                                cvss_v3_score = cvss_v3
                            if cvss_v2 and cvss_v2.replace('.', '').isdigit():
                                cvss_v2_score = cvss_v2
                            
                            cve_data = {
                                'cve_id': parts[0].strip('"'),
                                'description': parts[1].strip('"'),
                                'cvss_v3_base_score': cvss_v3_score,
                                'cvss_v2_base_score': cvss_v2_score,
                                'cvss_v3_base_severity': parts[4].strip('"'),
                                'cvss_v2_base_severity': parts[5].strip('"'),
                                'source': 'NVD'
                            }
                            nvd_cves.append(cve_data)
                        except Exception as e:
                            print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç—Ä–æ–∫—É: {line[:100]}...")
                            continue
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(nvd_cves)} CVE –∏–∑ NVD")
            
            # –ü–æ–ª—É—á–∞–µ–º CVE –∏–∑ ExploitDB
            print("üîç –ó–∞–≥—Ä—É–∑–∫–∞ CVE –∏–∑ ExploitDB...")
            exploitdb_query = """
                SELECT DISTINCT split_part(codes, ';', 1) as cve_id
                FROM vulnanalizer.exploitdb 
                WHERE codes IS NOT NULL AND codes LIKE 'CVE-%'
                ORDER BY split_part(codes, ';', 1)
                LIMIT 10000;
            """
            result = subprocess.run([
                'docker', 'exec', 'stools_postgres', 'psql', 
                '-U', 'stools_user', '-d', 'stools_db', 
                '-c', exploitdb_query, '--csv', '--no-align', '--tuples-only'
            ], capture_output=True, text=True)
            
            if result.returncode != 0:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ExploitDB CVE: {result.stderr}")
                exploitdb_cves = []
            else:
                exploitdb_cves = []
                for line in result.stdout.strip().split('\n'):
                    if line and line.strip():
                        cve_id = line.strip('"')
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç CVE –≤ NVD
                        if not any(cve['cve_id'] == cve_id for cve in nvd_cves):
                            cve_data = {
                                'cve_id': cve_id,
                                'description': f'Exploit available for {cve_id}',
                                'cvss_v3_base_score': None,
                                'cvss_v2_base_score': None,
                                'cvss_v3_base_severity': None,
                                'cvss_v2_base_severity': None,
                                'source': 'ExploitDB'
                            }
                            exploitdb_cves.append(cve_data)
                
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(exploitdb_cves)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö CVE –∏–∑ ExploitDB")
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º CVE
            all_cves = nvd_cves + exploitdb_cves
            print(f"‚úÖ –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_cves)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö CVE")
            
            return all_cves
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ CVE: {e}")
            return []
    
    def generate_hostname(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –∏–º—è —Ö–æ—Å—Ç–∞"""
        prefixes = ['web', 'app', 'db', 'api', 'auth', 'cache', 'load', 'proxy', 'mail', 'dns']
        suffixes = ['prod', 'dev', 'test', 'staging', 'backup', 'monitor', 'log', 'admin']
        
        prefix = random.choice(prefixes)
        suffix = random.choice(suffixes)
        number = random.randint(1, 999)
        
        return f"{prefix}-{suffix}-{number:03d}"
    
    def generate_ip(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π IP –∞–¥—Ä–µ—Å"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º IP –∏–∑ —Ä–∞–∑–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
        ranges = [
            (10, 10, 0, 255, 0, 255),      # 10.0.0.0/8
            (172, 172, 16, 31, 0, 255),    # 172.16.0.0/12
            (192, 192, 168, 168, 0, 255)   # 192.168.0.0/16
        ]
        
        range_choice = random.choice(ranges)
        
        # –ü–µ—Ä–≤—ã–π –æ–∫—Ç–µ—Ç
        first = range_choice[0]
        # –í—Ç–æ—Ä–æ–π –æ–∫—Ç–µ—Ç
        second = random.randint(range_choice[2], range_choice[3])
        # –¢—Ä–µ—Ç–∏–π –æ–∫—Ç–µ—Ç
        third = random.randint(range_choice[4], range_choice[5])
        # –ß–µ—Ç–≤–µ—Ä—Ç—ã–π –æ–∫—Ç–µ—Ç
        fourth = random.randint(1, 254)
        
        return f"{first}.{second}.{third}.{fourth}"
    
    def generate_realistic_data(self, num_hosts=100000):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ CVE"""
        print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é {num_hosts} –∑–∞–ø–∏—Å–µ–π —Ö–æ—Å—Ç–æ–≤...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ CVE
        cves = self.get_real_cves_from_database()
        if not cves:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å CVE –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            return
        
        hosts = []
        
        for i in range(num_hosts):
            if i % 10000 == 0:
                print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i}/{num_hosts} –∑–∞–ø–∏—Å–µ–π...")
            
            hostname = self.generate_hostname()
            ip = self.generate_ip()
            os_name = random.choice(self.os_names)
            zone = random.choice(self.zones)
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π CVE
            cve_data = random.choice(cves)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ CVSS
            try:
                if cve_data['cvss_v3_base_score'] and cve_data['cvss_v3_base_score'].replace('.', '').isdigit():
                    score = float(cve_data['cvss_v3_base_score'])
                    if score >= 9.0:
                        criticality = "Critical"
                    elif score >= 7.0:
                        criticality = "High"
                    elif score >= 4.0:
                        criticality = "Medium"
                    else:
                        criticality = "Low"
                elif cve_data['cvss_v2_base_score'] and cve_data['cvss_v2_base_score'].replace('.', '').isdigit():
                    score = float(cve_data['cvss_v2_base_score'])
                    if score >= 7.0:
                        criticality = "Critical"
                    elif score >= 5.0:
                        criticality = "High"
                    elif score >= 3.0:
                        criticality = "Medium"
                    else:
                        criticality = "Low"
                else:
                    # –î–ª—è CVE –±–µ–∑ CVSS –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å
                    criticality = random.choice(self.criticality_levels)
            except (ValueError, TypeError):
                # –î–ª—è CVE –±–µ–∑ CVSS –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å
                criticality = random.choice(self.criticality_levels)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å –æ–¥–Ω–∏–º CVE
            host = {
                '@Host': f'{hostname} ({ip})',
                'Host.OsName': os_name,
                'Host.@Vulners.CVEs': cve_data['cve_id'],
                'host.UF_Criticality': criticality,
                'Host.UF_Zone': zone
            }
            hosts.append(host)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ CVE (0-2) –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            num_additional = random.randint(0, 2)
            for _ in range(num_additional):
                additional_cve_data = random.choice(cves)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ CVE
                try:
                    if additional_cve_data['cvss_v3_base_score'] and additional_cve_data['cvss_v3_base_score'].replace('.', '').isdigit():
                        score = float(additional_cve_data['cvss_v3_base_score'])
                        if score >= 9.0:
                            additional_criticality = "Critical"
                        elif score >= 7.0:
                            additional_criticality = "High"
                        elif score >= 4.0:
                            additional_criticality = "Medium"
                        else:
                            additional_criticality = "Low"
                    elif additional_cve_data['cvss_v2_base_score'] and additional_cve_data['cvss_v2_base_score'].replace('.', '').isdigit():
                        score = float(additional_cve_data['cvss_v2_base_score'])
                        if score >= 7.0:
                            additional_criticality = "Critical"
                        elif score >= 5.0:
                            additional_criticality = "High"
                        elif score >= 3.0:
                            additional_criticality = "Medium"
                        else:
                            additional_criticality = "Low"
                    else:
                        additional_criticality = random.choice(self.criticality_levels)
                except (ValueError, TypeError):
                    additional_criticality = random.choice(self.criticality_levels)
                
                additional_host = {
                    '@Host': f'{hostname} ({ip})',
                    'Host.OsName': os_name,
                    'Host.@Vulners.CVEs': additional_cve_data['cve_id'],
                    'host.UF_Criticality': additional_criticality,
                    'Host.UF_Zone': zone
                }
                hosts.append(additional_host)
        
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(hosts)} –∑–∞–ø–∏—Å–µ–π —Ö–æ—Å—Ç–æ–≤")
        return hosts
    
    def save_to_csv(self, hosts, filename='realistic_test_data_with_real_cves.csv'):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ CSV —Ñ–∞–π–ª"""
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª {filename}...")
        
        fieldnames = ['@Host', 'Host.OsName', 'Host.@Vulners.CVEs', 'host.UF_Criticality', 'Host.UF_Zone']
        
        with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames, delimiter=';', quoting=csv.QUOTE_ALL)
            writer.writeheader()
            writer.writerows(hosts)
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª {filename}")
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(hosts)}")

def main():
    print("üéØ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ CVE")
    print("=" * 50)
    
    generator = RealisticDataGeneratorWithRealCVEs()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 100,000 –∑–∞–ø–∏—Å–µ–π
    hosts = generator.generate_realistic_data(100000)
    
    if hosts:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
        generator.save_to_csv(hosts)
        
        print("\nüéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("üìÅ –§–∞–π–ª: realistic_test_data_with_real_cves.csv")
        print("üìä –ó–∞–ø–∏—Å–µ–π: {len(hosts)}")
        print("\nüí° –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ —Å–∏—Å—Ç–µ–º—É!")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

if __name__ == "__main__":
    main()
