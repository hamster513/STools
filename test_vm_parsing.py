#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ VM CSV —Ñ–∞–π–ª–∞
"""
import csv
import io

def test_vm_csv_parsing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ VM CSV —Ñ–∞–π–ª–∞"""
    
    # –ß–∏—Ç–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    with open('/Users/hom/Downloads/out.csv', 'r', encoding='utf-8') as f:
        csv_content = f.read()
    
    print(f"üìä –†–∞–∑–º–µ—Ä CSV —Ñ–∞–π–ª–∞: {len(csv_content)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ü–∞—Ä—Å–∏–º CSV
    csv_reader = csv.DictReader(io.StringIO(csv_content), delimiter=';')
    
    vm_data = []
    row_count = 0
    
    for row in csv_reader:
        row_count += 1
        if row_count <= 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫
            print(f"üìã –°—Ç—Ä–æ–∫–∞ {row_count}: {dict(row)}")
        
        vm_data.append({
            'host': row['@Host'].strip('"'),
            'os_name': row['Host.OsName'].strip('"'),
            'groups': row['Host.@Groups'].strip('"'),
            'cve': row['Host.@Vulners.CVEs'].strip('"'),
            'criticality': row['Host.UF_Criticality'].strip('"'),
            'zone': row['Host.UF_Zone'].strip('"')
        })
    
    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {row_count} —Å—Ç—Ä–æ–∫ CSV, —Å–æ–∑–¥–∞–Ω–æ {len(vm_data)} –∑–∞–ø–∏—Å–µ–π")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    print(f"\nüìã –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏:")
    print(f"  Host: {vm_data[0]['host']}")
    print(f"  CVE: {vm_data[0]['cve']}")
    print(f"  Criticality: {vm_data[0]['criticality']}")
    print(f"  Zone: {vm_data[0]['zone']}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ö–æ—Å—Ç—ã
    unique_hosts = set()
    for record in vm_data:
        host_info = record['host']
        if ' (' in host_info:
            hostname = host_info.split(' (')[0]
        else:
            hostname = host_info
        unique_hosts.add(hostname)
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(vm_data)}")
    print(f"  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤: {len(unique_hosts)}")
    print(f"  –ó–∞–ø–∏—Å–µ–π –Ω–∞ —Ö–æ—Å—Ç: {len(vm_data) / len(unique_hosts):.1f}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å CVE
    valid_cves = [rec for rec in vm_data if rec['cve'].strip()]
    invalid_cves = [rec for rec in vm_data if not rec['cve'].strip()]
    print(f"  –ó–∞–ø–∏—Å–µ–π —Å CVE: {len(valid_cves)}")
    print(f"  –ó–∞–ø–∏—Å–µ–π –±–µ–∑ CVE: {len(invalid_cves)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π –±–µ–∑ CVE
    if invalid_cves:
        print(f"\n‚ùå –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π –±–µ–∑ CVE:")
        for i, rec in enumerate(invalid_cves[:3]):
            print(f"  {i+1}. Host: {rec['host']}, CVE: '{rec['cve']}', Criticality: {rec['criticality']}")
    
    return vm_data

if __name__ == "__main__":
    test_vm_csv_parsing()