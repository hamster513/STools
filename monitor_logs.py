#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–∞–≥–æ–≤
"""

import subprocess
import time
import re
from datetime import datetime

class LogMonitor:
    def __init__(self):
        self.errors = []
        self.warnings = []
        self.containers = ['nginx', 'auth_web', 'vulnanalizer_web', 'loganalizer_web']
        
    def get_container_logs(self, container, lines=50):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        try:
            result = subprocess.run(
                ['docker-compose', 'logs', '--tail', str(lines), container],
                capture_output=True, text=True, timeout=30
            )
            return result.stdout
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ {container}: {str(e)}"
    
    def analyze_logs(self, container):
        """–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫"""
        logs = self.get_container_logs(container)
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—à–∏–±–æ–∫
        error_patterns = [
            r'ERROR',
            r'Exception',
            r'Traceback',
            r'Failed',
            r'Connection refused',
            r'404 Not Found',
            r'500 Internal Server Error',
            r'502 Bad Gateway',
            r'503 Service Unavailable',
            r'nginx.*error',
            r'python.*error',
            r'fastapi.*error'
        ]
        
        warning_patterns = [
            r'WARNING',
            r'Warning',
            r'deprecated',
            r'DeprecationWarning'
        ]
        
        lines = logs.split('\n')
        for i, line in enumerate(lines):
            # –ò—â–µ–º –æ—à–∏–±–∫–∏
            for pattern in error_patterns:
                if re.search(pattern, line, re.IGNORECASE):
                    self.errors.append(f"‚ùå {container}: {line.strip()}")
                    break
            
            # –ò—â–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            for pattern in warning_patterns:
                if re.search(pattern, line, re.IGNORECASE):
                    self.warnings.append(f"‚ö†Ô∏è {container}: {line.strip()}")
                    break
    
    def check_container_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"""
        try:
            result = subprocess.run(
                ['docker-compose', 'ps'],
                capture_output=True, text=True, timeout=10
            )
            
            lines = result.stdout.split('\n')
            for line in lines:
                if any(container in line for container in self.containers):
                    if 'Up' not in line:
                        self.errors.append(f"‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω: {line.strip()}")
                    else:
                        print(f"‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: {line.split()[0]}")
                        
        except Exception as e:
            self.errors.append(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
    
    def check_ports(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤"""
        import socket
        
        ports = {
            80: "HTTP (Nginx)",
            8000: "Auth API",
            8001: "VulnAnalizer API", 
            8002: "LogAnalizer API"
        }
        
        for port, service in ports.items():
            try:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(2)
                result = sock.connect_ex(('localhost', port))
                sock.close()
                
                if result == 0:
                    print(f"‚úÖ –ü–æ—Ä—Ç {port} ({service}): –¥–æ—Å—Ç—É–ø–µ–Ω")
                else:
                    self.errors.append(f"‚ùå –ü–æ—Ä—Ç {port} ({service}): –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    
            except Exception as e:
                self.errors.append(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞ {port}: {str(e)}")
    
    def run_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        print("üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        print("\nüìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:")
        self.check_container_status()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—ã
        print("\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤:")
        self.check_ports()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏
        print("\nüìù –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤:")
        for container in self.containers:
            print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ {container}:")
            self.analyze_logs(container)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê:")
        
        if self.errors:
            print(f"\n‚ùå –ù–∞–π–¥–µ–Ω–æ {len(self.errors)} –æ—à–∏–±–æ–∫:")
            for error in self.errors:
                print(f"  {error}")
        
        if self.warnings:
            print(f"\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(self.warnings)} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π:")
            for warning in self.warnings:
                print(f"  {warning}")
        
        if not self.errors and not self.warnings:
            print("‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")
        
        return len(self.errors) == 0

if __name__ == "__main__":
    monitor = LogMonitor()
    success = monitor.run_monitoring()
    exit(0 if success else 1)
