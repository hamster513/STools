#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –±–∞–≥–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ
"""

import subprocess
import sys
import time
from datetime import datetime

def run_command(cmd, description):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –≤—ã–≤–æ–¥–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    print(f"\nüîç {description}...")
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=60)
        if result.returncode == 0:
            print(f"‚úÖ {description}: —É—Å–ø–µ—à–Ω–æ")
            return True, result.stdout
        else:
            print(f"‚ùå {description}: –æ—à–∏–±–∫–∞")
            print(f"STDOUT: {result.stdout}")
            print(f"STDERR: {result.stderr}")
            return False, result.stderr
    except subprocess.TimeoutExpired:
        print(f"‚è∞ {description}: —Ç–∞–π–º–∞—É—Ç")
        return False, "Timeout"
    except Exception as e:
        print(f"üí• {description}: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ - {str(e)}")
        return False, str(e)

def check_docker_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"""
    print("\nüê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    success, output = run_command("docker-compose ps", "–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")
    if success:
        print(output)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ nginx
    success, output = run_command("docker-compose logs --tail=10 nginx", "–õ–æ–≥–∏ Nginx")
    if success:
        print(output)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ auth
    success, output = run_command("docker-compose logs --tail=10 auth_web", "–õ–æ–≥–∏ Auth")
    if success:
        print(output)

def check_web_responses():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP –æ—Ç–≤–µ—Ç–æ–≤"""
    print("\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP –æ—Ç–≤–µ—Ç–æ–≤:")
    
    urls = [
        "http://localhost/",
        "http://localhost/vulnanalizer/",
        "http://localhost/loganalizer/",
        "http://localhost/auth/",
        "http://localhost/static/css/style.css"
    ]
    
    for url in urls:
        success, output = run_command(f"curl -s -o /dev/null -w '%{{http_code}}' {url}", f"–ü—Ä–æ–≤–µ—Ä–∫–∞ {url}")
        if success:
            status_code = output.strip()
            if status_code == "200":
                print(f"‚úÖ {url}: OK (200)")
            else:
                print(f"‚ùå {url}: {status_code}")

def check_file_integrity():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–æ–≤"""
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–æ–≤:")
    
    critical_files = [
        "docker-compose.yml",
        "nginx/nginx.conf",
        "static/css/style.css",
        "vulnanalizer/app/main.py",
        "loganalizer/app/main.py",
        "auth/main.py"
    ]
    
    for file_path in critical_files:
        success, output = run_command(f"test -f {file_path} && echo 'exists'", f"–ü—Ä–æ–≤–µ—Ä–∫–∞ {file_path}")
        if success and "exists" in output:
            print(f"‚úÖ {file_path}: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print(f"‚ùå {file_path}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

def check_syntax():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    success, output = run_command("docker-compose exec nginx nginx -t", "–ü—Ä–æ–≤–µ—Ä–∫–∞ nginx.conf")
    if success:
        print("‚úÖ nginx.conf: —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
    else:
        print(f"‚ùå nginx.conf: –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞")
        print(output)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º docker-compose
    success, output = run_command("docker-compose config", "–ü—Ä–æ–≤–µ—Ä–∫–∞ docker-compose.yml")
    if success:
        print("‚úÖ docker-compose.yml: —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
    else:
        print(f"‚ùå docker-compose.yml: –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞")
        print(output)

def check_database_connections():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ auth_postgres
    success, output = run_command(
        "docker-compose exec auth_postgres psql -U postgres -d auth_db -c 'SELECT 1;'",
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ auth_postgres"
    )
    if success:
        print("‚úÖ auth_postgres: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print("‚ùå auth_postgres: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ vulnanalizer_postgres
    success, output = run_command(
        "docker-compose exec vulnanalizer_postgres psql -U postgres -d vulnanalizer_db -c 'SELECT 1;'",
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ vulnanalizer_postgres"
    )
    if success:
        print("‚úÖ vulnanalizer_postgres: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print("‚ùå vulnanalizer_postgres: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")

def run_automated_tests():
    """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("\nüß™ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤:")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    success, output = run_command("python3 test_ui.py", "–¢–µ—Å—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
    if success:
        print("‚úÖ –¢–µ—Å—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: –ø—Ä–æ–π–¥–µ–Ω")
    else:
        print("‚ùå –¢–µ—Å—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: –ø—Ä–æ–≤–∞–ª–µ–Ω")
        print(output)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤
    success, output = run_command("python3 monitor_logs.py", "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤")
    if success:
        print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤: –ø—Ä–æ–π–¥–µ–Ω")
    else:
        print("‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤: –ø—Ä–æ–≤–∞–ª–µ–Ω")
        print(output)

def generate_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ"""
    print("\nüìä –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–ß–ï–¢–ê:")
    print("=" * 50)
    print(f"–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    check_docker_health()
    check_web_responses()
    check_file_integrity()
    check_syntax()
    check_database_connections()
    run_automated_tests()
    
    print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("1. –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ - –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö")
    print("2. –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã - –≤—ã–ø–æ–ª–Ω–∏—Ç–µ docker-compose up -d")
    print("3. –ï—Å–ª–∏ –ø–æ—Ä—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
    print("4. –ï—Å–ª–∏ —Ñ–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∏–∑ git")

if __name__ == "__main__":
    print("üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ü–û–ò–°–ö –ë–ê–ì–û–í")
    print("=" * 50)
    
    generate_report()
    
    print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º.")
