#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Ö–æ—Å—Ç–æ–≤ –±–µ–∑ EPSS –¥–∞–Ω–Ω—ã—Ö
"""
import asyncio
import asyncpg
from datetime import datetime

async def calculate_all_risks():
    """–ú–∞—Å—Å–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∏—Å–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Ö–æ—Å—Ç–æ–≤ –±–µ–∑ EPSS –¥–∞–Ω–Ω—ã—Ö"""
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = await asyncpg.connect(
        host='postgres',
        port=5432,
        user='stools_user',
        password='stools_pass',
        database='stools_db'
    )
    
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ö–µ–º—É
        await conn.execute('SET search_path TO vulnanalizer')
        
        print("üîç –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∏—Å–∫–æ–≤...")
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ CVE —Ö–æ—Å—Ç–æ–≤ –±–µ–∑ EPSS –¥–∞–Ω–Ω—ã—Ö, –Ω–æ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ EPSS –¥–∞–Ω–Ω—ã–º–∏
        cve_query = """
            SELECT DISTINCT h.cve 
            FROM hosts h 
            LEFT JOIN epss e ON h.cve = e.cve 
            WHERE h.cve IS NOT NULL AND h.cve != '' 
            AND (h.epss_score IS NULL OR h.risk_score IS NULL)
            AND e.cve IS NOT NULL
            ORDER BY h.cve
        """
        cve_rows = await conn.fetch(cve_query)
        
        if not cve_rows:
            print("‚úÖ –ù–µ—Ç —Ö–æ—Å—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤")
            return
        
        total_cves = len(cve_rows)
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ {total_cves} CVE –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ EPSS –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        cve_list = [cve_row['cve'] for cve_row in cve_rows]
        epss_query = "SELECT cve, epss, percentile FROM epss WHERE cve = ANY($1)"
        epss_rows = await conn.fetch(epss_query, cve_list)
        epss_data = {row['cve']: row for row in epss_rows}
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ EPSS –¥–∞–Ω–Ω—ã—Ö: {len(epss_data)} –∏–∑ {len(cve_list)} CVE")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_query = "SELECT key, value FROM settings"
        settings_rows = await conn.fetch(settings_query)
        settings = {row['key']: row['value'] for row in settings_rows}
        
        print(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {settings}")
        
        # –°—á–µ—Ç—á–∏–∫–∏
        processed_cves = 0
        updated_hosts = 0
        error_cves = 0
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π CVE
        for i, cve_row in enumerate(cve_rows):
            cve = cve_row['cve']
            
            try:
                # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 CVE
                if i % 100 == 0:
                    print(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i+1}/{total_cves} CVE (–æ–±–Ω–æ–≤–ª–µ–Ω–æ —Ö–æ—Å—Ç–æ–≤: {updated_hosts}, –æ—à–∏–±–æ–∫: {error_cves})")
                
                # –ü–æ–ª—É—á–∞–µ–º EPSS –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
                epss_row = epss_data.get(cve)
                
                if not epss_row or epss_row['epss'] is None:
                    print(f"‚ö†Ô∏è –ù–µ—Ç EPSS –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {cve}")
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º —Ö–æ—Å—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ CVE
                hosts_query = "SELECT id, cvss, criticality FROM hosts WHERE cve = $1"
                hosts_rows = await conn.fetch(hosts_query, cve)
                
                if not hosts_rows:
                    continue
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∏—Å–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ö–æ—Å—Ç–∞
                for host_row in hosts_rows:
                    try:
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∏—Å–∫
                        epss_score = float(epss_row['epss'])
                        criticality = host_row['criticality'] or 'Medium'
                        
                        # –í–µ—Å–∞ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ —Ä–µ—Å—É—Ä—Å–∞
                        resource_weights = {
                            'Critical': 0.33,
                            'High': 0.25,
                            'Medium': 0.15,
                            'Low': 0.1,
                            'None': 0.05
                        }
                        
                        # –í–µ—Å–∞ –¥–ª—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                        data_weights = {
                            '–ï—Å—Ç—å': 0.33,
                            '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç': 0.1
                        }
                        
                        # –í–µ—Å–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
                        internet_weights = {
                            '–î–æ—Å—Ç—É–ø–µ–Ω': 0.33,
                            '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω': 0.1
                        }
                        
                        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                        confidential_data = settings.get('impact_confidential_data', '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç')
                        internet_access = settings.get('impact_internet_access', '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
                        
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º Impact
                        impact = (
                            resource_weights.get(criticality, 0.15) +
                            data_weights.get(confidential_data, 0.1) +
                            internet_weights.get(internet_access, 0.1)
                        )
                        
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∏—Å–∫
                        raw_risk = epss_score * impact
                        risk_score = min(1, raw_risk) * 100
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ö–æ—Å—Ç
                        update_query = """
                            UPDATE hosts SET
                                epss_score = $1,
                                epss_percentile = $2,
                                risk_score = $3,
                                risk_raw = $4,
                                epss_updated_at = $5,
                                risk_updated_at = $6
                            WHERE id = $7
                        """
                        
                        await conn.execute(update_query,
                            epss_score,
                            float(epss_row['percentile']) if epss_row['percentile'] else None,
                            risk_score,
                            raw_risk,
                            datetime.now(),
                            datetime.now(),
                            host_row['id']
                        )
                        
                        updated_hosts += 1
                        
                    except Exception as host_error:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ö–æ—Å—Ç–∞ {host_row['id']} –¥–ª—è {cve}: {host_error}")
                        continue
                
                processed_cves += 1
                
            except Exception as e:
                error_cves += 1
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ CVE {cve}: {e}")
                continue
        
        print(f"\n‚úÖ –ú–∞—Å—Å–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∏—Å–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω:")
        print(f"   üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ CVE: {processed_cves}/{total_cves}")
        print(f"   üè† –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ö–æ—Å—Ç–æ–≤: {updated_hosts}")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {error_cves}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        final_hosts_with_epss = await conn.fetchval("SELECT COUNT(*) FROM hosts WHERE epss_score IS NOT NULL")
        final_hosts_with_risk = await conn.fetchval("SELECT COUNT(*) FROM hosts WHERE risk_score IS NOT NULL")
        
        print(f"\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   üè† –•–æ—Å—Ç–æ–≤ —Å EPSS –¥–∞–Ω–Ω—ã–º–∏: {final_hosts_with_epss}")
        print(f"   üè† –•–æ—Å—Ç–æ–≤ —Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏ —Ä–∏—Å–∫–∞–º–∏: {final_hosts_with_risk}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        print(f"‚ùå –î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
    finally:
        await conn.close()

if __name__ == "__main__":
    asyncio.run(calculate_all_risks())
