#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è VM –∏–º–ø–æ—Ä—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º
"""
import csv
import io
import os

def _group_vm_data_by_hosts(vm_data):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ VM –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è hosts_repository (–æ–¥–∏–Ω CVE = –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å)"""
    result = []
    
    print(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ {len(vm_data)} –∑–∞–ø–∏—Å–µ–π (–æ–¥–∏–Ω CVE = –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å)")
    
    for record in vm_data:
        host_info = record['host']
        
        # –ü–∞—Ä—Å–∏–º hostname –∏ IP
        if ' (' in host_info:
            hostname = host_info.split(' (')[0]
            ip_address = host_info.split('(')[1].split(')')[0]
        else:
            hostname = host_info
            ip_address = ''
        
        # –ü–æ–ª—É—á–∞–µ–º CVE
        cve = record['cve']
        if not cve or not cve.strip():
            continue
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ CVE
        result.append({
            'hostname': hostname,
            'ip_address': ip_address,
            'cve': cve,
            'cvss': 0.0,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é CVSS = 0
            'criticality': record.get('criticality', 'Medium'),  # –ò–∑ Host.UF_Criticality
            'zone': record.get('zone', ''),  # –ò–∑ Host.UF_Zone
            'status': 'Active'
        })
    
    print(f"‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ {len(result)} –∑–∞–ø–∏—Å–µ–π –∏–∑ {len(vm_data)} –∏—Å—Ö–æ–¥–Ω—ã—Ö (–æ–¥–∏–Ω CVE = –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å)")
    return result

def test_vm_import():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç VM —Å —Ä–µ–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º"""
    
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VM –∏–º–ø–æ—Ä—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–æ–º")
    
    # –ß–∏—Ç–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    csv_file = '/Users/hom/Downloads/out.csv'
    if not os.path.exists(csv_file):
        print(f"‚ùå –§–∞–π–ª {csv_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    with open(csv_file, 'r', encoding='utf-8') as f:
        csv_content = f.read()
    
    print(f"üìä –†–∞–∑–º–µ—Ä CSV —Ñ–∞–π–ª–∞: {len(csv_content)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ü–∞—Ä—Å–∏–º CSV (–∫–∞–∫ –≤ vm_worker.py)
    csv_reader = csv.DictReader(io.StringIO(csv_content), delimiter=';')
    
    vm_data = []
    row_count = 0
    for row in csv_reader:
        row_count += 1
        if row_count <= 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫
            print(f"üìã –°—Ç—Ä–æ–∫–∞ {row_count}: {dict(row)}")
        
        vm_data.append({
            'host': row['@Host'].strip('"'),
            'os_name': row['Host.OsName'].strip('"'),
            'groups': row['Host.@Groups'].strip('"'),
            'cve': row['Host.@Vulners.CVEs'].strip('"'),
            'criticality': row['Host.UF_Criticality'].strip('"'),
            'zone': row['Host.UF_Zone'].strip('"')
        })
    
    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {row_count} —Å—Ç—Ä–æ–∫ CSV, —Å–æ–∑–¥–∞–Ω–æ {len(vm_data)} –∑–∞–ø–∏—Å–µ–π")
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
    hosts = _group_vm_data_by_hosts(vm_data)
    
    print(f"üìä –ü–æ—Å–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {len(hosts)} –∑–∞–ø–∏—Å–µ–π")
    if len(hosts) > 0:
        print(f"üìã –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏: {hosts[0]}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
    print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:")
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ —Å CVE (–∫–∞–∫ –≤ insert_hosts_records_with_progress)
    valid_records = [rec for rec in hosts if rec.get('cve', '').strip()]
    total_records = len(valid_records)
    skipped_records = len(hosts) - total_records
    
    print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—É—á–µ–Ω–æ: {len(hosts)}")
    print(f"‚úÖ –ó–∞–ø–∏—Å–µ–π —Å CVE: {total_records}")
    print(f"‚ùå –ó–∞–ø–∏—Å–µ–π –±–µ–∑ CVE (–ø—Ä–æ–ø—É—â–µ–Ω–æ): {skipped_records}")
    
    if len(hosts) > 0:
        print(f"üìã –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏: {hosts[0]}")
    if len(valid_records) > 0:
        print(f"‚úÖ –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–π –≤–∞–ª–∏–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏: {valid_records[0]}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    if valid_records:
        first_record = valid_records[0]
        required_fields = ['hostname', 'ip_address', 'cve', 'cvss', 'criticality', 'status']
        missing_fields = [field for field in required_fields if field not in first_record]
        
        if missing_fields:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}")
        else:
            print(f"‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö:")
        print(f"  hostname: {type(first_record['hostname'])} = '{first_record['hostname']}'")
        print(f"  ip_address: {type(first_record['ip_address'])} = '{first_record['ip_address']}'")
        print(f"  cve: {type(first_record['cve'])} = '{first_record['cve']}'")
        print(f"  cvss: {type(first_record['cvss'])} = {first_record['cvss']}")
        print(f"  criticality: {type(first_record['criticality'])} = '{first_record['criticality']}'")
        print(f"  zone: {type(first_record['zone'])} = '{first_record['zone']}'")
        print(f"  status: {type(first_record['status'])} = '{first_record['status']}'")
    
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {total_records} –∑–∞–ø–∏—Å–µ–π –≥–æ—Ç–æ–≤—ã –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º SQL –∑–∞–ø—Ä–æ—Å
    if valid_records:
        print(f"\nüîç –°–∏–º—É–ª—è—Ü–∏—è SQL –∑–∞–ø—Ä–æ—Å–∞:")
        first_record = valid_records[0]
        print(f"INSERT INTO vulnanalizer.hosts (hostname, ip_address, cve, cvss, criticality, status, os_name, zone)")
        print(f"VALUES (")
        print(f"  '{first_record['hostname']}',")
        print(f"  '{first_record['ip_address']}',")
        print(f"  '{first_record['cve']}',")
        print(f"  {first_record['cvss']},")
        print(f"  '{first_record['criticality']}',")
        print(f"  '{first_record['status']}',")
        print(f"  '',")  # os_name
        print(f"  '{first_record['zone']}'")
        print(f")")

if __name__ == "__main__":
    test_vm_import()