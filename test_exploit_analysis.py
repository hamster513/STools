#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤
"""
import subprocess
import json

def test_exploit_analysis():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ CVE —Å —ç–∫—Å–ø–ª–æ–π—Ç–∞–º–∏ –≤ ExploitDB
    print("\n1. –ü—Ä–æ–≤–µ—Ä—è–µ–º CVE —Å —ç–∫—Å–ø–ª–æ–π—Ç–∞–º–∏ –≤ ExploitDB:")
    result = subprocess.run([
        'docker', 'exec', 'stools_postgres', 'psql', 
        '-U', 'stools_user', '-d', 'stools_db', 
        '-c', "SELECT COUNT(DISTINCT split_part(codes, ';', 1)) as cve_with_exploits FROM vulnanalizer.exploitdb WHERE codes LIKE 'CVE-%';", 
        '--csv', '--no-align', '--tuples-only'
    ], capture_output=True, text=True)
    
    if result.returncode == 0:
        cve_with_exploits = result.stdout.strip()
        print(f"   ‚úÖ CVE —Å —ç–∫—Å–ø–ª–æ–π—Ç–∞–º–∏ –≤ ExploitDB: {cve_with_exploits}")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {result.stderr}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–æ—Å—Ç—ã —Å —ç–∫—Å–ø–ª–æ–π—Ç–∞–º–∏
    print("\n2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–æ—Å—Ç—ã —Å —ç–∫—Å–ø–ª–æ–π—Ç–∞–º–∏:")
    result = subprocess.run([
        'docker', 'exec', 'stools_postgres', 'psql', 
        '-U', 'stools_user', '-d', 'stools_db', 
        '-c', "SELECT COUNT(*) as hosts_with_exploits FROM vulnanalizer.hosts WHERE has_exploits = TRUE;", 
        '--csv', '--no-align', '--tuples-only'
    ], capture_output=True, text=True)
    
    if result.returncode == 0:
        hosts_with_exploits = result.stdout.strip()
        print(f"   ‚úÖ –•–æ—Å—Ç–æ–≤ —Å has_exploits = TRUE: {hosts_with_exploits}")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {result.stderr}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–æ—Å—Ç—ã —Å exploits_count > 0
    print("\n3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–æ—Å—Ç—ã —Å exploits_count > 0:")
    result = subprocess.run([
        'docker', 'exec', 'stools_postgres', 'psql', 
        '-U', 'stools_user', '-d', 'stools_db', 
        '-c', "SELECT COUNT(*) as hosts_with_exploits FROM vulnanalizer.hosts WHERE exploits_count > 0;", 
        '--csv', '--no-align', '--tuples-only'
    ], capture_output=True, text=True)
    
    if result.returncode == 0:
        hosts_with_exploits = result.stdout.strip()
        print(f"   ‚úÖ –•–æ—Å—Ç–æ–≤ —Å exploits_count > 0: {hosts_with_exploits}")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {result.stderr}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–º–µ—Ä—ã CVE —Å —ç–∫—Å–ø–ª–æ–π—Ç–∞–º–∏
    print("\n4. –ü—Ä–∏–º–µ—Ä—ã CVE —Å —ç–∫—Å–ø–ª–æ–π—Ç–∞–º–∏:")
    result = subprocess.run([
        'docker', 'exec', 'stools_postgres', 'psql', 
        '-U', 'stools_user', '-d', 'stools_db', 
        '-c', "SELECT split_part(codes, ';', 1) as cve_id, COUNT(*) as exploit_count FROM vulnanalizer.exploitdb WHERE codes LIKE 'CVE-%' GROUP BY split_part(codes, ';', 1) ORDER BY exploit_count DESC LIMIT 5;", 
        '--csv', '--no-align', '--tuples-only'
    ], capture_output=True, text=True)
    
    if result.returncode == 0:
        lines = result.stdout.strip().split('\n')
        for line in lines:
            if line and '|' in line:
                parts = line.split('|')
                if len(parts) >= 2:
                    cve_id = parts[0].strip()
                    exploit_count = parts[1].strip()
                    print(f"   üìã {cve_id}: {exploit_count} —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {result.stderr}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–æ—Å—Ç—ã —Å —ç—Ç–∏–º–∏ CVE
    print("\n5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–æ—Å—Ç—ã —Å CVE, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ ExploitDB:")
    result = subprocess.run([
        'docker', 'exec', 'stools_postgres', 'psql', 
        '-U', 'stools_user', '-d', 'stools_db', 
        '-c', "SELECT COUNT(*) as hosts_with_exploit_cves FROM vulnanalizer.hosts WHERE cve IN (SELECT DISTINCT split_part(codes, ';', 1) FROM vulnanalizer.exploitdb WHERE codes LIKE 'CVE-%');", 
        '--csv', '--no-align', '--tuples-only'
    ], capture_output=True, text=True)
    
    if result.returncode == 0:
        hosts_with_exploit_cves = result.stdout.strip()
        print(f"   ‚úÖ –•–æ—Å—Ç–æ–≤ —Å CVE –∏–∑ ExploitDB: {hosts_with_exploit_cves}")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {result.stderr}")

if __name__ == "__main__":
    test_exploit_analysis()
