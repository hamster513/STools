/**
 * Модуль для модального окна предварительного просмотра CVE данных
 * v=1.3
 */
class CVEPreviewModalModule extends BaseModalModule {
    constructor(app) {
        super(app, {
            modalId: 'cve-preview-modal',
            closeId: 'cve-preview-modal-close',
            contentId: 'cve-preview-modal-content',
            apiEndpoint: '/vulnanalizer/api/cve/preview',
            tableId: 'cve-preview-table',
            title: 'CVE'
        });
    }

    getTableHeaders() {
        return `
            <th>CVE ID</th>
            <th>Description</th>
            <th>CVSS v3 Score</th>
            <th>CVSS v3 Severity</th>
            <th>Attack Vector</th>
            <th>Privileges</th>
            <th>User Interaction</th>
            <th>CVSS v2 Score</th>
            <th>CVSS v2 Severity</th>
            <th>Access Vector</th>
            <th>Access Complexity</th>
            <th>Authentication</th>
            <th>Published Date</th>
        `;
    }

    getColumnCount() {
        return 13;
    }

    formatRow(record) {
        const description = this.truncateText(record.description, 80);
        const cvssV3Score = this.formatCVSSScore(record.cvss_v3_score, record.cvss_v3_severity);
        const cvssV2Score = this.formatCVSSScore(record.cvss_v2_score, record.cvss_v2_severity);

        return `
            <td>${record.cve_id || 'N/A'}</td>
            <td title="${record.description || ''}">${description}</td>
            <td>${cvssV3Score}</td>
            <td>${this.formatSeverity(record.cvss_v3_severity)}</td>
            <td>${this.formatField(record.cvss_v3_attack_vector)}</td>
            <td>${this.formatField(record.cvss_v3_privileges_required)}</td>
            <td>${this.formatField(record.cvss_v3_user_interaction)}</td>
            <td>${cvssV2Score}</td>
            <td>${this.formatSeverity(record.cvss_v2_severity)}</td>
            <td>${this.formatField(record.cvss_v2_access_vector)}</td>
            <td>${this.formatField(record.cvss_v2_access_complexity)}</td>
            <td>${this.formatField(record.cvss_v2_authentication)}</td>
            <td>${this.formatDate(record.published_date)}</td>
        `;
    }

    formatCVSSScore(score, severity) {
        if (score === null || score === undefined) return 'N/A';
        const scoreClass = this.getCVSSScoreClass(score);
        const severityText = severity ? ` (${severity})` : '';
        return `<span class="cvss-score ${scoreClass}">${score}${severityText}</span>`;
    }

    getCVSSScoreClass(score) {
        if (score >= 9.0) return 'cvss-critical';
        if (score >= 7.0) return 'cvss-high';
        if (score >= 4.0) return 'cvss-medium';
        return 'cvss-low';
    }

    formatDate(dateString) {
        if (!dateString) return 'N/A';
        try {
            const date = new Date(dateString);
            return date.toLocaleDateString('ru-RU');
        } catch (e) {
            return dateString;
        }
    }

    truncateText(text, maxLength) {
        if (!text) return 'N/A';
        if (text.length <= maxLength) return text;
        return text.substring(0, maxLength) + '...';
    }

    formatSeverity(severity) {
        if (!severity) return 'N/A';
        const severityClass = this.getSeverityClass(severity);
        return `<span class="severity-badge ${severityClass}">${severity}</span>`;
    }

    formatField(field) {
        if (!field) return 'N/A';
        return field;
    }

    getSeverityClass(severity) {
        switch (severity?.toUpperCase()) {
            case 'CRITICAL': return 'severity-critical';
            case 'HIGH': return 'severity-high';
            case 'MEDIUM': return 'severity-medium';
            case 'LOW': return 'severity-low';
            default: return 'severity-unknown';
        }
    }
}
