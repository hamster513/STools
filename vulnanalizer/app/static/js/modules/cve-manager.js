/**
 * CVE Manager - модуль для управления загрузкой CVE данных
 */

class CVEManager {
    constructor(app) {
        this.app = app;
        this.selectedYears = new Set();
        this.isDownloading = false;
        this.currentTaskId = null;
        this.statusCheckInterval = null;
        
        this.init();
    }
    
    init() {
        this.setupYearSelector();
        this.setupEventListeners();
        this.loadCVEStatus();
    }
    
    setupYearSelector() {
        const yearGrid = document.getElementById('year-grid');
        if (!yearGrid) return;
        
        // Генерируем годы с 2002 по текущий
        const currentYear = new Date().getFullYear();
        const years = [];
        for (let year = currentYear; year >= 2002; year--) {
            years.push(year);
        }
        
        // Создаем чекбоксы для каждого года
        years.forEach(year => {
            const checkbox = document.createElement('div');
            checkbox.className = 'year-checkbox';
            checkbox.innerHTML = `
                <span>${year}</span>
                <input type="checkbox" id="year-${year}" value="${year}">
            `;
            
            // Обработчик клика
            checkbox.addEventListener('click', (e) => {
                if (e.target.type !== 'checkbox') {
                    const input = checkbox.querySelector('input');
                    input.checked = !input.checked;
                }
                
                // Синхронизируем визуальное состояние
                const input = checkbox.querySelector('input');
                if (input.checked) {
                    checkbox.classList.add('selected');
                } else {
                    checkbox.classList.remove('selected');
                }
                
                this.updateYearSelection();
            });
            
            yearGrid.appendChild(checkbox);
        });
        
        // По умолчанию выбираем последние 5 лет
        this.selectRecentYears();
    }
    
    setupEventListeners() {
        // Настройка сворачиваемого блока выбора годов
        this.setupYearSelectorCollapsible();
        
        // Кнопки управления выбором лет
        document.getElementById('select-all-years')?.addEventListener('click', () => {
            this.selectAllYears();
        });
        
        document.getElementById('select-recent-years')?.addEventListener('click', () => {
            this.selectRecentYears();
        });
        
        document.getElementById('clear-years')?.addEventListener('click', () => {
            this.clearYearSelection();
        });
        
        // Кнопки загрузки
        document.getElementById('download-cve-btn')?.addEventListener('click', () => {
            this.startDownload();
        });
        
        document.getElementById('cancel-cve-btn')?.addEventListener('click', () => {
            this.cancelDownload();
        });
    }
    
    updateYearSelection() {
        this.selectedYears.clear();
        const checkboxes = document.querySelectorAll('#year-grid input[type="checkbox"]:checked');
        checkboxes.forEach(checkbox => {
            this.selectedYears.add(parseInt(checkbox.value));
        });
        
        // Обновляем визуальное состояние
        document.querySelectorAll('#year-grid .year-checkbox').forEach(checkbox => {
            const input = checkbox.querySelector('input');
            if (input.checked) {
                checkbox.classList.add('selected');
            } else {
                checkbox.classList.remove('selected');
            }
        });
    }
    
    selectAllYears() {
        document.querySelectorAll('#year-grid input[type="checkbox"]').forEach(checkbox => {
            checkbox.checked = true;
            
            // Синхронизируем визуальное состояние
            const yearDiv = checkbox.closest('.year-checkbox');
            yearDiv.classList.add('selected');
        });
        this.updateYearSelection();
    }
    
    selectRecentYears() {
        const currentYear = new Date().getFullYear();
        document.querySelectorAll('#year-grid input[type="checkbox"]').forEach(checkbox => {
            const year = parseInt(checkbox.value);
            const shouldBeChecked = (year >= currentYear - 4);
            checkbox.checked = shouldBeChecked;
            
            // Синхронизируем визуальное состояние
            const yearDiv = checkbox.closest('.year-checkbox');
            if (shouldBeChecked) {
                yearDiv.classList.add('selected');
            } else {
                yearDiv.classList.remove('selected');
            }
        });
        this.updateYearSelection();
    }
    
    clearYearSelection() {
        document.querySelectorAll('#year-grid input[type="checkbox"]').forEach(checkbox => {
            checkbox.checked = false;
            
            // Синхронизируем визуальное состояние
            const yearDiv = checkbox.closest('.year-checkbox');
            yearDiv.classList.remove('selected');
        });
        this.updateYearSelection();
    }
    
    setupYearSelectorCollapsible() {
        const header = document.querySelector('.cve-year-selector-container .collapsible-header');
        if (!header) return;
        
        // Инициализация - блок должен быть свернут
        setTimeout(() => {
            const content = document.getElementById('cve-year-selector');
            const arrow = header.querySelector('.collapsible-arrow i');
            
            if (content) {
                // Убираем класс active чтобы блок был свернут
                content.classList.remove('active');
            }
            
            if (arrow) {
                arrow.style.transform = 'rotate(-90deg)';
            }
        }, 100);
        
        // Обработчик клика на заголовок
        header.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            
            const targetId = header.getAttribute('data-target');
            const content = document.getElementById(targetId);
            const arrow = header.querySelector('.collapsible-arrow i');
            
            if (content) {
                // Проверяем состояние через класс active
                const isCollapsed = !content.classList.contains('active');
                
                if (isCollapsed) {
                    // Разворачиваем
                    content.classList.add('active');
                    if (arrow) {
                        arrow.style.transform = 'rotate(180deg)';
                    }
                } else {
                    // Сворачиваем
                    content.classList.remove('active');
                    if (arrow) {
                        arrow.style.transform = 'rotate(-90deg)';
                    }
                }
            }
        });
    }
    
    async startDownload() {
        if (this.selectedYears.size === 0) {
            this.showNotification('Выберите хотя бы один год для загрузки', 'warning');
            return;
        }
        
        if (this.isDownloading) {
            this.showNotification('Загрузка уже выполняется', 'warning');
            return;
        }
        
        try {
            const years = Array.from(this.selectedYears);
            
            this.showNotification(`Запуск загрузки CVE для ${years.length} лет...`, 'info');
            
            const response = await fetch('/vulnanalizer/api/cve/download', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ years })
            });
            
            const data = await response.json();
            
            if (data.success) {
                this.isDownloading = true;
                this.currentTaskId = data.task_id;
                
                // Показываем кнопку отмены
                document.getElementById('download-cve-btn').style.display = 'none';
                document.getElementById('cancel-cve-btn').style.display = 'inline-block';
                
                // Запускаем мониторинг прогресса
                this.startProgressMonitoring();
                
                this.showNotification('Загрузка CVE запущена', 'success');
            } else {
                this.showNotification('Ошибка запуска загрузки', 'error');
            }
        } catch (error) {
            this.showNotification('Ошибка запуска загрузки CVE', 'error');
        }
    }
    
    async cancelDownload() {
        if (!this.isDownloading) return;
        
        try {
            const response = await fetch('/vulnanalizer/api/cve/cancel', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            });
            
            const data = await response.json();
            
            if (data.success) {
                this.isDownloading = false;
                this.currentTaskId = null;
                
                // Скрываем кнопку отмены
                document.getElementById('download-cve-btn').style.display = 'inline-block';
                document.getElementById('cancel-cve-btn').style.display = 'none';
                
                // Останавливаем мониторинг
                this.stopProgressMonitoring();
                
                this.showNotification('Загрузка CVE отменена', 'info');
                this.updateCVEStatus();
            } else {
                this.showNotification('Ошибка отмены загрузки', 'error');
            }
        } catch (error) {
            this.showNotification('Ошибка отмены загрузки CVE', 'error');
        }
    }
    
    startProgressMonitoring() {
        this.statusCheckInterval = setInterval(() => {
            this.checkDownloadProgress();
        }, 2000); // Проверяем каждые 2 секунды
    }
    
    stopProgressMonitoring() {
        if (this.statusCheckInterval) {
            clearInterval(this.statusCheckInterval);
            this.statusCheckInterval = null;
        }
    }
    
    async checkDownloadProgress() {
        try {
            const response = await fetch('/vulnanalizer/api/cve/status');
            const data = await response.json();
            
            if (data.success) {
                this.updateCVEStatus(data);
                
                // Если загрузка завершена
                if (!data.is_downloading && this.isDownloading) {
                    this.isDownloading = false;
                    this.currentTaskId = null;
                    
                    // Скрываем кнопку отмены
                    document.getElementById('download-cve-btn').style.display = 'inline-block';
                    document.getElementById('cancel-cve-btn').style.display = 'none';
                    
                    // Останавливаем мониторинг
                    this.stopProgressMonitoring();
                    
                    if (data.task_details?.status === 'completed') {
                        this.showNotification('Загрузка CVE завершена успешно', 'success');
                    } else if (data.task_details?.status === 'cancelled') {
                        this.showNotification('Загрузка CVE отменена', 'info');
                    } else if (data.task_details?.status === 'error') {
                        this.showNotification('Ошибка загрузки CVE', 'error');
                    }
                }
            }
        } catch (error) {
        }
    }
    
    updateCVEStatus(data = null) {
        const statusDiv = document.getElementById('cve-status');
        
        if (!statusDiv) return;
        
        if (data && data.task_details) {
            const task = data.task_details;
            
            let progressHtml = '';
            if (task.total_items && task.processed_items !== undefined) {
                const progress = Math.round((task.processed_items / task.total_items) * 100);
    
                progressHtml = `
                    <div class="operation-progress-bar">
                        <div class="operation-progress-fill" style="width: ${progress}%"></div>
                    </div>
                    <div class="operation-progress-text">${progress}% (${task.processed_items}/${task.total_items})</div>
                `;
            }
            
            let detailsHtml = '';
            if (task.details) {
                detailsHtml = `<div class="status-details"><small><strong>Детали:</strong> ${task.details}</small></div>`;
            }
            
            if (task.total_records) {
                detailsHtml += `<div class="status-details"><small><strong>Загружено CVE:</strong> ${task.total_records.toLocaleString()}</small></div>`;
            }
            
            if (task.total_items && task.processed_items !== undefined) {
                detailsHtml += `<div class="status-details"><small><strong>Обработано:</strong> ${task.processed_items}/${task.total_items}</small></div>`;
            }
            
            const statusHtml = `
                <div class="operation-status active">
                    <div class="status-header">
                        <i class="fas fa-spinner fa-spin"></i>
                        <span class="status-message">Загрузка CVE</span>
                    </div>
                    <div class="status-details">
                        <small><strong>Этап:</strong> ${task.current_step || 'Инициализация'}</small>
                    </div>
                    ${progressHtml}
                    ${detailsHtml}
                </div>
            `;
            statusDiv.innerHTML = statusHtml;
        } else {
            statusDiv.innerHTML = '';
        }
    }
    
    async loadCVEStatus() {
        try {
            const response = await fetch('/vulnanalizer/api/cve/status');
            const data = await response.json();
            
            if (data.success) {
                this.updateCVEStatus(data);
                
                // Если загрузка уже идет, показываем кнопку отмены
                if (data.is_downloading) {
                    this.isDownloading = true;
                    this.currentTaskId = data.current_task_id;
                    document.getElementById('download-cve-btn').style.display = 'none';
                    document.getElementById('cancel-cve-btn').style.display = 'inline-block';
                    this.startProgressMonitoring();
                }
            }
        } catch (error) {
        }
    }
    
    showNotification(message, type = 'info') {
        // Простая функция уведомлений

        // Можно добавить более сложную логику уведомлений если нужно
    }
}

// Экспорт для использования в основном приложении
window.CVEManager = CVEManager;
