/**
 * Модуль для модального окна предварительного просмотра ExploitDB данных
 */
class ExploitDBModalModule extends BaseModalModule {
    constructor(app) {
        super(app, {
            modalId: 'exploitdb-modal',
            closeId: 'exploitdb-modal-close',
            contentId: 'exploitdb-modal-content',
            apiEndpoint: '/vulnanalizer/api/exploitdb/preview',
            tableId: 'exploitdb-table',
            title: 'ExploitDB'
        });
    }

    getTableHeaders() {
        return `
            <th>ID</th>
            <th>File</th>
            <th>Type</th>
            <th>Platform</th>
            <th>Description</th>
            <th>Author</th>
            <th>Verified</th>
            <th>Created At</th>
        `;
    }

    getColumnCount() {
        return 8;
    }

    formatRow(record) {
        const filePath = this.truncateText(record.file_path, 50);
        const description = this.truncateText(record.description, 80);
        const verifiedBadge = this.getVerifiedBadge(record.verified);
        const type = record.type || 'N/A';
        const platform = record.platform || 'N/A';
        const author = this.truncateText(record.author, 30) || 'N/A';

        return `
            <td>${record.exploit_id || 'N/A'}</td>
            <td title="${record.file_path || ''}">${filePath}</td>
            <td><span class="exploit-type ${type.toLowerCase()}">${type}</span></td>
            <td>${platform}</td>
            <td title="${record.description || ''}">${description}</td>
            <td title="${record.author || ''}">${author}</td>
            <td>${verifiedBadge}</td>
            <td>${this.formatDate(record.created_at)}</td>
        `;
    }

    getVerifiedBadge(verified) {
        if (verified === true || verified === 1) {
            return '<span class="exploit-verified verified">Verified</span>';
        } else if (verified === false || verified === 0) {
            return '<span class="exploit-verified not-verified">Not Verified</span>';
        } else {
            return '<span class="exploit-verified unknown">Unknown</span>';
        }
    }

    formatDate(dateString) {
        if (!dateString) return 'N/A';
        try {
            const date = new Date(dateString);
            return date.toLocaleDateString('ru-RU');
        } catch (e) {
            return dateString;
        }
    }

    truncateText(text, maxLength) {
        if (!text) return 'N/A';
        if (text.length <= maxLength) return text;
        return text.substring(0, maxLength) + '...';
    }
}
