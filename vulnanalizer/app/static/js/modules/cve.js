/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å CVE
 */
class CVEModule {
    constructor(app) {
        this.app = app;
        this.init();
    }

    init() {
        this.setupEventListeners();
        this.updateStatus();
    }

    setupEventListeners() {
        // –ó–∞–≥—Ä—É–∑–∫–∞ CSV
        const cveForm = document.getElementById('cve-upload-form');
        if (cveForm) {
            cveForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                await this.uploadCVE();
            });
        }
        
        // –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å —Å–∞–π—Ç–∞
        const cveDownloadBtn = document.getElementById('cve-download-btn');
        if (cveDownloadBtn) {
            cveDownloadBtn.addEventListener('click', async () => {
                await this.downloadCVE();
            });
        }

        // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–≥—Ä—É–∑–∫–∏ CVE
        const cveCancelBtn = document.getElementById('cve-cancel-btn');
        if (cveCancelBtn) {
            cveCancelBtn.addEventListener('click', async () => {
                await this.cancelCVE();
            });
        }


        // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        const cvePreviewBtn = document.getElementById('cve-preview-btn');
        if (cvePreviewBtn) {
            cvePreviewBtn.addEventListener('click', () => {
                this.showCVEPreview();
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –±–ª–æ–∫–∞ —Å—Å—ã–ª–æ–∫ CVE
        this.setupCveDownloadLinksHandler();

    }

    setupCveDownloadLinksHandler() {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É —á—Ç–æ–±—ã DOM —É—Å–ø–µ–ª –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è
        setTimeout(() => {
            const cveDownloadLinksHeader = document.querySelector('[data-target="cve-download-links"]');
            if (cveDownloadLinksHeader) {
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫ —Å–≤–µ—Ä–Ω—É—Ç—ã–π
                const content = document.getElementById('cve-download-links');
                const arrow = cveDownloadLinksHeader.querySelector('.collapsible-arrow i');
                
                if (content) {
                    content.style.display = 'none';
                    if (arrow) {
                        arrow.style.transform = 'rotate(-90deg)';
                    }
                }
                
                cveDownloadLinksHeader.addEventListener('click', (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    
                    const targetId = cveDownloadLinksHeader.getAttribute('data-target');
                    const content = document.getElementById(targetId);
                    const arrow = cveDownloadLinksHeader.querySelector('.collapsible-arrow i');
                    
                    if (content) {
                        const isCollapsed = content.style.display === 'none' || content.style.display === '';
                        
                        if (isCollapsed) {
                            content.style.display = 'block';
                            if (arrow) {
                                arrow.style.transform = 'rotate(180deg)';
                            }
                            
                            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Å—ã–ª–∫–∏ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
                            const linksContent = document.getElementById('cve-download-links-content');
                            if (linksContent && !linksContent.innerHTML.trim()) {
                                this.loadCveDownloadLinks();
                            }
                        } else {
                            content.style.display = 'none';
                            if (arrow) {
                                arrow.style.transform = 'rotate(-90deg)';
                            }
                        }
                    }
                });
            }
        }, 100);
    }

    async updateStatus() {
        try {
            const data = await this.app.api.getCVEStatus();
            
            if (data.success) {
                const statusDiv = document.getElementById('cve-status');
                if (statusDiv) {
                    statusDiv.innerHTML = `
                        <div style="margin-bottom: 15px;">
                            <b>–ó–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ CVE:</b> ${data.count}
                        </div>
                    `;
                }
            } else {
                const statusDiv = document.getElementById('cve-status');
                if (statusDiv) {
                    statusDiv.innerHTML = '<span style="color:var(--error-color)">–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ CVE</span>';
                }
            }
        } catch (err) {
            const statusDiv = document.getElementById('cve-status');
            if (statusDiv) {
                statusDiv.innerHTML = '<span style="color:var(--error-color)">–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ CVE</span>';
            }
        }
    }


    async loadCveDownloadLinks() {
        const linksContent = document.getElementById('cve-download-links-content');
        if (!linksContent) return;
        
        try {
            const data = await this.app.api.getCVEDownloadUrls();
            
            if (data.success && data.urls) {
                let linksHtml = '<div style="display: flex; flex-direction: column; gap: 6px; margin-top: 10px;">';
                
                data.urls.forEach(urlInfo => {
                    linksHtml += `
                        <a href="${urlInfo.url}" target="_blank" style="display: flex; align-items: center; gap: 6px; color: #2563eb; text-decoration: none; font-size: 0.8rem; padding: 4px 8px; border-radius: 4px; border: 1px solid #e5e7eb;">
                            üîó <span style="flex: 1;">CVE ${urlInfo.year} (${urlInfo.filename})</span>
                        </a>`;
                });
                
                linksHtml += '</div>';
                linksContent.innerHTML = linksHtml;
            } else {
                // Fallback —Å—Å—ã–ª–∫–∏ –µ—Å–ª–∏ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                linksContent.innerHTML = `
                    <div style="display: flex; flex-direction: column; gap: 6px; margin-top: 10px;">
                        <a href="https://nvd.nist.gov/feeds/json/cve/1.1/" target="_blank" style="display: flex; align-items: center; gap: 6px; color: #2563eb; text-decoration: none; font-size: 0.8rem; padding: 4px 8px; border-radius: 4px; border: 1px solid #e5e7eb;">
                            üîó <span style="flex: 1;">NVD CVE Feeds (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç)</span>
                            <span style="font-size: 0.7rem; color: #64748b; font-style: italic;">JSON/GZ</span>
                        </a>
                        <a href="https://nvd.nist.gov/vuln/data-feeds" target="_blank" style="display: flex; align-items: center; gap: 6px; color: #2563eb; text-decoration: none; font-size: 0.8rem; padding: 4px 8px; border-radius: 4px; border: 1px solid #e5e7eb;">
                            üåê <span style="flex: 1;">NVD Data Feeds (–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è)</span>
                        </a>
                    </div>
                `;
            }
        } catch (err) {
            console.warn('Failed to get CVE download URLs:', err);
            linksContent.innerHTML = `
                <div style="display: flex; flex-direction: column; gap: 6px; margin-top: 10px;">
                    <a href="https://nvd.nist.gov/feeds/json/cve/1.1/" target="_blank" style="display: flex; align-items: center; gap: 6px; color: #2563eb; text-decoration: none; font-size: 0.8rem; padding: 4px 8px; border-radius: 4px; border: 1px solid #e5e7eb;">
                        üîó <span style="flex: 1;">NVD CVE Feeds (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç)</span>
                        <span style="font-size: 0.7rem; color: #64748b; font-style: italic;">JSON/GZ</span>
                    </a>
                    <a href="https://nvd.nist.gov/vuln/data-feeds" target="_blank" style="display: flex; align-items: center; gap: 6px; color: #2563eb; text-decoration: none; font-size: 0.8rem; padding: 4px 8px; border-radius: 4px; border: 1px solid #e5e7eb;">
                        üåê <span style="flex: 1;">NVD Data Feeds (–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è)</span>
                    </a>
                </div>
            `;
        }
    }

    async uploadCVE() {
        const fileInput = document.getElementById('cve-file');
        if (!fileInput.files.length) {
            this.app.notifications.show('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏', 'warning');
            return;
        }
        
        const uploadBtn = document.getElementById('cve-upload-btn');
        const btnText = uploadBtn.querySelector('.btn-text');
        const spinner = uploadBtn.querySelector('.fa-spinner');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        btnText.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';
        spinner.style.display = 'inline-block';
        uploadBtn.disabled = true;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Å—Ç–∞—Ç—É—Å–±–∞—Ä–µ
        this.showOperationProgress('cve', '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ CVE...', 0);
        
        try {
            // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
            this.updateOperationProgress('cve', '–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ CVE...', 25, '–ß—Ç–µ–Ω–∏–µ CSV —Ñ–∞–π–ª–∞...');
            await new Promise(resolve => setTimeout(resolve, 500));
            
            this.updateOperationProgress('cve', '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É...', 50, '–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');
            await new Promise(resolve => setTimeout(resolve, 500));
            
            this.updateOperationProgress('cve', '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π...', 75, '–ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
            
            const data = await this.app.api.uploadCVE(fileInput.files[0]);
            
            if (data.success) {
                this.updateOperationProgress('cve', '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏...', 90, '–§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞...');
                await new Promise(resolve => setTimeout(resolve, 300));
                
                this.showOperationComplete('cve', 'CVE –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', `–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${data.count}`);
                this.app.notifications.show(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${data.count}`, 'success');
                this.updateStatus();
                fileInput.value = '';
            } else {
                this.showOperationError('cve', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CVE', data.detail || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
                this.app.notifications.show('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CVE', 'error');
            }
        } catch (err) {
            console.error('CVE upload error:', err);
            this.showOperationError('cve', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CVE', err.message);
            this.app.notifications.show('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CVE', 'error');
        } finally {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            btnText.textContent = '–ó–∞–≥—Ä—É–∑–∏—Ç—å CSV';
            spinner.style.display = 'none';
            uploadBtn.disabled = false;
        }
    }

    async downloadCVE() {
        const cveDownloadBtn = document.getElementById('cve-download-btn');
        const btnText = cveDownloadBtn.querySelector('.btn-text');
        const spinner = cveDownloadBtn.querySelector('.fa-spinner');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        btnText.textContent = '–°–∫–∞—á–∏–≤–∞–Ω–∏–µ...';
        spinner.style.display = 'inline-block';
        cveDownloadBtn.disabled = true;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        const cveCancelBtn = document.getElementById('cve-cancel-btn');
        if (cveCancelBtn) {
            cveCancelBtn.style.display = 'inline-block';
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Å—Ç–∞—Ç—É—Å–±–∞—Ä–µ
        this.showOperationProgress('cve', '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É CVE...', 0);
        
        try {
            this.updateOperationProgress('cve', '–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞...', 25, '–ó–∞–≥—Ä—É–∑–∫–∞ —Å empiricalsecurity.com...');
            await new Promise(resolve => setTimeout(resolve, 800));
            
            this.updateOperationProgress('cve', '–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...', 50, '–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥ CSV...');
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            this.updateOperationProgress('cve', '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É...', 75, '–ó–∞–ø–∏—Å—å CVE –¥–∞–Ω–Ω—ã—Ö...');
            
            const data = await this.app.api.downloadCVE();
            
            if (data.success) {
                this.updateOperationProgress('cve', '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏...', 90, '–§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞...');
                await new Promise(resolve => setTimeout(resolve, 300));
                
                this.showOperationComplete('cve', 'CVE –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω—ã', `–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${data.count}`);
                this.app.notifications.show(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${data.count}`, 'success');
                this.updateStatus();
            } else {
                this.showOperationError('cve', '–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è CVE', data.detail || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
                this.app.notifications.show('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è CVE', 'error');
            }
        } catch (err) {
            console.error('CVE download error:', err);
            this.showOperationError('cve', '–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è CVE', err.message);
            this.app.notifications.show('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è CVE', 'error');
        } finally {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            btnText.textContent = '–°–∫–∞—á–∞—Ç—å —Å NVD';
            spinner.style.display = 'none';
            cveDownloadBtn.disabled = false;
            
            // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
            const cveCancelBtn = document.getElementById('cve-cancel-btn');
            if (cveCancelBtn) {
                cveCancelBtn.style.display = 'none';
            }
        }
    }

    async cancelCVE() {
        const cveCancelBtn = document.getElementById('cve-cancel-btn');
        const btnText = cveCancelBtn.querySelector('.btn-text');
        const spinner = cveCancelBtn.querySelector('.fa-spinner');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        btnText.textContent = '–û—Ç–º–µ–Ω–∞...';
        spinner.style.display = 'inline-block';
        cveCancelBtn.disabled = true;
        
        try {
            const data = await this.app.api.cancelCVE();
            
            if (data.success) {
                this.app.notifications.show('–ó–∞–≥—Ä—É–∑–∫–∞ CVE –æ—Ç–º–µ–Ω–µ–Ω–∞', 'success');
                // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
                cveCancelBtn.style.display = 'none';
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                const cveDownloadBtn = document.getElementById('cve-download-btn');
                if (cveDownloadBtn) {
                    cveDownloadBtn.disabled = false;
                }
            } else {
                this.app.notifications.show(data.message || '–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–≥—Ä—É–∑–∫–∏', 'warning');
            }
        } catch (err) {
            console.error('CVE cancel error:', err);
            this.app.notifications.show('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–≥—Ä—É–∑–∫–∏ CVE', 'error');
        } finally {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            btnText.textContent = '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É';
            spinner.style.display = 'none';
            cveCancelBtn.disabled = false;
        }
    }


    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –æ–ø–µ—Ä–∞—Ü–∏–π
    showOperationProgress(operationId, message, progress = null) {
        const statusDiv = document.getElementById(`${operationId}-status`);
        if (!statusDiv) return;
        
        let progressHtml = '';
        if (progress !== null) {
            progressHtml = `
                <div class="operation-progress-bar">
                    <div class="operation-progress-fill" style="width: ${progress}%"></div>
                </div>
                <div class="operation-progress-text">${progress.toFixed(1)}%</div>
            `;
        }
        
        statusDiv.innerHTML = `
            <div class="operation-status active">
                <div class="status-header">
                    <i class="fas fa-spinner fa-spin"></i>
                    <span class="status-message">${message}</span>
                </div>
                ${progressHtml}
                <div class="status-details">
                    <small>–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...</small>
                </div>
            </div>
        `;
    }

    updateOperationProgress(operationId, message, progress = null, details = null) {
        const statusDiv = document.getElementById(`${operationId}-status`);
        if (!statusDiv) return;
        
        let progressHtml = '';
        if (progress !== null) {
            progressHtml = `
                <div class="operation-progress-bar">
                    <div class="operation-progress-fill" style="width: ${progress}%"></div>
                </div>
                <div class="operation-progress-text">${progress.toFixed(1)}%</div>
            `;
        }
        
        let detailsHtml = '';
        if (details) {
            detailsHtml = `<div class="status-details"><small>${details}</small></div>`;
        }
        
        statusDiv.innerHTML = `
            <div class="operation-status active">
                <div class="status-header">
                    <i class="fas fa-spinner fa-spin"></i>
                    <span class="status-message">${message}</span>
                </div>
                ${progressHtml}
                ${detailsHtml}
            </div>
        `;
    }

    showOperationComplete(operationId, message, details = null) {
        const statusDiv = document.getElementById(`${operationId}-status`);
        if (!statusDiv) return;
        
        let detailsHtml = '';
        if (details) {
            detailsHtml = `<div class="status-details"><small>${details}</small></div>`;
        }
        
        statusDiv.innerHTML = `
            <div class="operation-status success">
                <div class="status-header">
                    <i class="fas fa-check-circle"></i>
                    <span class="status-message">${message}</span>
                </div>
                ${detailsHtml}
            </div>
        `;
    }

    showOperationError(operationId, message, error = null) {
        const statusDiv = document.getElementById(`${operationId}-status`);
        if (!statusDiv) return;
        
        let errorHtml = '';
        if (error) {
            errorHtml = `<div class="status-details"><small class="error-text">${error}</small></div>`;
        }
        
        statusDiv.innerHTML = `
            <div class="operation-status error">
                <div class="status-header">
                    <i class="fas fa-exclamation-triangle"></i>
                    <span class="status-message">${message}</span>
                </div>
                ${errorHtml}
            </div>
        `;
    }

    showCVEPreview() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if (this.app.cvePreviewModal) {
            this.app.cvePreviewModal.show();
        } else {
            console.error('CVEPreviewModal not found in app');
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –º–æ–¥—É–ª—è
if (typeof module !== 'undefined' && module.exports) {
    module.exports = CVEModule;
} else {
    window.CVEModule = CVEModule;
}
