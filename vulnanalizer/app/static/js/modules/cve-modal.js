/**
 * Модуль для работы с модальным окном CVE
 * v=1.4
 */
class CVEModalModule {
    constructor(app) {
        console.log('CVEModalModule конструктор вызван');
        this.app = app;
        this.modal = null;
        this.init();
    }

    init() {
        console.log('CVEModalModule init() вызван');
        this.modal = document.getElementById('cve-modal');
        console.log('cve-modal элемент найден:', this.modal);
        this.setupEventListeners();
    }

    setupEventListeners() {
        // Закрытие модального окна по клику на X
        const closeBtn = document.getElementById('cve-modal-close');
        if (closeBtn) {
            closeBtn.addEventListener('click', () => {
                this.hide();
            });
        }

        // Закрытие модального окна по клику вне его
        if (this.modal) {
            this.modal.addEventListener('click', (e) => {
                if (e.target === this.modal) {
                    this.hide();
                }
            });
        }

        // Закрытие по Escape
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.modal && this.modal.style.display !== 'none') {
                this.hide();
            }
        });
    }

    show(cveId) {
        if (!this.modal) return;

        // Показываем модальное окно
        this.modal.style.display = 'flex';
        this.modal.classList.add('show');

        // Показываем загрузку
        this.showLoading();

        // Загружаем данные CVE
        this.loadCVEData(cveId);
    }

    hide() {
        if (!this.modal) return;

        this.modal.style.display = 'none';
        this.modal.classList.remove('show');
    }

    showLoading() {
        const loading = document.getElementById('cve-modal-loading');
        const content = document.getElementById('cve-modal-content');
        const error = document.getElementById('cve-modal-error');

        if (loading) loading.style.display = 'block';
        if (content) content.style.display = 'none';
        if (error) error.style.display = 'none';
    }

    showError(message) {
        const loading = document.getElementById('cve-modal-loading');
        const content = document.getElementById('cve-modal-content');
        const error = document.getElementById('cve-modal-error');
        const errorMessage = document.getElementById('cve-error-message');

        if (loading) loading.style.display = 'none';
        if (content) content.style.display = 'none';
        if (error) error.style.display = 'block';
        if (errorMessage) errorMessage.textContent = message;
    }

    showContent() {
        const loading = document.getElementById('cve-modal-loading');
        const content = document.getElementById('cve-modal-content');
        const error = document.getElementById('cve-modal-error');

        if (loading) loading.style.display = 'none';
        if (content) content.style.display = 'block';
        if (error) error.style.display = 'none';
    }

    async loadCVEData(cveId) {
        try {
            const response = await fetch(`${this.app.getApiBasePath()}/cve/${cveId}/description`);
            const data = await response.json();

            if (data.success) {
                this.displayCVEData(data.cve);
            } else {
                this.showError(data.error || 'Ошибка загрузки данных CVE');
            }
        } catch (error) {
            console.error('Error loading CVE data:', error);
            this.showError('Ошибка загрузки данных CVE');
        }
    }

    displayCVEData(cve) {
        // Заполняем данные CVE
        const cveIdElement = document.getElementById('cve-id');
        const descriptionElement = document.getElementById('cve-description-text');
        const cvssV3Element = document.getElementById('cvss-v3-info');
        const cvssV2Element = document.getElementById('cvss-v2-info');
        const publishedDateElement = document.getElementById('published-date');
        const modifiedDateElement = document.getElementById('modified-date');

        if (cveIdElement) cveIdElement.textContent = cve.id;
        if (descriptionElement) descriptionElement.textContent = cve.description || 'Описание недоступно';

        // CVSS v3 с дополнительными полями
        if (cvssV3Element) {
            if (cve.cvss_v3_score !== null) {
                const severity = cve.cvss_v3_severity || 'Unknown';
                const attackVector = cve.cvss_v3_attack_vector || 'N/A';
                const privilegesRequired = cve.cvss_v3_privileges_required || 'N/A';
                const userInteraction = cve.cvss_v3_user_interaction || 'N/A';
                const confidentialityImpact = cve.cvss_v3_confidentiality_impact || 'N/A';
                const integrityImpact = cve.cvss_v3_integrity_impact || 'N/A';
                const availabilityImpact = cve.cvss_v3_availability_impact || 'N/A';
                
                cvssV3Element.innerHTML = `
                    <strong>CVSS v3:</strong> ${cve.cvss_v3_score} (${severity})<br>
                    <small>
                        <strong>Attack Vector:</strong> ${attackVector}<br>
                        <strong>Privileges Required:</strong> ${privilegesRequired}<br>
                        <strong>User Interaction:</strong> ${userInteraction}<br>
                        <strong>Confidentiality Impact:</strong> ${confidentialityImpact}<br>
                        <strong>Integrity Impact:</strong> ${integrityImpact}<br>
                        <strong>Availability Impact:</strong> ${availabilityImpact}
                    </small>
                `;
            } else {
                cvssV3Element.innerHTML = '<strong>CVSS v3:</strong> N/A';
            }
        }

        // CVSS v2 с дополнительными полями
        if (cvssV2Element) {
            if (cve.cvss_v2_score !== null) {
                const severity = cve.cvss_v2_severity || 'Unknown';
                const accessVector = cve.cvss_v2_access_vector || 'N/A';
                const accessComplexity = cve.cvss_v2_access_complexity || 'N/A';
                const authentication = cve.cvss_v2_authentication || 'N/A';
                const confidentialityImpact = cve.cvss_v2_confidentiality_impact || 'N/A';
                const integrityImpact = cve.cvss_v2_integrity_impact || 'N/A';
                const availabilityImpact = cve.cvss_v2_availability_impact || 'N/A';
                
                cvssV2Element.innerHTML = `
                    <strong>CVSS v2:</strong> ${cve.cvss_v2_score} (${severity})<br>
                    <small>
                        <strong>Access Vector:</strong> ${accessVector}<br>
                        <strong>Access Complexity:</strong> ${accessComplexity}<br>
                        <strong>Authentication:</strong> ${authentication}<br>
                        <strong>Confidentiality Impact:</strong> ${confidentialityImpact}<br>
                        <strong>Integrity Impact:</strong> ${integrityImpact}<br>
                        <strong>Availability Impact:</strong> ${availabilityImpact}
                    </small>
                `;
            } else {
                cvssV2Element.innerHTML = '<strong>CVSS v2:</strong> N/A';
            }
        }

        // Даты
        if (publishedDateElement) {
            if (cve.published_date) {
                const date = new Date(cve.published_date).toLocaleDateString('ru-RU');
                publishedDateElement.innerHTML = `<i class="fas fa-calendar-plus"></i> Опубликовано: ${date}`;
            } else {
                publishedDateElement.innerHTML = '<i class="fas fa-calendar-plus"></i> Опубликовано: N/A';
            }
        }

        if (modifiedDateElement) {
            if (cve.last_modified_date) {
                const date = new Date(cve.last_modified_date).toLocaleDateString('ru-RU');
                modifiedDateElement.innerHTML = `<i class="fas fa-calendar-check"></i> Изменено: ${date}`;
            } else {
                modifiedDateElement.innerHTML = '<i class="fas fa-calendar-check"></i> Изменено: N/A';
            }
        }

        this.showContent();
    }

    // Метод для создания кликабельной ссылки CVE
    createCVELink(cveId) {
        console.log('CVEModalModule.createCVELink вызван для:', cveId);
        return `<span class="cve-link" onclick="window.vulnAnalizer.cveModal.show('${cveId}')">${cveId}</span>`;
    }
}

// Экспорт для использования в других модулях
if (typeof module !== 'undefined' && module.exports) {
    module.exports = CVEModalModule;
} else {
    window.CVEModalModule = CVEModalModule;
}
