/**
 * ExploitDBService - Сервис для работы с ExploitDB
 * v=7.1
 */
class ExploitDBService {
    constructor(app) {
        this.app = app;
        this.api = app.api;
        this.storage = app.storage;
        this.eventManager = app.eventManager;
    }

    // Обновление статуса ExploitDB
    async updateExploitDBStatus() {
        try {
            const resp = await fetch(this.app.getApiBasePath() + '/exploitdb/status');
            const data = await resp.json();
            
            const statusDiv = this.app.getElementSafe('exploitdb-status');
            if (statusDiv) {
                if (data && data.count !== undefined) {
                    statusDiv.innerHTML = `
                        <div class="status-success">
                            <i class="fas fa-check-circle"></i>
                            <span class="status-message">ExploitDB в базе: ${data.count}</span>
                        </div>
                    `;
                } else {
                    statusDiv.innerHTML = '<span style="color:var(--error-color)">Ошибка получения статуса ExploitDB</span>';
                }
            }
        } catch (err) {
            this.app.handleError(err, 'обновления статуса ExploitDB');
        }
    }

    // Загрузка ExploitDB
    async uploadExploitDB(file) {
        try {
            if (!file) {
                this.app.showNotification('Выберите файл для загрузки', 'warning');
                return;
            }

            // Показываем прогресс
            this.app.showOperationProgress('exploitdb', 'Загрузка ExploitDB...');

            // Задержки для UI
            await this.app.delay(VulnAnalizer.DELAYS.MEDIUM);
            await this.app.delay(VulnAnalizer.DELAYS.LONG);

            const data = await this.api.uploadFile('/exploitdb/upload', file);
            
            if (data && data.success) {
                this.app.showNotification(`Загружено записей: ${data.count}`, 'success');
                this.updateExploitDBStatus();
                
                // Эмитируем событие
                if (this.eventManager) {
                    this.eventManager.emitDataUpdate({ type: 'exploitdb_upload', count: data.count });
                }
            } else {
                this.app.showOperationError('exploitdb', 'Ошибка загрузки ExploitDB', data.detail || 'Неизвестная ошибка');
                this.app.showNotification('Ошибка загрузки ExploitDB', 'error');
            }

            return data;
        } catch (err) {
            this.app.showOperationError('exploitdb', 'Ошибка загрузки ExploitDB', err.message);
            this.app.showNotification('Ошибка загрузки ExploitDB', 'error');
            throw err;
        }
    }

    // Настройка ExploitDB
    setupExploitDB() {
        const exploitdbForm = this.app.getElementSafe('exploitdb-upload-form');
        if (!exploitdbForm) return;

        exploitdbForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const fileInput = exploitdbForm.querySelector('input[type="file"]');
            const file = fileInput.files[0];
            
            if (file) {
                await this.uploadExploitDB(file);
            }
        });
    }

    // Очистка данных ExploitDB
    async clearExploitDBData() {
        try {
            const data = await this.api.post('/exploitdb/clear');
            
            if (data && data.success) {
                this.app.showNotification('Данные ExploitDB очищены', 'success');
                this.updateExploitDBStatus();
            } else {
                this.app.showNotification(`Ошибка очистки: ${data.error}`, 'error');
            }
        } catch (error) {
            this.app.handleError(error, 'очистки данных ExploitDB');
            throw error;
        }
    }
}

// Экспорт для использования в других модулях
if (typeof module !== 'undefined' && module.exports) {
    module.exports = ExploitDBService;
} else {
    window.ExploitDBService = ExploitDBService;
}
