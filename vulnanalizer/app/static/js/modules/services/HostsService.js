/**
 * HostsService - –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ö–æ—Å—Ç–∞–º–∏
 * v=7.1
 */
class HostsService {
    constructor(app) {
        this.app = app;
        this.api = app.api;
        this.storage = app.storage;
        this.eventManager = app.eventManager;
    }

    // –ü–æ–∏—Å–∫ —Ö–æ—Å—Ç–æ–≤
    async searchHosts(page = 1, filters = {}) {
        try {
            const params = {
                page,
                limit: this.app.paginationState.limit,
                ...filters
            };

            const data = await this.api.get('/hosts/search', params);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            this.app.paginationState = {
                currentPage: data.page || page,
                totalPages: data.total_pages || 1,
                totalCount: data.total_count || 0,
                limit: this.app.paginationState.limit
            };

            // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            if (this.eventManager) {
                this.eventManager.emitDataUpdate({ hosts: data.hosts, pagination: this.app.paginationState });
            }

            return data;
        } catch (error) {
            this.app.handleError(error, '–ø–æ–∏—Å–∫–∞ —Ö–æ—Å—Ç–æ–≤');
            throw error;
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ö–æ—Å—Ç–æ–≤
    async updateHostsStatus() {
        try {
            const data = await this.api.get('/hosts/status');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å—Ç–∞—Ç—É—Å–∞
            this.updateHostsStatusUI(data);
            
            return data;
        } catch (error) {
            this.app.handleError(error, '–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ö–æ—Å—Ç–æ–≤');
            throw error;
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Å—Ç–∞—Ç—É—Å–∞ —Ö–æ—Å—Ç–æ–≤
    updateHostsStatusUI(data) {
        const statusDiv = this.app.getElementSafe('hosts-status');
        if (!statusDiv) return;

        if (data && data.count !== undefined) {
            statusDiv.innerHTML = `
                <div class="status-success">
                    <i class="fas fa-check-circle"></i>
                    <span class="status-message">–•–æ—Å—Ç–æ–≤ –≤ –±–∞–∑–µ: ${data.count}</span>
                </div>
            `;
        } else {
            statusDiv.innerHTML = '<span style="color:var(--error-color)">–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ö–æ—Å—Ç–æ–≤</span>';
        }
    }

    // –ò–º–ø–æ—Ä—Ç —Ö–æ—Å—Ç–æ–≤
    async importHosts(file, onProgress = null) {
        try {
            if (!file) {
                this.app.showNotification('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏', 'warning');
                return;
            }

            const data = await this.api.uploadFile('/hosts/upload', file, onProgress);
            
            if (data && data.success) {
                this.app.showNotification(`–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: ${data.processed_records || 0} –∑–∞–ø–∏—Å–µ–π`, 'success');
                this.updateHostsStatus();
                
                // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–º–ø–æ—Ä—Ç–∞
                if (this.eventManager) {
                    this.eventManager.emitDataUpdate({ type: 'import', records: data.processed_records });
                }
            } else {
                this.app.showNotification('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ' + (data.detail || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'), 'error');
            }

            return data;
        } catch (error) {
            this.app.handleError(error, '–∏–º–ø–æ—Ä—Ç–∞ —Ö–æ—Å—Ç–æ–≤');
            throw error;
        }
    }

    // –≠–∫—Å–ø–æ—Ä—Ç —Ö–æ—Å—Ç–æ–≤
    async exportHosts(filters = {}) {
        try {
            const params = new URLSearchParams();
            Object.keys(filters).forEach(key => {
                if (filters[key] !== null && filters[key] !== undefined) {
                    params.append(key, filters[key]);
                }
            });

            const response = await fetch(`${this.api.getApiBasePath()}/hosts/export?${params.toString()}`);
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `hosts_export_${new Date().toISOString().split('T')[0]}.csv`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);

            this.app.showNotification('–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω', 'success');
        } catch (error) {
            this.app.handleError(error, '—ç–∫—Å–ø–æ—Ä—Ç–∞ —Ö–æ—Å—Ç–æ–≤');
            throw error;
        }
    }

    // –†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞ —Ö–æ—Å—Ç–∞
    async calculateHostRisk(hostId) {
        try {
            const response = await this.api.get(`/hosts/${hostId}/risk`);
            
            if (response && response.risk_score !== undefined) {
                return response;
            } else {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞');
            }
        } catch (error) {
            this.app.handleError(error, '—Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–∞ —Ö–æ—Å—Ç–∞');
            throw error;
        }
    }

    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–º–ø–æ—Ä—Ç–∞
    startImportMonitoring(taskId) {
        const interval = setInterval(async () => {
            try {
                const task = await this.api.get(`/hosts/import-status/${taskId}`);
                
                if (task.status === 'completed' || task.status === 'error') {
                    clearInterval(interval);
                    
                    if (task.status === 'completed') {
                        this.app.showNotification(`–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: ${task.processed_records || 0} –∑–∞–ø–∏—Å–µ–π`, 'success');
                        this.updateHostsStatus();
                    } else {
                        this.app.showNotification(`–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ${task.error_message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`, 'error');
                    }
                    
                    // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                    this.app.delay(3000).then(() => {
                        this.hideImportProgress();
                    });
                }
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–º–ø–æ—Ä—Ç–∞:', err);
            }
        }, 2000);

        return interval;
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–º–ø–æ—Ä—Ç–∞
    showImportProgress() {
        const progressDiv = this.app.getElementSafe('import-progress');
        if (progressDiv) {
            progressDiv.style.display = 'block';
        }
    }

    // –°–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–º–ø–æ—Ä—Ç–∞
    hideImportProgress() {
        const progressDiv = this.app.getElementSafe('import-progress');
        if (progressDiv) {
            progressDiv.style.display = 'none';
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –∏–º–ø–æ—Ä—Ç–∞
    async checkActiveImportTasks() {
        try {
            const response = await this.api.get('/hosts/import-status');
            
            if (response && response.status && response.status !== 'idle' && response.status !== 'completed' && response.status !== 'error' && response.status !== 'cancelled') {
                this.app.showNotification(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –∏–º–ø–æ—Ä—Ç–∞: ${response.current_step}`, 'info');
                this.showImportProgress();
                this.startImportMonitoring(response.task_id);
            }
        } catch (err) {
            console.warn('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –∏–º–ø–æ—Ä—Ç–∞:', err);
        }
    }

    // –û—Ç–º–µ–Ω–∞ –∏–º–ø–æ—Ä—Ç–∞
    async cancelImport() {
        try {
            const data = await this.api.post('/hosts/cancel-import');
            
            if (data && data.success) {
                this.app.showNotification('–ò–º–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω', 'info');
                this.hideImportProgress();
            } else {
                this.app.showNotification(data.message || '–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∏–º–ø–æ—Ä—Ç–∞', 'error');
            }
        } catch (error) {
            this.app.handleError(error, '–æ—Ç–º–µ–Ω—ã –∏–º–ø–æ—Ä—Ç–∞');
            throw error;
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤
    async clearHostsData() {
        try {
            console.log('üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤...');
            const data = await this.api.post('/hosts/clear');
            
            if (data && data.success) {
                const message = data.deleted_count 
                    ? `–£–¥–∞–ª–µ–Ω–æ ${data.deleted_count} –∑–∞–ø–∏—Å–µ–π —Ö–æ—Å—Ç–æ–≤`
                    : '–î–∞–Ω–Ω—ã–µ —Ö–æ—Å—Ç–æ–≤ –æ—á–∏—â–µ–Ω—ã';
                this.app.showNotification(message, 'success');
                console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', data);
                this.updateHostsStatus();
            } else {
                const errorMsg = data?.message || data?.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                this.app.showNotification(`–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: ${errorMsg}`, 'error');
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', data);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ö–æ—Å—Ç–æ–≤:', error);
            this.app.handleError(error, '–æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤');
            throw error;
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = HostsService;
} else {
    window.HostsService = HostsService;
}
