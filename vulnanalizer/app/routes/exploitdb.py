"""
–†–æ—É—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ExploitDB –¥–∞–Ω–Ω—ã–º–∏
"""
import traceback
import csv
import aiohttp
from datetime import datetime
from fastapi import APIRouter, HTTPException, File, UploadFile
from fastapi.responses import StreamingResponse

from database import get_db

router = APIRouter()


def parse_date(date_str):
    """–ü–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
    if not date_str or date_str == '':
        return None
    try:
        return datetime.strptime(date_str, '%Y-%m-%d').date()
    except ValueError:
        return None


@router.post("/api/exploitdb/upload")
async def upload_exploitdb(file: UploadFile = File(...)):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å ExploitDB –¥–∞–Ω–Ω—ã–µ"""
    try:
        content = await file.read()
        decoded_content = content.decode('utf-8-sig')
        
        # –ü–∞—Ä—Å–∏–º CSV
        lines = decoded_content.splitlines()
        reader = csv.DictReader(lines, delimiter=',')
        
        records = []
        for row in reader:
            try:
                cve = row.get('cve', '').strip()
                exploit_id = row.get('exploit_id', '').strip()
                
                if cve and exploit_id:
                    try:
                        exploit_id_value = int(exploit_id)
                        records.append({
                            'cve': cve,
                            'exploit_id': exploit_id_value
                        })
                    except ValueError:
                        print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º Exploit ID: {cve} = {exploit_id}")
                        continue
                        
            except Exception as row_error:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ ExploitDB: {row_error}")
                continue
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db = get_db()
        await db.insert_exploitdb_records(records)
        
        return {
            "success": True,
            "count": len(records),
            "message": f"ExploitDB –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {len(records)} –∑–∞–ø–∏—Å–µ–π"
        }
        
    except Exception as e:
        print(f'‚ùå ExploitDB upload error: {traceback.format_exc()}')
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/api/exploitdb/download")
async def download_exploitdb():
    """–°–∫–∞—á–∞—Ç—å ExploitDB –¥–∞–Ω–Ω—ã–µ —Å –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
    url = "https://gitlab.com/exploit-database/exploitdb/-/raw/main/files_exploits.csv"
    try:
        print("üîÑ Starting ExploitDB download...")
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
        timeout = aiohttp.ClientTimeout(total=300, connect=60)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            print(f"üì• Downloading from {url}")
            async with session.get(url) as resp:
                if resp.status != 200:
                    raise Exception(f"Failed to download: {resp.status}")
                content = await resp.text()
        
        decoded = content.splitlines()
        print(f"üìÑ Downloaded {len(decoded)} lines")
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        header_line = None
        for i, line in enumerate(decoded):
            if line.startswith('id,') or 'id' in line.split(',')[0]:
                header_line = i
                break
        
        if header_line is None:
            raise Exception("Could not find header line with 'id' column")
        
        print(f"üìã Found header at line {header_line}")
        
        # –°–æ–∑–¥–∞–µ–º CSV reader –Ω–∞—á–∏–Ω–∞—è —Å –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        reader = csv.DictReader(decoded[header_line:])
        
        print("üîÑ Processing CSV records...")
        records = []
        skipped_count = 0
        processed_count = 0
        
        for row_num, row in enumerate(reader, start=header_line + 1):
            try:
                records.append({
                    'exploit_id': int(row['id']),
                    'file_path': row.get('file'),
                    'description': row.get('description'),
                    'date_published': parse_date(row.get('date_published')),
                    'author': row.get('author'),
                    'type': row.get('type'),
                    'platform': row.get('platform'),
                    'port': row.get('port') if row.get('port') else None,
                    'date_added': parse_date(row.get('date_added')),
                    'date_updated': parse_date(row.get('date_updated')),
                    'verified': row.get('verified', '0') == '1',
                    'codes': row.get('codes'),
                    'tags': row.get('tags'),
                    'aliases': row.get('aliases'),
                    'screenshot_url': row.get('screenshot_url'),
                    'application_url': row.get('application_url'),
                    'source_url': row.get('source_url')
                })
                processed_count += 1
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10000 –∑–∞–ø–∏—Å–µ–π
                if processed_count % 10000 == 0:
                    print(f"üìä Processed {processed_count} records...")
                    
            except (ValueError, KeyError) as e:
                skipped_count += 1
                print(f"‚ö†Ô∏è Skipping invalid row {row_num}: {e}, row data: {row}")
                continue
        
        print(f"‚úÖ Processed {len(records)} valid records")
        print(f"‚ö†Ô∏è Skipped {skipped_count} invalid records")
        print("üíæ Inserting records into database...")
        
        db = get_db()
        await db.insert_exploitdb_records(records)
        
        print("üéâ ExploitDB download and processing completed successfully")
        return {"success": True, "count": len(records)}
        
    except Exception as e:
        error_msg = f"ExploitDB download error: {str(e)}"
        print(error_msg)
        print('Full traceback:', traceback.format_exc())
        raise HTTPException(status_code=500, detail=error_msg)


@router.get("/api/exploitdb/status")
async def exploitdb_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å ExploitDB –¥–∞–Ω–Ω—ã—Ö"""
    try:
        db = get_db()
        count = await db.count_exploitdb_records()
        return {"success": True, "count": count}
    except Exception as e:
        print('ExploitDB status error:', traceback.format_exc())
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/api/exploitdb/clear")
async def clear_exploitdb():
    """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ ExploitDB –¥–∞–Ω–Ω—ã–µ"""
    try:
        db = get_db()
        await db.clear_exploitdb()
        return {"success": True, "message": "–í—Å–µ ExploitDB –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã"}
    except Exception as e:
        print('ExploitDB clear error:', traceback.format_exc())
        raise HTTPException(status_code=500, detail=str(e))
