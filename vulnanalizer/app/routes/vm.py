"""
–†–æ—É—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å VM MaxPatrol
"""
import traceback
import requests
from fastapi import APIRouter, HTTPException, Request
from database import get_db

router = APIRouter()


async def get_vm_token(host, username, password, client_secret):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è VM MaxPatrol"""
    try:
        url = f'https://{host}:3334/connect/token'
        
        headers = {
            'Content-Type': 'application/x-www-form-urlencoded'
        }
        
        data = {
            'username': username,
            'password': password,
            'client_id': 'mpx',
            'client_secret': client_secret,
            'grant_type': 'password',
            'response_type': 'code id_token',
            'scope': 'offline_access mpx.api'
        }
        
        response = requests.post(url, headers=headers, data=data, verify=False, timeout=30)
        response.raise_for_status()
        
        result = response.json()
        if 'access_token' not in result:
            raise Exception(f"–¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω: {result}")
            
        return result['access_token']
        
    except requests.exceptions.RequestException as e:
        raise Exception(f"–û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {str(e)}")


@router.get("/api/vm/settings")
async def get_vm_settings():
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VM MaxPatrol"""
    try:
        db = get_db()
        settings = await db.get_vm_settings()
        return settings
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")


@router.post("/api/vm/settings")
async def update_vm_settings(request: Request):
    """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VM MaxPatrol"""
    try:
        settings = await request.json()
        db = get_db()
        await db.update_vm_settings(settings)
        return {"success": True, "message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ VM MaxPatrol –æ–±–Ω–æ–≤–ª–µ–Ω—ã"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")


@router.post("/api/vm/test-connection")
async def test_vm_connection(request: Request):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VM MaxPatrol"""
    try:
        settings = await request.json()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        required_fields = ['vm_host', 'vm_username', 'vm_password', 'vm_client_secret']
        for field in required_fields:
            if not settings.get(field):
                raise HTTPException(
                    status_code=400, 
                    detail=f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: {field}"
                )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        token = await get_vm_token(
            settings['vm_host'],
            settings['vm_username'], 
            settings['vm_password'],
            settings['vm_client_secret']
        )
        
        # –î–µ–ª–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        test_url = f"https://{settings['vm_host']}/api/assets_temporal_readmodel/v1/assets_grid"
        headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {token}'
        }
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        test_params = {
            'pdql': 'select(@Host) | limit(1)',
            'includeNestedGroups': False
        }
        
        response = requests.post(test_url, headers=headers, json=test_params, verify=False, timeout=30)
        response.raise_for_status()
        
        return {
            "success": True,
            "message": f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VM MaxPatrol ({settings['vm_host']}) —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        return {
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VM MaxPatrol: {str(e)}"
        }


@router.post("/api/vm/import")
async def import_vm_hosts():
    """–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ö–æ—Å—Ç—ã –∏–∑ VM MaxPatrol"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db = get_db()
        settings = await db.get_vm_settings()
        
        if not settings.get('vm_host') or not settings.get('vm_username'):
            raise HTTPException(status_code=400, detail="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ VM MaxPatrol –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ —É–∂–µ –∑–∞–¥–∞—á–∞ –∏–º–ø–æ—Ä—Ç–∞
        existing_task = await db.get_background_task_by_type('vm_import')
        if existing_task and existing_task['status'] in ['processing', 'running', 'initializing', 'idle']:
            return {"success": False, "message": "–ò–º–ø–æ—Ä—Ç VM –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –∑–∞–ø—É—â–µ–Ω"}
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
        task_id = await db.create_background_task(
            task_type="vm_import",
            parameters={
                "import_type": "vm_maxpatrol"
            },
            description="–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ VM MaxPatrol"
        )
        
        print(f"‚úÖ –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –∏–º–ø–æ—Ä—Ç–∞ VM —Å–æ–∑–¥–∞–Ω–∞: {task_id}")
        
        return {
            "success": True,
            "task_id": task_id,
            "message": "–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ VM MaxPatrol –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        print('VM import error:', traceback.format_exc())
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/api/vm/manual-import")
async def manual_import_vm_hosts(request: Request):
    """–†—É—á–Ω–æ–π –∏–º–ø–æ—Ä—Ç —Ö–æ—Å—Ç–æ–≤ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ VM —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ —É–∂–µ –∑–∞–¥–∞—á–∞ –∏–º–ø–æ—Ä—Ç–∞
        db = get_db()
        existing_task = await db.get_background_task_by_type('vm_manual_import')
        if existing_task and existing_task['status'] in ['processing', 'running', 'initializing', 'idle']:
            return {"success": False, "message": "–†—É—á–Ω–æ–π –∏–º–ø–æ—Ä—Ç VM –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –∑–∞–ø—É—â–µ–Ω"}
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON –∑–∞–ø—Ä–æ—Å–∞
        try:
            body = await request.json()
            criticality_filter = body.get('criticality_filter', '')
            os_filter = body.get('os_filter', '')
            zone_filter = body.get('zone_filter', '')
        except:
            criticality_filter = ''
            os_filter = ''
            zone_filter = ''
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        if criticality_filter:
            print(f"üîç –§–∏–ª—å—Ç—Ä –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞: {criticality_filter}")
        if os_filter:
            print(f"üîç –§–∏–ª—å—Ç—Ä –û–° –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞: {os_filter}")
        if zone_filter:
            print(f"üîç –§–∏–ª—å—Ç—Ä –∑–æ–Ω—ã –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞: {zone_filter}")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        task_parameters = {
            "import_type": "vm_manual_import",
            "criticality_filter": criticality_filter,
            "os_filter": os_filter,
            "zone_filter": zone_filter
        }
        
        task_id = await db.create_background_task(
            task_type="vm_manual_import",
            parameters=task_parameters,
            description="–†—É—á–Ω–æ–π –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ VM MaxPatrol"
        )
        
        print(f"‚úÖ –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Ä—É—á–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ VM —Å–æ–∑–¥–∞–Ω–∞: {task_id}")
        
        return {
            "success": True,
            "task_id": task_id,
            "message": "–†—É—á–Ω–æ–π –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ VM –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        print('VM manual import error:', traceback.format_exc())
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/api/vm/file-status")
async def get_vm_file_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞ VM –≤ –ø–∞–ø–∫–µ vm_imports"""
    try:
        import os
        from pathlib import Path
        from datetime import datetime
        
        vm_data_dir = "/app/data/vm_imports"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if not os.path.exists(vm_data_dir):
            return {
                "success": True,
                "file_exists": False,
                "message": "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è vm_imports –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            }
        
        # –ò—â–µ–º —Ñ–∞–π–ª—ã VM –¥–∞–Ω–Ω—ã—Ö
        vm_files = []
        for filename in os.listdir(vm_data_dir):
            if filename.startswith("vm_data_") and filename.endswith(".json"):
                file_path = os.path.join(vm_data_dir, filename)
                stat = os.stat(file_path)
                vm_files.append({
                    "filename": filename,
                    "file_path": file_path,
                    "file_size": stat.st_size,
                    "file_size_mb": stat.st_size / (1024 * 1024),
                    "created_at": datetime.fromtimestamp(stat.st_ctime).strftime("%Y-%m-%d %H:%M:%S")
                })
        
        if vm_files:
            # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π —Ñ–∞–π–ª
            latest_file = max(vm_files, key=lambda x: x["created_at"])
            return {
                "success": True,
                "file_exists": True,
                "filename": latest_file["filename"],
                "file_size": latest_file["file_size"],
                "file_size_mb": latest_file["file_size_mb"],
                "created_at": latest_file["created_at"]
            }
        else:
            return {
                "success": True,
                "file_exists": False,
                "message": "–§–∞–π–ª—ã VM –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            }
            
    except Exception as e:
        return {
            "success": False,
            "file_exists": False,
            "message": f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}"
        }


@router.get("/api/vm/status")
async def get_vm_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VM MaxPatrol"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db = get_db()
        settings = await db.get_vm_settings()
        
        if not settings.get('vm_host') or not settings.get('vm_username'):
            return {
                "connected": False,
                "message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ VM MaxPatrol –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
            }
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        return {
            "connected": True,
            "message": "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VM MaxPatrol –∞–∫—Ç–∏–≤–Ω–æ"
        }
    except Exception as e:
        return {
            "connected": False,
            "message": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"
        }
