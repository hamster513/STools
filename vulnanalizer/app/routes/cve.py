"""
–†–æ—É—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å CVE –¥–∞–Ω–Ω—ã–º–∏
"""
import traceback
import gzip
import io
import json
import aiohttp
import asyncio
from datetime import datetime
from typing import List, Optional
from fastapi import APIRouter, HTTPException, File, UploadFile, Form, Request
from fastapi.responses import StreamingResponse
from pydantic import BaseModel

from database import get_db

class CVEDownloadRequest(BaseModel):
    years: Optional[List[int]] = None

router = APIRouter(tags=["cve"])


def parse_cve_json(data):
    """–ü–∞—Ä—Å–∏—Ç—å JSON –¥–∞–Ω–Ω—ã–µ CVE (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã 1.1 –∏ 2.0)"""
    records = []
    
    try:
        cve_data = json.loads(data)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç CVE
        if 'CVE_Items' in cve_data:
            # –§–æ—Ä–º–∞—Ç CVE 1.1
            cve_items = cve_data.get('CVE_Items', [])
            format_version = "1.1"
        elif 'vulnerabilities' in cve_data:
            # –§–æ—Ä–º–∞—Ç CVE 2.0
            cve_items = cve_data.get('vulnerabilities', [])
            format_version = "2.0"
        else:
            raise Exception("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç CVE –¥–∞–Ω–Ω—ã—Ö")
        
        print(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º CVE —Ñ–æ—Ä–º–∞—Ç {format_version}, –Ω–∞–π–¥–µ–Ω–æ {len(cve_items)} –∑–∞–ø–∏—Å–µ–π")
        
        for item in cve_items:
            try:
                if format_version == "1.1":
                    # –§–æ—Ä–º–∞—Ç CVE 1.1
                    cve_info = item.get('cve', {})
                    cve_id = cve_info.get('CVE_data_meta', {}).get('ID')
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
                    description = ""
                    description_data = cve_info.get('description', {}).get('description_data', [])
                    for desc in description_data:
                        if desc.get('lang') == 'en':
                            description = desc.get('value', '')
                            break
                else:
                    # –§–æ—Ä–º–∞—Ç CVE 2.0
                    cve_info = item.get('cve', {})
                    cve_id = cve_info.get('id')
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
                    description = ""
                    descriptions = cve_info.get('descriptions', [])
                    for desc in descriptions:
                        if desc.get('lang') == 'en':
                            description = desc.get('value', '')
                            break
                
                if not cve_id:
                    continue
                
                # –ü–∞—Ä—Å–∏–º CVSS –¥–∞–Ω–Ω—ã–µ
                cvss_v3_base_score = None
                cvss_v3_base_severity = None
                cvss_v2_base_score = None
                cvss_v2_base_severity = None
                exploitability_score = None
                impact_score = None
                
                if format_version == "1.1":
                    # –§–æ—Ä–º–∞—Ç CVE 1.1
                    impact = item.get('impact', {})
                    
                    # CVSS v3.1
                    if 'baseMetricV3' in impact:
                        cvss_v3 = impact['baseMetricV3'].get('cvssV3', {})
                        cvss_v3_base_score = cvss_v3.get('baseScore')
                        cvss_v3_base_severity = cvss_v3.get('baseSeverity')
                        exploitability_score = impact['baseMetricV3'].get('exploitabilityScore')
                        impact_score = impact['baseMetricV3'].get('impactScore')
                    
                    # CVSS v3.0 (–µ—Å–ª–∏ v3.1 –Ω–µ—Ç)
                    elif 'cvssV3' in impact:
                        cvss_v3 = impact['cvssV3']
                        cvss_v3_base_score = cvss_v3.get('baseScore')
                        cvss_v3_base_severity = cvss_v3.get('baseSeverity')
                        exploitability_score = impact.get('exploitabilityScore')
                        impact_score = impact.get('impactScore')
                    
                    # CVSS v2
                    if 'baseMetricV2' in impact:
                        cvss_v2 = impact['baseMetricV2'].get('cvssV2', {})
                        cvss_v2_base_score = cvss_v2.get('baseScore')
                        cvss_v2_base_severity = cvss_v2.get('baseSeverity')
                else:
                    # –§–æ—Ä–º–∞—Ç CVE 2.0
                    metrics = cve_info.get('metrics', {})
                    
                    # CVSS v3.1
                    if 'cvssMetricV31' in metrics:
                        cvss_v31 = metrics['cvssMetricV31'][0] if metrics['cvssMetricV31'] else {}
                        cvss_data = cvss_v31.get('cvssData', {})
                        cvss_v3_base_score = cvss_data.get('baseScore')
                        cvss_v3_base_severity = cvss_data.get('baseSeverity')
                        exploitability_score = cvss_v31.get('exploitabilityScore')
                        impact_score = cvss_v31.get('impactScore')
                    
                    # CVSS v2
                    if 'cvssMetricV2' in metrics:
                        cvss_v2_metric = metrics['cvssMetricV2'][0] if metrics['cvssMetricV2'] else {}
                        cvss_v2_data = cvss_v2_metric.get('cvssData', {})
                        cvss_v2_base_score = cvss_v2_data.get('baseScore')
                        cvss_v2_base_severity = cvss_v2_data.get('baseSeverity')
                
                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã
                published_date = None
                last_modified_date = None
                
                if format_version == "1.1":
                    if item.get('publishedDate'):
                        try:
                            # –£–±–∏—Ä–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å PostgreSQL
                            date_str = item['publishedDate'].replace('Z', '').replace('+00:00', '')
                            published_date = datetime.fromisoformat(date_str)
                        except:
                            pass
                    
                    if item.get('lastModifiedDate'):
                        try:
                            # –£–±–∏—Ä–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å PostgreSQL
                            date_str = item['lastModifiedDate'].replace('Z', '').replace('+00:00', '')
                            last_modified_date = datetime.fromisoformat(date_str)
                        except:
                            pass
                else:
                    # –§–æ—Ä–º–∞—Ç CVE 2.0
                    if cve_info.get('published'):
                        try:
                            # –£–±–∏—Ä–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å PostgreSQL
                            date_str = cve_info['published'].replace('Z', '').replace('+00:00', '')
                            published_date = datetime.fromisoformat(date_str)
                        except:
                            pass
                    
                    if cve_info.get('lastModified'):
                        try:
                            # –£–±–∏—Ä–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å PostgreSQL
                            date_str = cve_info['lastModified'].replace('Z', '').replace('+00:00', '')
                            last_modified_date = datetime.fromisoformat(date_str)
                        except:
                            pass
                
                records.append({
                    'cve_id': cve_id,
                    'description': description,
                    'cvss_v3_base_score': cvss_v3_base_score,
                    'cvss_v3_base_severity': cvss_v3_base_severity,
                    'cvss_v2_base_score': cvss_v2_base_score,
                    'cvss_v2_base_severity': cvss_v2_base_severity,
                    'exploitability_score': exploitability_score,
                    'impact_score': impact_score,
                    'published_date': published_date,
                    'last_modified_date': last_modified_date
                })
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ CVE –∑–∞–ø–∏—Å–∏: {e}")
                continue
        
        return records
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON CVE: {e}")
        raise


@router.post("/api/cve/upload")
async def upload_cve(request: Request):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å CVE –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        # –ß–∏—Ç–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        body = await request.body()
        
        if len(body) == 0:
            raise HTTPException(status_code=422, detail="–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –ø—É—Å—Ç–æ–µ")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –≤ multipart –¥–∞–Ω–Ω—ã—Ö
        content_type = request.headers.get('content-type', '')
        if 'multipart/form-data' in content_type:
            # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ multipart
            boundary = content_type.split('boundary=')[1] if 'boundary=' in content_type else None
            if boundary:
                # –ò—â–µ–º —Ñ–∞–π–ª –≤ multipart –¥–∞–Ω–Ω—ã—Ö
                parts = body.split(f'--{boundary}'.encode())
                
                for part in parts:
                    if b'Content-Disposition: form-data' in part and b'filename=' in part:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                        lines = part.split(b'\r\n')
                        filename = None
                        for line in lines:
                            if b'filename=' in line:
                                filename = line.decode('utf-8', errors='ignore').split('filename="')[1].split('"')[0]
                                break
                        
                        if filename:
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ (–ø–æ—Å–ª–µ –¥–≤–æ–π–Ω–æ–≥–æ \r\n)
                            content_start = part.find(b'\r\n\r\n')
                            if content_start != -1:
                                file_content = part[content_start + 4:]
                                # –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π \r\n –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –Ω–æ –Ω–µ –≤—Å–µ
                                if file_content.endswith(b'\r\n'):
                                    file_content = file_content[:-2]
                                
                                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
                                if filename.endswith('.gz'):
                                    try:
                                        with gzip.GzipFile(fileobj=io.BytesIO(file_content)) as gz:
                                            content = gz.read()
                                    except Exception as gz_error:
                                        raise HTTPException(status_code=422, detail=f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ gzip –∞—Ä—Ö–∏–≤–∞: {gz_error}")
                                else:
                                    content = file_content
                                
                                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                                if isinstance(content, bytes):
                                    try:
                                        content = content.decode('utf-8')
                                    except UnicodeDecodeError as decode_error:
                                        raise HTTPException(status_code=422, detail=f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {decode_error}")
                                
                                # –ü–∞—Ä—Å–∏–º JSON
                                try:
                                    records = parse_cve_json(content)
                                except Exception as parse_error:
                                    raise HTTPException(status_code=422, detail=f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {parse_error}")
                                
                                if not records:
                                    raise HTTPException(status_code=422, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å CVE –∑–∞–ø–∏—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞")
                                
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                                try:
                                    db = get_db()
                                    await db.insert_cve_records(records)
                                except Exception as db_error:
                                    raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {db_error}")
                                
                                return {
                                    "success": True,
                                    "count": len(records),
                                    "message": f"CVE –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {len(records)} –∑–∞–ø–∏—Å–µ–π"
                                }
        else:
            raise HTTPException(status_code=422, detail=f"–û–∂–∏–¥–∞–µ—Ç—Å—è multipart/form-data, –ø–æ–ª—É—á–µ–Ω: {content_type}")
        
        raise HTTPException(status_code=422, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–ø—Ä–æ—Å–µ")
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/api/cve/download")
async def download_cve(request: CVEDownloadRequest):
    """–°–∫–∞—á–∞—Ç—å CVE –¥–∞–Ω–Ω—ã–µ —Å –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ª–µ—Ç"""
    try:
        from services.cve_worker import cve_worker
        
        years = request.years
        
        # –ï—Å–ª–∏ –≥–æ–¥—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ª–µ—Ç
        if not years:
            current_year = datetime.now().year
            years = list(range(current_year - 4, current_year + 1))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∑–∫–∞
        if cve_worker.is_downloading():
            raise HTTPException(status_code=400, detail="–ó–∞–≥—Ä—É–∑–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        db = get_db()
        task_id = await db.create_background_task(
            task_type='cve_download',
            parameters={'years': years},
            description=f'–°–∫–∞—á–∏–≤–∞–Ω–∏–µ CVE –¥–∞–Ω–Ω—ã—Ö —Å NVD –¥–ª—è –ª–µ—Ç: {years}'
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º worker –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        asyncio.create_task(cve_worker.start_download(years, task_id))
        
        return {
            "success": True, 
            "task_id": task_id,
            "message": f"–ó–∞–≥—Ä—É–∑–∫–∞ CVE –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è {len(years)} –ª–µ—Ç",
            "years": years
        }
        
    except Exception as e:
        error_msg = f"CVE download error: {str(e)}"
        print(error_msg)
        print('Full traceback:', traceback.format_exc())
        raise HTTPException(status_code=500, detail=error_msg)


@router.get("/api/cve/status")
async def cve_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å CVE –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from services.cve_worker import cve_worker
        
        db = get_db()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ CVE –∑–∞–ø–∏—Å–µ–π
        try:
            count = await db.count_cve_records()
        except Exception as count_error:
            print(f'CVE count error: {count_error}')
            count = 0
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏
        try:
            is_downloading = cve_worker.is_downloading()
            current_task_id = cve_worker.get_current_task_id()
        except Exception as worker_error:
            print(f'CVE worker error: {worker_error}')
            is_downloading = False
            current_task_id = None
        
        # –ï—Å–ª–∏ –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞, –ø–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏
        task_details = None
        if current_task_id:
            try:
                task_details = await db.get_background_task(current_task_id)
            except Exception as task_error:
                print(f'CVE task details error: {task_error}')
                task_details = None
        
        return {
            "success": True, 
            "count": count,
            "is_downloading": is_downloading,
            "current_task_id": current_task_id,
            "task_details": task_details
        }
    except Exception as e:
        print('CVE status error:', traceback.format_exc())
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/api/cve/clear")
async def clear_cve():
    """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ CVE –¥–∞–Ω–Ω—ã–µ"""
    try:
        db = get_db()
        await db.clear_cve()
        return {"success": True, "message": "–í—Å–µ CVE –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã"}
    except Exception as e:
        print('CVE clear error:', traceback.format_exc())
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/api/cve/download-recent")
async def download_cve_recent():
    """–°–∫–∞—á–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ CVE –¥–∞–Ω–Ω—ã–µ (recent)"""
    try:
        print("üîÑ Starting CVE recent download...")
        
        url = "https://nvd.nist.gov/feeds/json/cve/2.0/nvdcve-2.0-recent.json.gz"
        print(f"üì• Downloading from {url}")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        db = get_db()
        task_id = await db.create_background_task(
            task_type='cve_download_recent',
            parameters={'url': url},
            description='–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö CVE –¥–∞–Ω–Ω—ã—Ö —Å NVD'
        )
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
        timeout = aiohttp.ClientTimeout(total=600, connect=60)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(url) as resp:
                if resp.status != 200:
                    error_msg = f"Failed to download recent CVE: {resp.status}"
                    await db.update_background_task(task_id, status='error', error_message=error_msg)
                    raise HTTPException(status_code=500, detail=error_msg)
                
                print(f"üì¶ Reading compressed content...")
                gz_content = await resp.read()
                print(f"üìä Downloaded {len(gz_content)} bytes")
        
        print(f"üîì Decompressing content...")
        with gzip.GzipFile(fileobj=io.BytesIO(gz_content)) as gz:
            content = gz.read().decode('utf-8')
        
        print(f"üìÑ Decompressed {len(content)} characters")
        
        # –ü–∞—Ä—Å–∏–º JSON
        print(f"üìÑ –ü–∞—Ä—Å–∏–Ω–≥ JSON —Ñ–∞–π–ª–∞...")
        records = parse_cve_json(content)
        print(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(records)} –∑–∞–ø–∏—Å–µ–π CVE –∏–∑ JSON")
        
        if records:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(records)} –∑–∞–ø–∏—Å–µ–π CVE")
            print(f"üì• –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
            await db.insert_cve_records(records)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(records)} –∑–∞–ø–∏—Å–µ–π CVE")
        else:
            print(f"‚ö†Ô∏è No CVE records found")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        await db.update_background_task(
            task_id, 
            status='completed',
            current_step='–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
            total_records=len(records) if records else 0,
            updated_records=len(records) if records else 0
        )
        
        print("üéâ CVE recent download and processing completed successfully")
        return {"success": True, "count": len(records) if records else 0}
        
    except Exception as e:
        error_msg = f"CVE recent download error: {str(e)}"
        print(error_msg)
        print('Full traceback:', traceback.format_exc())
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ —Å –æ—à–∏–±–∫–æ–π
        if 'task_id' in locals():
            await db.update_background_task(task_id, status='error', error_message=error_msg)
        
        raise HTTPException(status_code=500, detail=error_msg)


@router.post("/api/cve/download-modified")
async def download_cve_modified():
    """–°–∫–∞—á–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ CVE –¥–∞–Ω–Ω—ã–µ (modified)"""
    try:
        print("üîÑ Starting CVE modified download...")
        
        url = "https://nvd.nist.gov/feeds/json/cve/2.0/nvdcve-2.0-modified.json.gz"
        print(f"üì• Downloading from {url}")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        db = get_db()
        task_id = await db.create_background_task(
            task_type='cve_download_modified',
            parameters={'url': url},
            description='–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö CVE –¥–∞–Ω–Ω—ã—Ö —Å NVD'
        )
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
        timeout = aiohttp.ClientTimeout(total=600, connect=60)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(url) as resp:
                if resp.status != 200:
                    error_msg = f"Failed to download modified CVE: {resp.status}"
                    await db.update_background_task(task_id, status='error', error_message=error_msg)
                    raise HTTPException(status_code=500, detail=error_msg)
                
                print(f"üì¶ Reading compressed content...")
                gz_content = await resp.read()
                print(f"üìä Downloaded {len(gz_content)} bytes")
        
        print(f"üîì Decompressing content...")
        with gzip.GzipFile(fileobj=io.BytesIO(gz_content)) as gz:
            content = gz.read().decode('utf-8')
        
        print(f"üìÑ Decompressed {len(content)} characters")
        
        # –ü–∞—Ä—Å–∏–º JSON
        print(f"üìÑ –ü–∞—Ä—Å–∏–Ω–≥ JSON —Ñ–∞–π–ª–∞...")
        records = parse_cve_json(content)
        print(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(records)} –∑–∞–ø–∏—Å–µ–π CVE –∏–∑ JSON")
        
        if records:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(records)} –∑–∞–ø–∏—Å–µ–π CVE")
            print(f"üì• –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
            await db.insert_cve_records(records)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(records)} –∑–∞–ø–∏—Å–µ–π CVE")
        else:
            print(f"‚ö†Ô∏è No CVE records found")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        await db.update_background_task(
            task_id, 
            status='completed',
            current_step='–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
            total_records=len(records) if records else 0,
            updated_records=len(records) if records else 0
        )
        
        print("üéâ CVE modified download and processing completed successfully")
        return {"success": True, "count": len(records) if records else 0}
        
    except Exception as e:
        error_msg = f"CVE modified download error: {str(e)}"
        print(error_msg)
        print('Full traceback:', traceback.format_exc())
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ —Å –æ—à–∏–±–∫–æ–π
        if 'task_id' in locals():
            await db.update_background_task(task_id, status='error', error_message=error_msg)
        
        raise HTTPException(status_code=500, detail=error_msg)


@router.post("/api/cve/cancel")
async def cancel_cve_download():
    """–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –∑–∞–≥—Ä—É–∑–∫—É CVE"""
    try:
        from services.cve_worker import cve_worker
        
        if cve_worker.is_downloading():
            cancelled = await cve_worker.cancel_download()
            if cancelled:
                return {"success": True, "message": "–ó–∞–≥—Ä—É–∑–∫–∞ CVE –æ—Ç–º–µ–Ω–µ–Ω–∞"}
            else:
                return {"success": False, "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É"}
        else:
            return {"success": False, "message": "–ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CVE –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
            
    except Exception as e:
        print('CVE cancel error:', traceback.format_exc())
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/api/cve/download-urls")
async def get_cve_download_urls():
    """–ü–æ–ª—É—á–∏—Ç—å URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è CVE –¥–∞–Ω–Ω—ã—Ö"""
    try:
        current_year = datetime.now().year
        urls = []
        
        # URL –¥–ª—è –≤—Å–µ—Ö –ª–µ—Ç —Å 2002 (–∫–æ–≥–¥–∞ –Ω–∞—á–∞–ª–∏—Å—å CVE) –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞ + 1
        for year in range(2002, current_year + 2):
            urls.append({
                "year": year,
                "url": f"https://nvd.nist.gov/feeds/json/cve/2.0/nvdcve-2.0-{year}.json.gz",
                "filename": f"nvdcve-2.0-{year}.json.gz"
            })
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–∫–∂–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ recent –∏ modified —Ñ–∞–π–ª—ã
        urls.extend([
            {
                "year": "recent",
                "url": "https://nvd.nist.gov/feeds/json/cve/2.0/nvdcve-2.0-recent.json.gz",
                "filename": "nvdcve-2.0-recent.json.gz"
            },
            {
                "year": "modified", 
                "url": "https://nvd.nist.gov/feeds/json/cve/2.0/nvdcve-2.0-modified.json.gz",
                "filename": "nvdcve-2.0-modified.json.gz"
            }
        ])
        
        return {"success": True, "urls": urls}
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è CVE: {e}")
        return {"success": False, "error": str(e)}


@router.get("/api/cve/preview")
async def get_cve_preview():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–µ 20 –∑–∞–ø–∏—Å–µ–π CVE –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    try:
        db = get_db()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 –∑–∞–ø–∏—Å–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        query = """
            SELECT cve_id, description, cvss_v3_base_score, cvss_v3_base_severity,
                   cvss_v3_attack_vector, cvss_v3_privileges_required, cvss_v3_user_interaction,
                   cvss_v3_confidentiality_impact, cvss_v3_integrity_impact, cvss_v3_availability_impact,
                   cvss_v2_base_score, cvss_v2_base_severity, cvss_v2_access_vector,
                   cvss_v2_access_complexity, cvss_v2_authentication, cvss_v2_confidentiality_impact,
                   cvss_v2_integrity_impact, cvss_v2_availability_impact, published_date, last_modified_date,
                   created_at
            FROM vulnanalizer.cve 
            ORDER BY created_at DESC 
            LIMIT 20
        """
        
        conn = await db.get_connection()
        try:
            results = await conn.fetch(query)
        finally:
            await db.release_connection(conn)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        records = []
        for row in results:
            records.append({
                "cve_id": row['cve_id'],
                "description": row['description'],
                "cvss_v3_score": row['cvss_v3_base_score'],
                "cvss_v3_severity": row['cvss_v3_base_severity'],
                "cvss_v3_attack_vector": row['cvss_v3_attack_vector'],
                "cvss_v3_privileges_required": row['cvss_v3_privileges_required'],
                "cvss_v3_user_interaction": row['cvss_v3_user_interaction'],
                "cvss_v3_confidentiality_impact": row['cvss_v3_confidentiality_impact'],
                "cvss_v3_integrity_impact": row['cvss_v3_integrity_impact'],
                "cvss_v3_availability_impact": row['cvss_v3_availability_impact'],
                "cvss_v2_score": row['cvss_v2_base_score'],
                "cvss_v2_severity": row['cvss_v2_base_severity'],
                "cvss_v2_access_vector": row['cvss_v2_access_vector'],
                "cvss_v2_access_complexity": row['cvss_v2_access_complexity'],
                "cvss_v2_authentication": row['cvss_v2_authentication'],
                "cvss_v2_confidentiality_impact": row['cvss_v2_confidentiality_impact'],
                "cvss_v2_integrity_impact": row['cvss_v2_integrity_impact'],
                "cvss_v2_availability_impact": row['cvss_v2_availability_impact'],
                "published_date": row['published_date'].isoformat() if row['published_date'] else None,
                "last_modified_date": row['last_modified_date'].isoformat() if row['last_modified_date'] else None,
                "created_at": row['created_at'].isoformat() if row['created_at'] else None
            })
        
        return {
            "success": True,
            "records": records,
            "count": len(records)
        }
    except Exception as e:
        print(f"Error getting CVE preview: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/api/cve/{cve_id}/description")
async def get_cve_description(cve_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ CVE –ø–æ ID"""
    try:
        db = get_db()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ CVE —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        cve_data = await db.get_cve_by_id(cve_id)
        
        if not cve_data:
            return {"success": False, "error": "CVE –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        
        return {
            "success": True,
            "cve": {
                "id": cve_data['cve_id'],
                "description": cve_data['description'],
                "cvss_v3_score": cve_data['cvss_v3_base_score'],
                "cvss_v3_severity": cve_data['cvss_v3_base_severity'],
                "cvss_v3_attack_vector": cve_data['cvss_v3_attack_vector'],
                "cvss_v3_privileges_required": cve_data['cvss_v3_privileges_required'],
                "cvss_v3_user_interaction": cve_data['cvss_v3_user_interaction'],
                "cvss_v3_confidentiality_impact": cve_data['cvss_v3_confidentiality_impact'],
                "cvss_v3_integrity_impact": cve_data['cvss_v3_integrity_impact'],
                "cvss_v3_availability_impact": cve_data['cvss_v3_availability_impact'],
                "cvss_v2_score": cve_data['cvss_v2_base_score'],
                "cvss_v2_severity": cve_data['cvss_v2_base_severity'],
                "cvss_v2_access_vector": cve_data['cvss_v2_access_vector'],
                "cvss_v2_access_complexity": cve_data['cvss_v2_access_complexity'],
                "cvss_v2_authentication": cve_data['cvss_v2_authentication'],
                "cvss_v2_confidentiality_impact": cve_data['cvss_v2_confidentiality_impact'],
                "cvss_v2_integrity_impact": cve_data['cvss_v2_integrity_impact'],
                "cvss_v2_availability_impact": cve_data['cvss_v2_availability_impact'],
                "exploitability_score": cve_data['exploitability_score'],
                "impact_score": cve_data['impact_score'],
                "published_date": cve_data['published_date'],
                "last_modified_date": cve_data['last_modified_date']
            }
        }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è CVE {cve_id}: {e}")
        return {"success": False, "error": str(e)}


@router.get("/api/cve/test")
async def test_cve():
    """
    –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã CVE —Ä–æ—É—Ç–µ—Ä–∞
    """
    return {"success": True, "message": "CVE router is working"}

@router.get("/api/cve/search/{cve_id}")
async def search_cve(cve_id: str):
    """
    –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ CVE —Å —Ä–∞—Å—á–µ—Ç–æ–º —Ä–∏—Å–∫–∞
    """
    try:
        db = get_db()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ CVE
        cve_data = await db.cve.get_cve_by_id(cve_id)
        if not cve_data:
            return {
                "success": False,
                "error": f"CVE {cve_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
            }
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ EPSS
        epss_data = await db.epss.get_epss_by_cve(cve_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ ExploitDB
        exploitdb_data = await db.exploitdb.get_exploitdb_by_cve(cve_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ Metasploit
        metasploit_data = await db.metasploit.get_metasploit_by_cve(cve_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–∞
        from database.settings_repository import SettingsRepository
        settings_repo = SettingsRepository()
        settings = await settings_repo.get_settings()
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ CVE –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–∞ (–∫–∞–∫ –≤ risk_service.py)
        cve_calculation_data = {
            'cve_id': cve_id,
            'cvss_v3_attack_vector': cve_data.get('cvss_v3_attack_vector'),
            'cvss_v3_privileges_required': cve_data.get('cvss_v3_privileges_required'),
            'cvss_v3_user_interaction': cve_data.get('cvss_v3_user_interaction'),
            'cvss_v2_access_vector': cve_data.get('cvss_v2_access_vector'),
            'cvss_v2_access_complexity': cve_data.get('cvss_v2_access_complexity'),
            'cvss_v2_authentication': cve_data.get('cvss_v2_authentication')
        }
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —ç–∫—Å–ø–ª–æ–π—Ç–∞ –∏–∑ ExploitDB (–∫–∞–∫ –≤ risk_service.py)
        if exploitdb_data and isinstance(exploitdb_data, list) and len(exploitdb_data) > 0:
            cve_calculation_data['exploitdb_type'] = exploitdb_data[0].get('type', '').lower()
        else:
            cve_calculation_data['exploitdb_type'] = None
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–Ω–≥ Metasploit (–∫–∞–∫ –≤ risk_service.py)
        if metasploit_data:
            cve_calculation_data['msf_rank'] = metasploit_data.get('rank')
        else:
            cve_calculation_data['msf_rank'] = None
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–∞
        from database.risk_calculation import calculate_risk_score
        
        epss_score = epss_data.get('epss', 0.0) if epss_data else 0.0
        cvss_score = cve_data.get('cvss_v3_base_score') or cve_data.get('cvss_v2_base_score', 0.0)
        
        risk_result = calculate_risk_score(
            epss=float(epss_score),
            cvss=float(cvss_score) if cvss_score else None,
            criticality='Medium',  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è CVE search
            settings=settings,
            cve_data=cve_calculation_data,
            confidential_data=False,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è CVE search
            internet_access=True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è CVE search
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∏—Å–∫–∞
        risk_data = {
            "score": risk_result.get('risk_score', 0),
            "risk_score": risk_result.get('risk_score', 0),  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å JavaScript
            "level": "HIGH" if risk_result.get('risk_score', 0) > 70 else "MEDIUM" if risk_result.get('risk_score', 0) > 30 else "LOW",
            "factors": [],
            "epss": epss_score,
            "cvss_factor": (float(cvss_score) / 10) if cvss_score else 0.0,
            "impact": risk_result.get('impact', 1.0),
            "cve_param": risk_result.get('cve_param', 1.0),
            "exdb_param": risk_result.get('exdb_param', 1.0),
            "msf_param": risk_result.get('msf_param', 1.0)
        }
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Metasploit –¥–∞–Ω–Ω—ã–µ –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å JavaScript
        metasploit_array = []
        if metasploit_data:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ rank –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å JavaScript
            metasploit_item = dict(metasploit_data)
            metasploit_item['rank'] = metasploit_data.get('rank_text', 'unknown')
            metasploit_array = [metasploit_item]
        
        return {
            "success": True,
            "cve": {
                "cve_id": cve_data['cve_id'],
                "description": cve_data['description'],
                "status": "PUBLISHED",  # –ó–∞–≥–ª—É—à–∫–∞
                "published_date": cve_data['published_date'],
                "last_modified_date": cve_data['last_modified_date'],
                "cvss_v3_score": cve_data['cvss_v3_base_score'],
                "cvss_v3_severity": cve_data['cvss_v3_base_severity'],
                "cvss_v2_score": cve_data['cvss_v2_base_score'],
                "cvss_v2_severity": cve_data['cvss_v2_base_severity']
            },
            "epss": epss_data,
            "exploitdb": exploitdb_data,
            "metasploit": metasploit_array,
            "risk": risk_data
        }
        
    except Exception as e:
        print(f"Error searching CVE {cve_id}: {e}")
        return {
            "success": False,
            "error": str(e)
        }
