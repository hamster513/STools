"""
–†–æ—É—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å CVE –¥–∞–Ω–Ω—ã–º–∏
"""
import traceback
import gzip
import io
import json
import aiohttp
from datetime import datetime
from fastapi import APIRouter, HTTPException, File, UploadFile
from fastapi.responses import StreamingResponse

from database import get_db

router = APIRouter()


def parse_cve_json(data):
    """–ü–∞—Ä—Å–∏—Ç—å JSON –¥–∞–Ω–Ω—ã–µ CVE (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã 1.1 –∏ 2.0)"""
    records = []
    
    try:
        cve_data = json.loads(data)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç CVE
        if 'CVE_Items' in cve_data:
            # –§–æ—Ä–º–∞—Ç CVE 1.1
            cve_items = cve_data.get('CVE_Items', [])
            format_version = "1.1"
        elif 'vulnerabilities' in cve_data:
            # –§–æ—Ä–º–∞—Ç CVE 2.0
            cve_items = cve_data.get('vulnerabilities', [])
            format_version = "2.0"
        else:
            raise Exception("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç CVE –¥–∞–Ω–Ω—ã—Ö")
        
        print(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º CVE —Ñ–æ—Ä–º–∞—Ç {format_version}, –Ω–∞–π–¥–µ–Ω–æ {len(cve_items)} –∑–∞–ø–∏—Å–µ–π")
        
        for item in cve_items:
            try:
                if format_version == "1.1":
                    # –§–æ—Ä–º–∞—Ç CVE 1.1
                    cve_info = item.get('cve', {})
                    cve_id = cve_info.get('CVE_data_meta', {}).get('ID')
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
                    description = ""
                    description_data = cve_info.get('description', {}).get('description_data', [])
                    for desc in description_data:
                        if desc.get('lang') == 'en':
                            description = desc.get('value', '')
                            break
                else:
                    # –§–æ—Ä–º–∞—Ç CVE 2.0
                    cve_info = item.get('cve', {})
                    cve_id = cve_info.get('id')
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
                    description = ""
                    descriptions = cve_info.get('descriptions', [])
                    for desc in descriptions:
                        if desc.get('lang') == 'en':
                            description = desc.get('value', '')
                            break
                
                if not cve_id:
                    continue
                
                # –ü–∞—Ä—Å–∏–º CVSS –¥–∞–Ω–Ω—ã–µ
                cvss_v3_base_score = None
                cvss_v3_base_severity = None
                cvss_v2_base_score = None
                cvss_v2_base_severity = None
                exploitability_score = None
                impact_score = None
                
                if format_version == "1.1":
                    # –§–æ—Ä–º–∞—Ç CVE 1.1
                    impact = item.get('impact', {})
                    
                    # CVSS v3.1
                    if 'baseMetricV3' in impact:
                        cvss_v3 = impact['baseMetricV3'].get('cvssV3', {})
                        cvss_v3_base_score = cvss_v3.get('baseScore')
                        cvss_v3_base_severity = cvss_v3.get('baseSeverity')
                        exploitability_score = impact['baseMetricV3'].get('exploitabilityScore')
                        impact_score = impact['baseMetricV3'].get('impactScore')
                    
                    # CVSS v3.0 (–µ—Å–ª–∏ v3.1 –Ω–µ—Ç)
                    elif 'cvssV3' in impact:
                        cvss_v3 = impact['cvssV3']
                        cvss_v3_base_score = cvss_v3.get('baseScore')
                        cvss_v3_base_severity = cvss_v3.get('baseSeverity')
                        exploitability_score = impact.get('exploitabilityScore')
                        impact_score = impact.get('impactScore')
                    
                    # CVSS v2
                    if 'baseMetricV2' in impact:
                        cvss_v2 = impact['baseMetricV2'].get('cvssV2', {})
                        cvss_v2_base_score = cvss_v2.get('baseScore')
                        cvss_v2_base_severity = cvss_v2.get('baseSeverity')
                else:
                    # –§–æ—Ä–º–∞—Ç CVE 2.0
                    metrics = cve_info.get('metrics', {})
                    
                    # CVSS v3.1
                    if 'cvssMetricV31' in metrics:
                        cvss_v31 = metrics['cvssMetricV31'][0] if metrics['cvssMetricV31'] else {}
                        cvss_data = cvss_v31.get('cvssData', {})
                        cvss_v3_base_score = cvss_data.get('baseScore')
                        cvss_v3_base_severity = cvss_data.get('baseSeverity')
                        exploitability_score = cvss_v31.get('exploitabilityScore')
                        impact_score = cvss_v31.get('impactScore')
                    
                    # CVSS v2
                    if 'cvssMetricV2' in metrics:
                        cvss_v2_metric = metrics['cvssMetricV2'][0] if metrics['cvssMetricV2'] else {}
                        cvss_v2_data = cvss_v2_metric.get('cvssData', {})
                        cvss_v2_base_score = cvss_v2_data.get('baseScore')
                        cvss_v2_base_severity = cvss_v2_data.get('baseSeverity')
                
                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã
                published_date = None
                last_modified_date = None
                
                if format_version == "1.1":
                    if item.get('publishedDate'):
                        try:
                            # –£–±–∏—Ä–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å PostgreSQL
                            date_str = item['publishedDate'].replace('Z', '').replace('+00:00', '')
                            published_date = datetime.fromisoformat(date_str)
                        except:
                            pass
                    
                    if item.get('lastModifiedDate'):
                        try:
                            # –£–±–∏—Ä–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å PostgreSQL
                            date_str = item['lastModifiedDate'].replace('Z', '').replace('+00:00', '')
                            last_modified_date = datetime.fromisoformat(date_str)
                        except:
                            pass
                else:
                    # –§–æ—Ä–º–∞—Ç CVE 2.0
                    if cve_info.get('published'):
                        try:
                            # –£–±–∏—Ä–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å PostgreSQL
                            date_str = cve_info['published'].replace('Z', '').replace('+00:00', '')
                            published_date = datetime.fromisoformat(date_str)
                        except:
                            pass
                    
                    if cve_info.get('lastModified'):
                        try:
                            # –£–±–∏—Ä–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å PostgreSQL
                            date_str = cve_info['lastModified'].replace('Z', '').replace('+00:00', '')
                            last_modified_date = datetime.fromisoformat(date_str)
                        except:
                            pass
                
                records.append({
                    'cve_id': cve_id,
                    'description': description,
                    'cvss_v3_base_score': cvss_v3_base_score,
                    'cvss_v3_base_severity': cvss_v3_base_severity,
                    'cvss_v2_base_score': cvss_v2_base_score,
                    'cvss_v2_base_severity': cvss_v2_base_severity,
                    'exploitability_score': exploitability_score,
                    'impact_score': impact_score,
                    'published_date': published_date,
                    'last_modified_date': last_modified_date
                })
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ CVE –∑–∞–ø–∏—Å–∏: {e}")
                continue
        
        return records
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON CVE: {e}")
        raise


@router.post("/api/cve/upload")
async def upload_cve(file: UploadFile = File(...)):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å CVE –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        content = await file.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∞—Ä—Ö–∏–≤–æ–º
        if file.filename.endswith('.gz'):
            print("üì¶ –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º gzip –∞—Ä—Ö–∏–≤...")
            with gzip.GzipFile(fileobj=io.BytesIO(content)) as gz:
                content = gz.read()
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        if isinstance(content, bytes):
            content = content.decode('utf-8')
        
        print(f"üìÑ –ü–∞—Ä—Å–∏–º JSON —Ñ–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º {len(content)} —Å–∏–º–≤–æ–ª–æ–≤...")
        
        # –ü–∞—Ä—Å–∏–º JSON
        records = parse_cve_json(content)
        
        if not records:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å CVE –∑–∞–ø–∏—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞")
        
        print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(records)} CVE –∑–∞–ø–∏—Å–µ–π")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db = get_db()
        await db.insert_cve_records(records)
        
        return {
            "success": True,
            "count": len(records),
            "message": f"CVE –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {len(records)} –∑–∞–ø–∏—Å–µ–π"
        }
        
    except Exception as e:
        print(f'‚ùå CVE upload error: {traceback.format_exc()}')
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/api/cve/download")
async def download_cve():
    """–°–∫–∞—á–∞—Ç—å CVE –¥–∞–Ω–Ω—ã–µ —Å –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
    try:
        print("üîÑ Starting CVE download...")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥–æ–¥—ã (—Å 2002)
        current_year = datetime.now().year
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        db = get_db()
        task_id = await db.create_background_task(
            task_type='cve_download',
            parameters={'years': list(range(2002, current_year + 1))},
            description='–°–∫–∞—á–∏–≤–∞–Ω–∏–µ CVE –¥–∞–Ω–Ω—ã—Ö —Å NVD'
        )
        total_records = 0
        
        for year in range(2002, current_year + 1):
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
                await db.update_background_task(
                    task_id, 
                    current_step=f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ {year} –≥–æ–¥...",
                    processed_items=year - 2002,
                    total_items=current_year - 2001
                )
                
                url = f"https://nvd.nist.gov/feeds/json/cve/2.0/nvdcve-2.0-{year}.json.gz"
                print(f"üì• Downloading from {url}")
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
                timeout = aiohttp.ClientTimeout(total=600, connect=60)
                async with aiohttp.ClientSession(timeout=timeout) as session:
                    async with session.get(url) as resp:
                        if resp.status != 200:
                            print(f"‚ö†Ô∏è Failed to download {year}: {resp.status}")
                            continue
                        
                        print(f"üì¶ Reading compressed content for {year}...")
                        gz_content = await resp.read()
                        print(f"üìä Downloaded {len(gz_content)} bytes for {year}")
                
                print(f"üîì Decompressing content for {year}...")
                with gzip.GzipFile(fileobj=io.BytesIO(gz_content)) as gz:
                    content = gz.read().decode('utf-8')
                
                print(f"üìÑ Decompressed {len(content)} characters for {year}")
                
                # –ü–∞—Ä—Å–∏–º JSON
                print(f"üìÑ –ü–∞—Ä—Å–∏–Ω–≥ JSON —Ñ–∞–π–ª–∞ –∑–∞ {year} –≥–æ–¥...")
                records = parse_cve_json(content)
                print(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(records)} –∑–∞–ø–∏—Å–µ–π CVE –∏–∑ JSON")
                
                if records:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(records)} –∑–∞–ø–∏—Å–µ–π CVE –∑–∞ {year} –≥–æ–¥")
                    print(f"üì• –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
                    await db.insert_cve_records(records)
                    total_records += len(records)
                    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(records)} –∑–∞–ø–∏—Å–µ–π CVE –∑–∞ {year} –≥–æ–¥")
                else:
                    print(f"‚ö†Ô∏è No CVE records found for {year}")
                
            except Exception as e:
                print(f"‚ö†Ô∏è Error processing year {year}: {e}")
                continue
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        await db.update_background_task(
            task_id, 
            status='completed',
            current_step='–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
            total_records=total_records,
            updated_records=total_records
        )
        
        print("üéâ CVE download and processing completed successfully")
        return {"success": True, "count": total_records}
        
    except Exception as e:
        error_msg = f"CVE download error: {str(e)}"
        print(error_msg)
        print('Full traceback:', traceback.format_exc())
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ —Å –æ—à–∏–±–∫–æ–π
        if 'task_id' in locals():
            await db.update_background_task(task_id, status='error', error_message=error_msg)
        
        raise HTTPException(status_code=500, detail=error_msg)


@router.get("/api/cve/status")
async def cve_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å CVE –¥–∞–Ω–Ω—ã—Ö"""
    try:
        db = get_db()
        count = await db.count_cve_records()
        return {"success": True, "count": count}
    except Exception as e:
        print('CVE status error:', traceback.format_exc())
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/api/cve/clear")
async def clear_cve():
    """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ CVE –¥–∞–Ω–Ω—ã–µ"""
    try:
        db = get_db()
        await db.clear_cve()
        return {"success": True, "message": "–í—Å–µ CVE –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã"}
    except Exception as e:
        print('CVE clear error:', traceback.format_exc())
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/api/cve/download-recent")
async def download_cve_recent():
    """–°–∫–∞—á–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ CVE –¥–∞–Ω–Ω—ã–µ (recent)"""
    try:
        print("üîÑ Starting CVE recent download...")
        
        url = "https://nvd.nist.gov/feeds/json/cve/2.0/nvdcve-2.0-recent.json.gz"
        print(f"üì• Downloading from {url}")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        db = get_db()
        task_id = await db.create_background_task(
            task_type='cve_download_recent',
            parameters={'url': url},
            description='–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö CVE –¥–∞–Ω–Ω—ã—Ö —Å NVD'
        )
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
        timeout = aiohttp.ClientTimeout(total=600, connect=60)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(url) as resp:
                if resp.status != 200:
                    error_msg = f"Failed to download recent CVE: {resp.status}"
                    await db.update_background_task(task_id, status='error', error_message=error_msg)
                    raise HTTPException(status_code=500, detail=error_msg)
                
                print(f"üì¶ Reading compressed content...")
                gz_content = await resp.read()
                print(f"üìä Downloaded {len(gz_content)} bytes")
        
        print(f"üîì Decompressing content...")
        with gzip.GzipFile(fileobj=io.BytesIO(gz_content)) as gz:
            content = gz.read().decode('utf-8')
        
        print(f"üìÑ Decompressed {len(content)} characters")
        
        # –ü–∞—Ä—Å–∏–º JSON
        print(f"üìÑ –ü–∞—Ä—Å–∏–Ω–≥ JSON —Ñ–∞–π–ª–∞...")
        records = parse_cve_json(content)
        print(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(records)} –∑–∞–ø–∏—Å–µ–π CVE –∏–∑ JSON")
        
        if records:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(records)} –∑–∞–ø–∏—Å–µ–π CVE")
            print(f"üì• –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
            await db.insert_cve_records(records)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(records)} –∑–∞–ø–∏—Å–µ–π CVE")
        else:
            print(f"‚ö†Ô∏è No CVE records found")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        await db.update_background_task(
            task_id, 
            status='completed',
            current_step='–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
            total_records=len(records) if records else 0,
            updated_records=len(records) if records else 0
        )
        
        print("üéâ CVE recent download and processing completed successfully")
        return {"success": True, "count": len(records) if records else 0}
        
    except Exception as e:
        error_msg = f"CVE recent download error: {str(e)}"
        print(error_msg)
        print('Full traceback:', traceback.format_exc())
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ —Å –æ—à–∏–±–∫–æ–π
        if 'task_id' in locals():
            await db.update_background_task(task_id, status='error', error_message=error_msg)
        
        raise HTTPException(status_code=500, detail=error_msg)


@router.post("/api/cve/download-modified")
async def download_cve_modified():
    """–°–∫–∞—á–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ CVE –¥–∞–Ω–Ω—ã–µ (modified)"""
    try:
        print("üîÑ Starting CVE modified download...")
        
        url = "https://nvd.nist.gov/feeds/json/cve/2.0/nvdcve-2.0-modified.json.gz"
        print(f"üì• Downloading from {url}")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        db = get_db()
        task_id = await db.create_background_task(
            task_type='cve_download_modified',
            parameters={'url': url},
            description='–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö CVE –¥–∞–Ω–Ω—ã—Ö —Å NVD'
        )
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
        timeout = aiohttp.ClientTimeout(total=600, connect=60)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(url) as resp:
                if resp.status != 200:
                    error_msg = f"Failed to download modified CVE: {resp.status}"
                    await db.update_background_task(task_id, status='error', error_message=error_msg)
                    raise HTTPException(status_code=500, detail=error_msg)
                
                print(f"üì¶ Reading compressed content...")
                gz_content = await resp.read()
                print(f"üìä Downloaded {len(gz_content)} bytes")
        
        print(f"üîì Decompressing content...")
        with gzip.GzipFile(fileobj=io.BytesIO(gz_content)) as gz:
            content = gz.read().decode('utf-8')
        
        print(f"üìÑ Decompressed {len(content)} characters")
        
        # –ü–∞—Ä—Å–∏–º JSON
        print(f"üìÑ –ü–∞—Ä—Å–∏–Ω–≥ JSON —Ñ–∞–π–ª–∞...")
        records = parse_cve_json(content)
        print(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(records)} –∑–∞–ø–∏—Å–µ–π CVE –∏–∑ JSON")
        
        if records:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(records)} –∑–∞–ø–∏—Å–µ–π CVE")
            print(f"üì• –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
            await db.insert_cve_records(records)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(records)} –∑–∞–ø–∏—Å–µ–π CVE")
        else:
            print(f"‚ö†Ô∏è No CVE records found")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        await db.update_background_task(
            task_id, 
            status='completed',
            current_step='–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
            total_records=len(records) if records else 0,
            updated_records=len(records) if records else 0
        )
        
        print("üéâ CVE modified download and processing completed successfully")
        return {"success": True, "count": len(records) if records else 0}
        
    except Exception as e:
        error_msg = f"CVE modified download error: {str(e)}"
        print(error_msg)
        print('Full traceback:', traceback.format_exc())
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ —Å –æ—à–∏–±–∫–æ–π
        if 'task_id' in locals():
            await db.update_background_task(task_id, status='error', error_message=error_msg)
        
        raise HTTPException(status_code=500, detail=error_msg)


@router.post("/api/cve/cancel")
async def cancel_cve_download():
    """–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –∑–∞–≥—Ä—É–∑–∫—É CVE"""
    try:
        db = get_db()
        cancelled = await db.cancel_background_task('cve_download')
        
        if cancelled:
            return {"success": True, "message": "–ó–∞–≥—Ä—É–∑–∫–∞ CVE –æ—Ç–º–µ–Ω–µ–Ω–∞"}
        else:
            return {"success": False, "message": "–ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CVE –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
            
    except Exception as e:
        print('CVE cancel error:', traceback.format_exc())
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/api/cve/download-urls")
async def get_cve_download_urls():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è CVE –¥–∞–Ω–Ω—ã—Ö"""
    current_year = datetime.now().year
    urls = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ CVE 2.0 –¥–ª—è –≤—Å–µ—Ö –ª–µ—Ç —Å 2002
    for year in range(2002, current_year + 1):
        urls.append({
            "year": f"{year} (CVE 2.0)",
            "url": f"https://nvd.nist.gov/feeds/json/cve/2.0/nvdcve-2.0-{year}.json.gz",
            "filename": f"nvdcve-2.0-{year}.json.gz"
        })
    
    return {
        "success": True,
        "urls": urls,
        "note": "–°–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª—ã –ø–æ —Å—Å—ã–ª–∫–∞–º –≤—ã—à–µ –¥–ª—è offline –∑–∞–≥—Ä—É–∑–∫–∏. CVE 2.0 - –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç NVD (2002-2025)."
    }
