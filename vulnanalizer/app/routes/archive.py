"""
–†–æ—É—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Ä—Ö–∏–≤–∞–º–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
"""
import traceback
import zipfile
import io
import gzip
import json
import csv
from typing import Dict
from fastapi import APIRouter, HTTPException, UploadFile, File
from datetime import datetime

from database import get_db
from routes.cve import parse_cve_json
from services.metasploit_service import MetasploitService

router = APIRouter()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ Metasploit
metasploit_service = MetasploitService()


def parse_date(date_str):
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –¥–ª—è ExploitDB"""
    try:
        return datetime.strptime(date_str, '%Y-%m-%d').date()
    except ValueError:
        return None


@router.post("/api/archive/upload")
async def upload_archive(file: UploadFile = File(...)):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∞—Ä—Ö–∏–≤ —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        if not file.filename.endswith('.zip'):
            raise HTTPException(status_code=400, detail="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ ZIP –∞—Ä—Ö–∏–≤—ã")
        
        print(f"üì¶ –ü–æ–ª—É—á–µ–Ω –∞—Ä—Ö–∏–≤: {file.filename}")
        
        # –ß–∏—Ç–∞–µ–º ZIP –∞—Ä—Ö–∏–≤
        content = await file.read()
        zip_file = zipfile.ZipFile(io.BytesIO(content))
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –∞—Ä—Ö–∏–≤–µ
        file_list = zip_file.namelist()
        print(f"üìã –§–∞–π–ª–æ–≤ –≤ –∞—Ä—Ö–∏–≤–µ: {len(file_list)}")
        
        results = {
            "epss": {"success": False, "count": 0, "message": ""},
            "exploitdb": {"success": False, "count": 0, "message": ""},
            "metasploit": {"success": False, "count": 0, "message": ""},
            "cve": {"success": False, "count": 0, "message": ""}
        }
        
        db = get_db()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –≤ –∞—Ä—Ö–∏–≤–µ
        for file_path in file_list:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
            if file_path.endswith('/') or '/__MACOSX/' in file_path or file_path.startswith('.'):
                continue
            
            print(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {file_path}")
            
            try:
                # EPSS
                if 'epss' in file_path.lower() and file_path.endswith('.csv.gz'):
                    print(f"üìä –ó–∞–≥—Ä—É–∑–∫–∞ EPSS: {file_path}")
                    
                    # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º gzip
                    gz_content = zip_file.read(file_path)
                    print(f"üì¶ –†–∞–∑–º–µ—Ä —Å–∂–∞—Ç–æ–≥–æ EPSS —Ñ–∞–π–ª–∞: {len(gz_content)} –±–∞–π—Ç")
                    
                    with gzip.GzipFile(fileobj=io.BytesIO(gz_content)) as gz:
                        csv_content = gz.read().decode('utf-8-sig')
                    
                    print(f"üìÑ –†–∞–∑–º–µ—Ä —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–≥–æ EPSS: {len(csv_content)} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    # –ü–∞—Ä—Å–∏–º CSV
                    lines = csv_content.splitlines()
                    print(f"üìã –°—Ç—Ä–æ–∫ –≤ EPSS —Ñ–∞–π–ª–µ: {len(lines)}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    if len(lines) > 0:
                        print(f"üìù –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ (–∑–∞–≥–æ–ª–æ–≤–æ–∫): {lines[0][:200]}")
                    if len(lines) > 1:
                        print(f"üìù –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ (–¥–∞–Ω–Ω—ã–µ): {lines[1][:200]}")
                    
                    reader = csv.DictReader(lines, delimiter=',')
                    
                    records = []
                    skipped = 0
                    for row in reader:
                        try:
                            cve = row.get('cve', '').strip()
                            epss = row.get('epss', '').strip()
                            
                            if cve and epss:
                                try:
                                    epss_value = float(epss)
                                    records.append({
                                        'cve': cve,
                                        'epss': epss_value
                                    })
                                except ValueError:
                                    skipped += 1
                                    continue
                        except Exception:
                            skipped += 1
                            continue
                    
                    print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π EPSS: {len(records)}, –ø—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
                    if records:
                        await db.epss.insert_records(records)
                        results["epss"] = {
                            "success": True,
                            "count": len(records),
                            "message": f"EPSS –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {len(records)} –∑–∞–ø–∏—Å–µ–π"
                        }
                        print(f"‚úÖ EPSS –∑–∞–≥—Ä—É–∂–µ–Ω: {len(records)} –∑–∞–ø–∏—Å–µ–π")
                    else:
                        print(f"‚ö†Ô∏è EPSS: –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
                        results["epss"] = {
                            "success": False,
                            "count": 0,
                            "message": "EPSS —Ñ–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π"
                        }
                
                # ExploitDB
                elif 'exploitdb' in file_path.lower() and file_path.endswith('.csv'):
                    print(f"üí• –ó–∞–≥—Ä—É–∑–∫–∞ ExploitDB: {file_path}")
                    
                    csv_content = zip_file.read(file_path).decode('utf-8-sig')
                    lines = csv_content.splitlines()
                    reader = csv.DictReader(lines, delimiter=',')
                    
                    records = []
                    for row in reader:
                        try:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π
                            if 'id' in row:
                                # –ü–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ExploitDB
                                records.append({
                                    'exploit_id': int(row['id']),
                                    'file_path': row.get('file'),
                                    'description': row.get('description'),
                                    'date_published': parse_date(row.get('date_published')),
                                    'author': row.get('author'),
                                    'type': row.get('type'),
                                    'platform': row.get('platform'),
                                    'port': row.get('port') if row.get('port') else None,
                                    'date_added': parse_date(row.get('date_added')),
                                    'date_updated': parse_date(row.get('date_updated')),
                                    'verified': row.get('verified', '0') == '1',
                                    'codes': row.get('codes'),
                                    'tags': row.get('tags'),
                                    'aliases': row.get('aliases'),
                                    'screenshot_url': row.get('screenshot_url'),
                                    'application_url': row.get('application_url'),
                                    'source_url': row.get('source_url')
                                })
                            elif 'cve' in row and 'exploit_id' in row:
                                # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (—Ç–æ–ª—å–∫–æ CVE –∏ ID)
                                cve = row.get('cve', '').strip()
                                exploit_id = row.get('exploit_id', '').strip()
                                
                                if cve and exploit_id:
                                    try:
                                        exploit_id_value = int(exploit_id)
                                        records.append({
                                            'cve': cve,
                                            'exploit_id': exploit_id_value
                                        })
                                    except ValueError:
                                        continue
                        except (ValueError, KeyError):
                            continue
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
                    await db.insert_exploitdb_records(records)
                    results["exploitdb"] = {
                        "success": True,
                        "count": len(records),
                        "message": f"ExploitDB –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {len(records)} –∑–∞–ø–∏—Å–µ–π"
                    }
                    print(f"‚úÖ ExploitDB –∑–∞–≥—Ä—É–∂–µ–Ω: {len(records)} –∑–∞–ø–∏—Å–µ–π")
                
                # Metasploit
                elif 'metasploit' in file_path.lower() and file_path.endswith('.json'):
                    print(f"üéØ –ó–∞–≥—Ä—É–∑–∫–∞ Metasploit: {file_path}")
                    
                    json_content = zip_file.read(file_path).decode('utf-8')
                    data = json.loads(json_content)
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    count = await metasploit_service.process_and_save_metasploit_data(data)
                    
                    results["metasploit"] = {
                        "success": True,
                        "count": count,
                        "message": f"Metasploit –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {count} –º–æ–¥—É–ª–µ–π"
                    }
                    print(f"‚úÖ Metasploit –∑–∞–≥—Ä—É–∂–µ–Ω: {count} –º–æ–¥—É–ª–µ–π")
                
                # CVE
                elif 'cve' in file_path.lower() and file_path.endswith('.json.gz'):
                    print(f"üîê –ó–∞–≥—Ä—É–∑–∫–∞ CVE: {file_path}")
                    
                    # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º gzip
                    gz_content = zip_file.read(file_path)
                    with gzip.GzipFile(fileobj=io.BytesIO(gz_content)) as gz:
                        json_content = gz.read().decode('utf-8')
                    
                    # –ü–∞—Ä—Å–∏–º JSON
                    records = parse_cve_json(json_content)
                    
                    if records:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
                        await db.insert_cve_records(records)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
                        current_count = results["cve"].get("count", 0)
                        results["cve"] = {
                            "success": True,
                            "count": current_count + len(records),
                            "message": f"CVE –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã"
                        }
                        print(f"‚úÖ CVE —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {len(records)} –∑–∞–ø–∏—Å–µ–π")
                
            except Exception as file_error:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {file_error}")
                print(traceback.format_exc())
                continue
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        total_count = sum(r["count"] for r in results.values())
        success_count = sum(1 for r in results.values() if r["success"])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è CVE
        if results["cve"]["success"]:
            results["cve"]["message"] = f"CVE –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {results['cve']['count']} –∑–∞–ø–∏—Å–µ–π"
        
        return {
            "success": True,
            "total_records": total_count,
            "databases_imported": success_count,
            "details": results,
            "message": f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {success_count} –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö, –≤—Å–µ–≥–æ {total_count} –∑–∞–ø–∏—Å–µ–π"
        }
        
    except zipfile.BadZipFile:
        raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ZIP –∞—Ä—Ö–∏–≤")
    except Exception as e:
        print(f'‚ùå Archive upload error: {traceback.format_exc()}')
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/api/archive/status")
async def archive_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        db = get_db()
        
        epss_count = await db.count_epss_records()
        exploitdb_count = await db.count_exploitdb_records()
        cve_count = await db.count_cve_records()
        metasploit_count = await db.count_metasploit_modules()
        
        return {
            "success": True,
            "databases": {
                "epss": epss_count,
                "exploitdb": exploitdb_count,
                "cve": cve_count,
                "metasploit": metasploit_count
            },
            "total": epss_count + exploitdb_count + cve_count + metasploit_count
        }
    except Exception as e:
        print('Archive status error:', traceback.format_exc())
        raise HTTPException(status_code=500, detail=str(e))

