"""
–†–æ—É—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å EPSS –¥–∞–Ω–Ω—ã–º–∏
"""
import traceback
import gzip
import io
import csv
import aiohttp
from datetime import datetime
from fastapi import APIRouter, HTTPException, File, UploadFile
from fastapi.responses import StreamingResponse

from database import get_db

router = APIRouter()


@router.post("/api/epss/upload")
async def upload_epss(file: UploadFile = File(...)):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å EPSS –¥–∞–Ω–Ω—ã–µ"""
    try:
        content = await file.read()
        decoded_content = content.decode('utf-8-sig')
        
        # –ü–∞—Ä—Å–∏–º CSV
        lines = decoded_content.splitlines()
        reader = csv.DictReader(lines, delimiter=',')
        
        records = []
        for row in reader:
            try:
                cve = row.get('cve', '').strip()
                epss = row.get('epss', '').strip()
                
                if cve and epss:
                    try:
                        epss_value = float(epss)
                        records.append({
                            'cve': cve,
                            'epss': epss_value
                        })
                    except ValueError:
                        print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º EPSS: {cve} = {epss}")
                        continue
                        
            except Exception as row_error:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ EPSS: {row_error}")
                continue
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db = get_db()
        await db.insert_epss_records(records)
        
        return {
            "success": True,
            "count": len(records),
            "message": f"EPSS –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {len(records)} –∑–∞–ø–∏—Å–µ–π"
        }
        
    except Exception as e:
        print(f'‚ùå EPSS upload error: {traceback.format_exc()}')
        raise HTTPException(status_code=500, detail=str(e))


@router.post("/api/epss/download")
async def download_epss():
    """–°–∫–∞—á–∞—Ç—å EPSS –¥–∞–Ω–Ω—ã–µ —Å –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
    url = "https://epss.empiricalsecurity.com/epss_scores-current.csv.gz"
    try:
        print("üîÑ Starting EPSS download...")
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
        timeout = aiohttp.ClientTimeout(total=300, connect=60)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            print(f"üì• Downloading from {url}")
            async with session.get(url) as resp:
                if resp.status != 200:
                    raise Exception(f"Failed to download: {resp.status} - {resp.reason}")
                
                print("üì¶ Reading compressed content...")
                gz_content = await resp.read()
                print(f"üìä Downloaded {len(gz_content)} bytes")
        
        print("üîì Decompressing content...")
        with gzip.GzipFile(fileobj=io.BytesIO(gz_content)) as gz:
            decoded = gz.read().decode('utf-8').splitlines()
        
        print(f"üìÑ Decompressed {len(decoded)} lines")
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ)
        header_line = None
        for i, line in enumerate(decoded):
            if line.startswith('cve,') or 'cve' in line.split(',')[0]:
                header_line = i
                break
        
        if header_line is None:
            raise Exception("Could not find header line with 'cve' column")
        
        print(f"üìã Found header at line {header_line}")
        
        # –°–æ–∑–¥–∞–µ–º CSV reader –Ω–∞—á–∏–Ω–∞—è —Å –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        reader = csv.DictReader(decoded[header_line:])
        
        print("üîÑ Processing CSV records...")
        records = []
        processed_count = 0
        
        for row in reader:
            try:
                records.append({
                    'cve': row['cve'],
                    'epss': float(row['epss']),
                    'percentile': float(row['percentile']),
                    'cvss': float(row.get('cvss', 0)) if row.get('cvss') else None,
                    'date': row.get('date') or datetime.utcnow().date()
                })
                processed_count += 1
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10000 –∑–∞–ø–∏—Å–µ–π
                if processed_count % 10000 == 0:
                    print(f"üìä Processed {processed_count} records...")
                    
            except (ValueError, KeyError) as e:
                print(f"‚ö†Ô∏è Skipping invalid row: {e}, row data: {row}")
                continue
        
        print(f"‚úÖ Processed {len(records)} valid records")
        print("üíæ Inserting records into database...")
        
        db = get_db()
        await db.insert_epss_records(records)
        
        print("üéâ EPSS download and processing completed successfully")
        return {"success": True, "count": len(records)}
        
    except Exception as e:
        error_msg = f"EPSS download error: {str(e)}"
        print(error_msg)
        print('Full traceback:', traceback.format_exc())
        raise HTTPException(status_code=500, detail=error_msg)


@router.get("/api/epss/search")
async def search_epss(
    cve: str = None,
    limit: int = 100,
    page: int = 1
):
    """–ü–æ–∏—Å–∫ EPSS –¥–∞–Ω–Ω—ã—Ö"""
    try:
        db = get_db()
        results, total_count = await db.search_epss(
            cve_pattern=cve,
            limit=limit,
            page=page
        )
        return {
            "success": True, 
            "results": results,
            "total_count": total_count,
            "page": page,
            "limit": limit,
            "total_pages": (total_count + limit - 1) // limit
        }
    except Exception as e:
        print('EPSS search error:', traceback.format_exc())
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/api/epss/status")
async def epss_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å EPSS –¥–∞–Ω–Ω—ã—Ö"""
    try:
        db = get_db()
        count = await db.count_epss_records()
        return {"success": True, "count": count}
    except Exception as e:
        print('EPSS status error:', traceback.format_exc())
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/preview")
async def get_epss_preview():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–µ 20 –∑–∞–ø–∏—Å–µ–π EPSS –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    try:
        db = get_db()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 –∑–∞–ø–∏—Å–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        query = """
            SELECT cve, epss, percentile, cvss, date, created_at
            FROM vulnanalizer.epss 
            ORDER BY created_at DESC 
            LIMIT 20
        """
        
        conn = await db.get_connection()
        try:
            results = await conn.fetch(query)
        finally:
            await db.release_connection(conn)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        records = []
        for row in results:
            records.append({
                "cve": row['cve'],
                "epss": float(row['epss']),
                "percentile": float(row['percentile']),
                "cvss": float(row['cvss']) if row['cvss'] else None,
                "date": row['date'].isoformat() if row['date'] else None,
                "created_at": row['created_at'].isoformat() if row['created_at'] else None
            })
        
        return {
            "success": True,
            "records": records,
            "count": len(records)
        }
    except Exception as e:
        print(f"Error getting EPSS preview: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/clear")
async def clear_epss():
    """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ EPSS –¥–∞–Ω–Ω—ã–µ"""
    try:
        db = get_db()
        await db.clear_epss()
        return {"success": True, "message": "–í—Å–µ EPSS –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã"}
    except Exception as e:
        print('EPSS clear error:', traceback.format_exc())
        raise HTTPException(status_code=500, detail=str(e))
