"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤
"""
import asyncio
from typing import Dict, List, Optional, Any
from datetime import datetime
import async_timeout
from .base import DatabaseBase


class RiskCalculationService(DatabaseBase):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤"""

    def __init__(self):
        super().__init__()
        self._epss_cache = {}
        self._cve_cache = {}
        self._exploitdb_cache = {}

    def calculate_risk_score_fast(self, epss: float, cvss: float = None, criticality: str = 'Medium', settings: dict = None) -> dict:
        """–ü–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤"""
        if epss is None:
            return {
                'raw_risk': None,
                'risk_score': None,
                'calculation_possible': False,
                'impact': None
            }
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º decimal –≤ float –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if hasattr(epss, 'as_tuple'):
            epss = float(epss)
        
        # –ü–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç Impact –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ –∏ –¥—Ä—É–≥–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
        impact = self._calculate_impact_full(criticality, settings)
        
        # –ü–æ–ª–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–∞
        raw_risk = epss * impact
        risk_score = min(1, raw_risk) * 100
        
        return {
            'raw_risk': raw_risk,
            'risk_score': risk_score,
            'calculation_possible': True,
            'impact': impact
        }

    def _calculate_impact_full(self, criticality: str, settings: dict = None) -> float:
        """–ü–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç Impact —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤"""
        # –í–µ—Å–∞ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ —Ä–µ—Å—É—Ä—Å–∞
        resource_weights = {
            'Critical': 0.33,
            'High': 0.25,
            'Medium': 0.15,
            'Low': 0.1,
            'None': 0.05
        }
        
        # –í–µ—Å–∞ –¥–ª—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        data_weights = {
            '–ï—Å—Ç—å': 0.33,
            '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç': 0.1
        }
        
        # –í–µ—Å–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
        internet_weights = {
            '–î–æ—Å—Ç—É–ø–µ–Ω': 0.33,
            '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω': 0.1
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if settings:
            confidential_data = settings.get('impact_confidential_data', '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç')
            internet_access = settings.get('impact_internet_access', '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
        else:
            confidential_data = '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'
            internet_access = '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º Impact —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
        impact = (
            resource_weights.get(criticality, 0.15) +
            data_weights.get(confidential_data, 0.1) +
            internet_weights.get(internet_access, 0.1)
        )
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ float –µ—Å–ª–∏ —ç—Ç–æ decimal
        if hasattr(impact, 'as_tuple'):
            impact = float(impact)
        
        return impact

    async def process_cve_risk_calculation_optimized(self, cve_rows, conn, settings=None, progress_callback=None):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ CVE –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤"""
        print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É {len(cve_rows)} CVE")
        
        # –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ –ë–î
        max_concurrent = 5  # –£–º–µ–Ω—å—à–∏–ª–∏ –¥–æ 5 –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ë–î
        timeout_seconds = 5  # –£–º–µ–Ω—å—à–∏–ª–∏ —Å 30 –¥–æ 5 —Å–µ–∫—É–Ω–¥
        
        print(f"‚öôÔ∏è –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: max_concurrent={max_concurrent}, timeout={timeout_seconds}s")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –Ω–∞—á–∞–ª–µ
        if progress_callback:
            await progress_callback('calculating_risk', f'–ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ {len(cve_rows)} CVE...', 75, 
                                  current_step_progress=0, processed_records=0)
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        semaphore = asyncio.Semaphore(max_concurrent)
        
        async def process_single_cve_optimized(cve_row, index):
            """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ CVE"""
            async with semaphore:
                cve = cve_row['cve']
                start_time = datetime.now()
                
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
                    if cve in self._epss_cache:
                        epss_data = self._epss_cache[cve]
                    else:
                        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ EPSS –¥–∞–Ω–Ω—ã–µ (—Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–∞)
                        try:
                            async with async_timeout.timeout(timeout_seconds):
                                epss_data = await self._get_epss_by_cve_fast(cve, conn)
                                self._epss_cache[cve] = epss_data
                        except Exception as e:
                            print(f"‚ö†Ô∏è [{index+1}] EPSS –æ—à–∏–±–∫–∞ –¥–ª—è {cve}: {e}")
                            epss_data = None
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ö–æ—Å—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ CVE
                    hosts_query = "SELECT id, cvss, criticality FROM hosts WHERE cve = $1"
                    hosts_rows = await conn.fetch(hosts_query, cve)
                    
                    if not hosts_rows:
                        return {'processed': True, 'hosts_updated': 0, 'error': None}
                    
                    hosts_updated = 0
                    for host_row in hosts_rows:
                        # –ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ EPSS
                        risk_data = None
                        
                        if epss_data and epss_data.get('epss') is not None:
                            # –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
                            risk_data = self.calculate_risk_score_fast(
                                epss_data['epss'], 
                                host_row['cvss'], 
                                host_row['criticality'],
                                settings
                            )
                        
                        # –ë—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ö–æ—Å—Ç–∞
                        update_query = """
                            UPDATE hosts SET
                                epss_score = $1,
                                epss_percentile = $2,
                                risk_score = $3,
                                risk_raw = $4,
                                impact_score = $5,
                                epss_updated_at = $6,
                                risk_updated_at = $7
                            WHERE id = $8
                        """
                        
                        await conn.execute(update_query,
                            epss_data.get('epss') if epss_data else None,
                            epss_data.get('percentile') if epss_data else None,
                            risk_data.get('risk_score') if risk_data else None,
                            risk_data.get('raw_risk') if risk_data else None,
                            risk_data.get('impact') if risk_data else None,
                            datetime.now() if epss_data else None,
                            datetime.now() if risk_data else None,
                            host_row['id']
                        )
                        hosts_updated += 1
                    
                    elapsed = (datetime.now() - start_time).total_seconds()
                    print(f"‚úÖ [{index+1}] CVE {cve}: –æ–±–Ω–æ–≤–ª–µ–Ω–æ {hosts_updated} —Ö–æ—Å—Ç–æ–≤ –∑–∞ {elapsed:.2f}s")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 CVE
                    if progress_callback and (index + 1) % 10 == 0:
                        risk_progress = 75 + ((index + 1) / len(cve_rows)) * 20
                        await progress_callback('calculating_risk', 
                            f'–†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–æ–≤... ({index+1}/{len(cve_rows)} CVE)', 
                            risk_progress, 
                            current_step_progress=index+1, 
                            processed_records=index+1)
                    
                    return {'processed': True, 'hosts_updated': hosts_updated, 'error': None}
                    
                except asyncio.TimeoutError:
                    elapsed = (datetime.now() - start_time).total_seconds()
                    print(f"‚è∞ [{index+1}] –¢–∞–π–º–∞—É—Ç –¥–ª—è CVE {cve} –ø–æ—Å–ª–µ {elapsed:.2f}s")
                    return {'processed': False, 'hosts_updated': 0, 'error': 'timeout'}
                except Exception as e:
                    elapsed = (datetime.now() - start_time).total_seconds()
                    print(f"‚ùå [{index+1}] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ CVE {cve} –ø–æ—Å–ª–µ {elapsed:.2f}s: {e}")
                    return {'processed': False, 'hosts_updated': 0, 'error': str(e)}
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        tasks = [process_single_cve_optimized(cve_row, i) for i, cve_row in enumerate(cve_rows)]
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        successful = 0
        failed = 0
        total_hosts_updated = 0
        
        for i, result in enumerate(results):
            if isinstance(result, Exception):
                print(f"‚ùå [{i+1}] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –∑–∞–¥–∞—á–µ: {result}")
                failed += 1
            elif result and result.get('processed'):
                successful += 1
                total_hosts_updated += result.get('hosts_updated', 0)
            else:
                failed += 1
        
        print(f"üéØ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}/{len(cve_rows)} CVE")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {failed}/{len(cve_rows)} CVE")
        print(f"   üè† –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ö–æ—Å—Ç–æ–≤: {total_hosts_updated}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –∫–æ–Ω—Ü–µ
        if progress_callback:
            await progress_callback('calculating_risk', f'–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {successful}/{len(cve_rows)} CVE', 95, 
                                  current_step_progress=len(cve_rows), processed_records=len(cve_rows))

    async def _get_epss_by_cve_fast(self, cve_id: str, conn):
        """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ EPSS –¥–∞–Ω–Ω—ã—Ö —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º"""
        try:
            async with async_timeout.timeout(3):
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ö–µ–º—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                await conn.execute('SET search_path TO vulnanalizer')
                
                row = await conn.fetchrow("""
                    SELECT cve, epss, percentile, updated_at 
                    FROM epss 
                    WHERE cve = $1
                """, cve_id.upper())
                
                if row:
                    return {
                        'cve': row['cve'],
                        'epss': float(row['epss']),
                        'percentile': float(row['percentile']),
                        'updated_at': row['updated_at'].isoformat() if row['updated_at'] else None
                    }
                return None
        except Exception as e:
            print(f"Error getting EPSS data for {cve_id}: {e}")
            return None

    async def update_hosts_epss_and_exploits_background_parallel(self, progress_callback=None, max_concurrent=10):
        """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ EPSS –∏ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Ö–æ—Å—Ç–æ–≤ —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
        print("üîÑ Starting parallel update_hosts_epss_and_exploits_background function")
        conn = await self.get_connection()
        try:
            print("üîÑ Got database connection")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ CVE –∏–∑ —Ö–æ—Å—Ç–æ–≤
            cve_query = """
                SELECT DISTINCT cve FROM hosts 
                WHERE cve IS NOT NULL AND cve != '' 
                ORDER BY cve
            """
            print("üîÑ Executing CVE query")
            cve_rows = await conn.fetch(cve_query)
            print(f"üîÑ CVE query returned {len(cve_rows)} rows")
            
            if not cve_rows:
                return {"success": True, "message": "–ù–µ—Ç CVE –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", "updated_count": 0}
            
            total_cves = len(cve_rows)
            updated_count = 0
            skipped_cves = 0
            processed_cves = 0
            
            print(f"üîÑ Starting parallel update: found {total_cves} unique CVEs")
            
            if progress_callback:
                progress_callback('initializing', f'–ù–∞–π–¥–µ–Ω–æ {total_cves} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö CVE –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', 
                                total_cves=total_cves, processed_cves=0)
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            semaphore = asyncio.Semaphore(max_concurrent)
            
            async def process_single_cve(cve, index):
                """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–∏–Ω CVE"""
                async with semaphore:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –∑–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞
                    task = await self.get_background_task_by_type('hosts_update')
                    if task and task.get('status') == 'cancelled':
                        return None
                    
                    print(f"üîÑ Processing CVE {index+1}/{total_cves}: {cve}")
                    
                    if progress_callback:
                        progress_callback('processing', f'–û–±—Ä–∞–±–æ—Ç–∫–∞ CVE {index+1}/{total_cves}: {cve}', 
                                        processed_cves=index+1, total_cves=total_cves)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                    cve_data, epss_data, exploitdb_data = await asyncio.gather(
                        self.get_cve_by_id(cve),
                        self.get_epss_by_cve(cve),
                        self.get_exploitdb_by_cve(cve),
                        return_exceptions=True
                    )
                    

                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                    if isinstance(cve_data, Exception):
                        print(f"‚ö†Ô∏è Error getting CVE data for {cve}: {cve_data}")
                        cve_data = None
                    if isinstance(epss_data, Exception):
                        print(f"‚ö†Ô∏è Error getting EPSS data for {cve}: {epss_data}")
                        epss_data = None
                    if isinstance(exploitdb_data, Exception):
                        print(f"‚ö†Ô∏è Error getting ExploitDB data for {cve}: {exploitdb_data}")
                        exploitdb_data = None
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    has_cve_data = cve_data is not None
                    has_epss_data = epss_data is not None
                    has_exploit_data = exploitdb_data is not None
                    
                    if not has_cve_data and not has_epss_data and not has_exploit_data:
                        print(f"üîÑ Skipping CVE {cve} - no data found")
                        return {'skipped': True, 'updated_hosts': 0}
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ö–æ—Å—Ç—ã —Å —ç—Ç–∏–º CVE
                    hosts_query = "SELECT id, cvss, criticality FROM hosts WHERE cve = $1"
                    hosts_rows = await conn.fetch(hosts_query, cve)
                    
                    if not hosts_rows:
                        print(f"üîÑ No hosts found for CVE {cve}")
                        return {'skipped': True, 'updated_hosts': 0}
                    
                    updated_hosts = 0
                    for host_row in hosts_rows:
                        # Priority CVSS: CVE database > EPSS > original host CVSS
                        cvss_score = None
                        cvss_source = None

                        if cve_data and cve_data.get('cvss_v3_base_score') is not None:
                            cvss_score = cve_data['cvss_v3_base_score']
                            cvss_source = 'CVSS v3'
                        elif cve_data and cve_data.get('cvss_v2_base_score') is not None:
                            cvss_score = cve_data['cvss_v2_base_score']
                            cvss_source = 'CVSS v2'
                        elif epss_data and epss_data.get('cvss') is not None:
                            cvss_score = epss_data['cvss']
                            cvss_source = 'EPSS'
                        elif host_row['cvss'] is not None:
                            cvss_score = host_row['cvss']
                            cvss_source = 'Host'

                        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ö–æ—Å—Ç–∞
                        update_query = """
                            UPDATE hosts SET
                                cvss = $1,
                                cvss_source = $2,
                                epss_score = $3,
                                epss_percentile = $4,
                                exploits_count = $5,
                                verified_exploits_count = $6,
                                has_exploits = $7,
                                epss_updated_at = $8,
                                exploits_updated_at = $9
                            WHERE id = $10
                        """
                        
                        await conn.execute(update_query,
                            cvss_score,
                            cvss_source,
                            epss_data.get('epss') if has_epss_data else None,
                            epss_data.get('percentile') if has_epss_data else None,
                            len(exploitdb_data) if has_exploit_data else 0,
                            len([e for e in exploitdb_data if e.get('verified', False)]) if has_exploit_data else 0,
                            len(exploitdb_data) > 0 if has_exploit_data else False,
                            datetime.now() if has_epss_data else None,
                            datetime.now() if has_exploit_data else None,
                            host_row['id']
                        )
                        
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∏—Å–∫ –µ—Å–ª–∏ –µ—Å—Ç—å EPSS –¥–∞–Ω–Ω—ã–µ
                        if has_epss_data and epss_data.get('epss'):
                            try:
                                settings = await self.get_settings()
                                risk_result = self.calculate_risk_score_fast(
                                    epss=epss_data.get('epss'),
                                    criticality=host_row['criticality'],
                                    settings=settings
                                )
                                
                                if risk_result['calculation_possible']:
                                    risk_update_query = """
                                        UPDATE hosts SET
                                            risk_score = $1,
                                            risk_raw = $2,
                                            risk_updated_at = $3
                                        WHERE id = $4
                                    """
                                    await conn.execute(risk_update_query,
                                        risk_result['risk_score'],
                                        risk_result['raw_risk'],
                                        datetime.now(),
                                        host_row['id']
                                    )
                            except Exception as risk_error:
                                print(f"‚ö†Ô∏è Error calculating risk for host {host_row['id']}: {risk_error}")
                        
                        updated_hosts += 1
                    
                    print(f"üîÑ Updated {updated_hosts} hosts for CVE {cve}")
                    return {'skipped': False, 'updated_hosts': updated_hosts}
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            tasks = [process_single_cve(cve_row['cve'], i) for i, cve_row in enumerate(cve_rows)]
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for result in results:
                if isinstance(result, Exception):
                    print(f"‚ö†Ô∏è Task error: {result}")
                    skipped_cves += 1
                elif result is None:
                    skipped_cves += 1
                elif result.get('skipped'):
                    skipped_cves += 1
                else:
                    processed_cves += 1
                    updated_count += result.get('updated_hosts', 0)
            
            print(f"üîÑ Completed: updated {updated_count} hosts, processed {processed_cves} CVEs, skipped {skipped_cves} CVEs")
            
            if progress_callback:
                progress_callback('completed', '–ó–∞–≤–µ—Ä—à–µ–Ω–æ', 
                                processed_cves=total_cves, total_cves=total_cves, 
                                updated_hosts=updated_count)
            
            return {
                "success": True,
                "message": f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –∑–∞–ø–∏—Å–µ–π —Ö–æ—Å—Ç–æ–≤ –∏–∑ {processed_cves} CVE (–ø—Ä–æ–ø—É—â–µ–Ω–æ {skipped_cves} CVE)",
                "updated_count": updated_count,
                "processed_cves": processed_cves,
                "skipped_cves": skipped_cves
            }
        except Exception as e:
            print(f"‚ùå Error updating hosts EPSS and exploits: {e}")
            return {
                "success": False,
                "message": f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}",
                "updated_count": 0,
                "processed_cves": 0
            }
        finally:
            await self.release_connection(conn)

    async def update_hosts_incremental(self, progress_callback=None, days_old=1):
        """–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ö–æ—Å—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å N –¥–Ω–µ–π"""
        print(f"üîÑ Starting incremental update for hosts older than {days_old} days")
        conn = await self.get_connection()
        try:
            # –ü–æ–ª—É—á–∞–µ–º CVE –∏–∑ —Ö–æ—Å—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å –¥–∞–≤–Ω–æ
            cve_query = """
                SELECT DISTINCT h.cve FROM hosts h
                WHERE h.cve IS NOT NULL AND h.cve != '' 
                AND (h.epss_updated_at IS NULL OR h.epss_updated_at < NOW() - INTERVAL $1)
                ORDER BY h.cve
            """
            cve_rows = await conn.fetch(cve_query, f'{days_old} days')
            
            if not cve_rows:
                return {"success": True, "message": f"–ù–µ—Ç —Ö–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Å—Ç–∞—Ä—à–µ {days_old} –¥–Ω–µ–π)", "updated_count": 0}
            
            total_cves = len(cve_rows)
            print(f"üîÑ Found {total_cves} CVE for incremental update")
            
            if progress_callback:
                progress_callback('initializing', f'–ù–∞–π–¥–µ–Ω–æ {total_cves} CVE –¥–ª—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', 
                                total_cves=total_cves, processed_cves=0)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            return await self.update_hosts_epss_and_exploits_background_parallel(
                progress_callback=progress_callback, 
                max_concurrent=5,  # –ú–µ–Ω—å—à–µ –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞ –¥–ª—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            )
            
        except Exception as e:
            print(f"‚ùå Error in incremental update: {e}")
            return {
                "success": False,
                "message": f"–û—à–∏–±–∫–∞ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}",
                "updated_count": 0
            }
        finally:
            await self.release_connection(conn)

    async def get_background_task_by_type(self, task_type: str):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
        from .background_tasks_repository import BackgroundTasksRepository
        background_tasks = BackgroundTasksRepository()
        return await background_tasks.get_background_task_by_type(task_type)

    async def get_settings(self):
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        from .settings_repository import SettingsRepository
        settings = SettingsRepository()
        return await settings.get_settings()

    async def get_epss_by_cve(self, cve_id: str):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ EPSS –ø–æ CVE ID"""
        from .epss_repository import EPSSRepository
        epss = EPSSRepository()
        return await epss.get_epss_by_cve(cve_id)

    async def get_cve_by_id(self, cve_id: str):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ CVE –ø–æ ID"""
        from .cve_repository import CVERepository
        cve = CVERepository()
        return await cve.get_cve_by_id(cve_id)

    async def get_exploitdb_by_cve(self, cve_id: str):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ ExploitDB –ø–æ CVE ID"""
        from .exploitdb_repository import ExploitDBRepository
        exploitdb = ExploitDBRepository()
        return await exploitdb.get_exploitdb_by_cve(cve_id)
