"""
Repository for hosts operations
"""
import asyncpg
import asyncio
from typing import List, Dict, Any, Optional
from datetime import datetime
from .base import DatabaseBase


class HostsRepository(DatabaseBase):
    """Repository for hosts operations"""
    
    async def get_hosts_count(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ—Å—Ç–æ–≤"""
        conn = await self.get_connection()
        try:
            count = await conn.fetchval("SELECT COUNT(*) FROM hosts")
            return count
        finally:
            await self.release_connection(conn)
    
    async def get_hosts(self, limit: int = 100, offset: int = 0) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ö–æ—Å—Ç–æ–≤"""
        conn = await self.get_connection()
        try:
            query = """
                SELECT id, hostname, ip_address, cve, cvss, criticality, status, 
                       os_name, zone, epss_score, risk_score, created_at, updated_at
                FROM hosts 
                ORDER BY created_at DESC 
                LIMIT $1 OFFSET $2
            """
            rows = await conn.fetch(query, limit, offset)
            return [dict(row) for row in rows]
        finally:
            await self.release_connection(conn)
    
    async def get_hosts_by_cve(self, cve: str) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ö–æ—Å—Ç—ã –ø–æ CVE"""
        conn = await self.get_connection()
        try:
            query = """
                SELECT id, hostname, ip_address, cve, cvss, criticality, status, 
                       os_name, zone, epss_score, risk_score, created_at, updated_at
                FROM hosts 
                WHERE cve = $1
                ORDER BY hostname
            """
            rows = await conn.fetch(query, cve)
            return [dict(row) for row in rows]
        finally:
            await self.release_connection(conn)
    
    async def delete_all_hosts(self) -> int:
        """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ö–æ—Å—Ç—ã"""
        conn = await self.get_connection()
        try:
            count = await conn.fetchval("SELECT COUNT(*) FROM hosts")
            await conn.execute("DELETE FROM hosts")
            return count
        finally:
            await self.release_connection(conn)
    
    async def insert_hosts_records_with_progress(self, records: list, progress_callback=None):
        """–í—Å—Ç–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å–∏ —Ö–æ—Å—Ç–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ —Ä–∞—Å—á–µ—Ç–æ–º —Ä–∏—Å–∫–∞"""
        conn = None
        try:
            conn = await asyncpg.connect(self.database_url)
            await conn.execute('SET search_path TO vulnanalizer')
            await conn.execute("SELECT 1")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ —Å CVE
            valid_records = [rec for rec in records if rec.get('cve', '').strip()]
            total_records = len(valid_records)
            skipped_records = len(records) - total_records
            
            print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç {total_records:,} –∑–∞–ø–∏—Å–µ–π —Å CVE (–ø—Ä–æ–ø—É—â–µ–Ω–æ {skipped_records:,} –∑–∞–ø–∏—Å–µ–π –±–µ–∑ CVE)")
            
            # –≠—Ç–∞–ø 1: –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (5%)
            if progress_callback:
                await progress_callback('cleaning', '–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π...', 5)
            
            await conn.execute("DELETE FROM hosts")
            print("üóëÔ∏è –°—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –æ—á–∏—â–µ–Ω—ã")
            
            # –≠—Ç–∞–ø 2: –í—Å—Ç–∞–≤–∫–∞ –∑–∞–ø–∏—Å–µ–π (70%)
            batch_size = 100
            inserted_count = 0
            
            query = """
                INSERT INTO hosts (hostname, ip_address, cve, cvss, criticality, status, os_name, zone)
                VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
            """
            
            for i in range(0, total_records, batch_size):
                batch_records = valid_records[i:i + batch_size]
                try:
                    await conn.execute("SELECT 1")
                except Exception as e:
                    print(f"Connection lost, reconnecting... Error: {e}")
                    await conn.close()
                    conn = await asyncpg.connect(self.database_url)
                    await conn.execute('SET search_path TO vulnanalizer')
                
                async with conn.transaction():
                    for rec in batch_records:
                        try:
                            await conn.execute(query, 
                                rec['hostname'], rec['ip_address'], rec['cve'], 
                                rec['cvss'], rec['criticality'], rec['status'],
                                rec.get('os_name', ''), rec.get('zone', ''))
                            inserted_count += 1
                            
                            if inserted_count % 10 == 0:
                                progress_percent = 5 + (inserted_count / total_records) * 70
                                if progress_callback:
                                    await progress_callback('inserting', 
                                        f'–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö... ({inserted_count:,}/{total_records:,})', 
                                        progress_percent, 
                                        current_step_progress=inserted_count, 
                                        processed_records=inserted_count)
                            
                        except Exception as e:
                            print(f"Error inserting record for {rec.get('hostname', 'unknown')} ({rec.get('ip_address', 'no-ip')}): {e}")
                            continue
                
                progress_percent = 5 + (inserted_count / total_records) * 70
                if progress_callback:
                    await progress_callback('inserting', 
                        f'–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö... ({inserted_count:,}/{total_records:,})', 
                        progress_percent, 
                        current_step_progress=inserted_count, 
                        processed_records=inserted_count)
                
                print(f"üíæ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {inserted_count:,}/{total_records:,} ({progress_percent:.1f}%)")
            
            # –≠—Ç–∞–ø 3: –ê–Ω–∞–ª–∏–∑ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤ –∏ —Ä–∞—Å—á–µ—Ç —Ä–∏—Å–∫–æ–≤ (25%)
            if progress_callback:
                await progress_callback('calculating_risk', '–ê–Ω–∞–ª–∏–∑ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤ –∏ —Ä–∞—Å—á–µ—Ç —Ä–∏—Å–∫–æ–≤...', 75)
            
            print("üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤ –∏ —Ä–∞—Å—á–µ—Ç —Ä–∏—Å–∫–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤...")
            
            try:
                settings_query = "SELECT key, value FROM settings"
                settings_rows = await conn.fetch(settings_query)
                settings = {row['key']: row['value'] for row in settings_rows}
                print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {len(settings)}")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
                settings = {}
            
            cve_query = """
                SELECT DISTINCT cve FROM hosts 
                WHERE cve IS NOT NULL AND cve != '' 
                ORDER BY cve
            """
            cve_rows = await conn.fetch(cve_query)
            
            if cve_rows:
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(cve_rows)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö CVE –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                
                print(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤ –∏ —Ä–∞—Å—á–µ—Ç —Ä–∏—Å–∫–æ–≤ –¥–ª—è {len(cve_rows)} CVE...")
                
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∏—Å–∫–æ–≤ —Å –∞–Ω–∞–ª–∏–∑–æ–º —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤
                    await self._calculate_risks_with_exploits_during_import(cve_rows, conn, settings, progress_callback)
                    print("‚úÖ –ê–Ω–∞–ª–∏–∑ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤ –∏ —Ä–∞—Å—á–µ—Ç —Ä–∏—Å–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                except Exception as risk_error:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤ –∏ —Ä–∞—Å—á–µ—Ç–µ —Ä–∏—Å–∫–æ–≤: {risk_error}")
                    import traceback
                    print(f"‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
            else:
                print("‚ö†Ô∏è –ù–µ—Ç CVE –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            if progress_callback:
                await progress_callback('completed', '–ò–º–ø–æ—Ä—Ç –∏ —Ä–∞—Å—á–µ—Ç —Ä–∏—Å–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã', 100, 
                                      current_step_progress=inserted_count, 
                                      processed_records=inserted_count)
            
            print("‚úÖ –†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
            print(f"üéØ –ú–µ—Ç–æ–¥ insert_hosts_records_with_progress –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            return inserted_count
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ insert_hosts_records_with_progress: {e}")
            if progress_callback:
                await progress_callback('error', f'–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {str(e)}', 0)
            raise
        finally:
            if conn:
                await conn.close()

    async def _calculate_risks_with_exploits_during_import(self, cve_rows, conn, settings, progress_callback):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∏—Å–∫–æ–≤ –≤–æ –≤—Ä–µ–º—è –∏–º–ø–æ—Ä—Ç–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤"""
        print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤ –∏ —Ä–∞—Å—á–µ—Ç —Ä–∏—Å–∫–æ–≤ –¥–ª—è {len(cve_rows)} CVE")
        
        total_cves = len(cve_rows)
        processed_cves = 0
        error_cves = 0
        updated_hosts = 0
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ EPSS –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        cve_list = [cve_row['cve'] for cve_row in cve_rows]
        epss_query = "SELECT cve, epss, percentile FROM epss WHERE cve = ANY($1::text[])"
        epss_rows = await conn.fetch(epss_query, cve_list)
        epss_data = {row['cve']: row for row in epss_rows}
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ CVSS –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        cve_query = "SELECT cve_id as cve, cvss_v3_base_score, cvss_v2_base_score FROM cve WHERE cve_id = ANY($1::text[])"
        cve_rows_data = await conn.fetch(cve_query, cve_list)
        cve_data = {row['cve']: row for row in cve_rows_data}
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ ExploitDB –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ)
        exploitdb_query = """
            SELECT DISTINCT split_part(codes, ';', 1) as cve_id, COUNT(*) as exploit_count
            FROM exploitdb 
            WHERE codes IS NOT NULL AND codes LIKE 'CVE-%'
            GROUP BY split_part(codes, ';', 1)
            LIMIT 10000
        """
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            import asyncio
            exploitdb_rows = await asyncio.wait_for(conn.fetch(exploitdb_query), timeout=30.0)
            exploitdb_data = {row['cve_id']: row['exploit_count'] for row in exploitdb_rows}
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ExploitDB –¥–∞–Ω–Ω—ã—Ö: {len(exploitdb_data)} CVE —Å —ç–∫—Å–ø–ª–æ–π—Ç–∞–º–∏")
        except asyncio.TimeoutError:
            print("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ExploitDB –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤")
            exploitdb_data = {}
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ExploitDB –¥–∞–Ω–Ω—ã—Ö: {e}")
            exploitdb_data = {}
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ EPSS –¥–∞–Ω–Ω—ã—Ö: {len(epss_data)} –∏–∑ {len(cve_list)} CVE")
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ CVSS –¥–∞–Ω–Ω—ã—Ö: {len(cve_data)} –∏–∑ {len(cve_list)} CVE")
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ExploitDB –¥–∞–Ω–Ω—ã—Ö: {len(exploitdb_data)} CVE —Å —ç–∫—Å–ø–ª–æ–π—Ç–∞–º–∏")
        
        for i, cve_row in enumerate(cve_rows):
            cve = cve_row['cve']
            
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 CVE
                if progress_callback and i % 50 == 0:
                    progress_percent = 75 + (i / total_cves) * 20  # 75-95%
                    await progress_callback('calculating_risk', 
                        f'–†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–æ–≤... ({i+1}/{total_cves} CVE, –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Ö–æ—Å—Ç–æ–≤: {updated_hosts})', 
                        progress_percent, 
                        current_step_progress=i+1, 
                        processed_cves=i+1,
                        updated_hosts=updated_hosts)
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
                epss_row = epss_data.get(cve)
                cve_data_row = cve_data.get(cve)
                exploit_count = exploitdb_data.get(cve, 0)
                has_exploits = exploit_count > 0
                
                if not epss_row or epss_row['epss'] is None:
                    print(f"‚ö†Ô∏è –ù–µ—Ç EPSS –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {cve}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–∂–µ –±–µ–∑ EPSS –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–∫—Å–ø–ª–æ–π—Ç–∞—Ö
                
                # –ü–æ–ª—É—á–∞–µ–º —Ö–æ—Å—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ CVE
                hosts_query = "SELECT id, cvss, criticality FROM hosts WHERE cve = $1"
                hosts_rows = await conn.fetch(hosts_query, cve)
                
                if not hosts_rows:
                    print(f"‚ö†Ô∏è –ù–µ—Ç —Ö–æ—Å—Ç–æ–≤ –¥–ª—è CVE {cve}")
                    continue
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∏—Å–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ö–æ—Å—Ç–∞
                for host_row in hosts_rows:
                    try:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ–æ—Ä–º—É–ª—É —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–∞
                        epss_score = float(epss_row['epss'])
                        criticality = host_row['criticality'] or 'Medium'
                        
                        # –í–µ—Å–∞ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ —Ä–µ—Å—É—Ä—Å–∞ (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
                        resource_weights = {
                            'Critical': 0.33,
                            'High': 0.25,
                            'Medium': 0.15,
                            'Low': 0.1,
                            'None': 0.05
                        }
                        
                        # –í–µ—Å–∞ –¥–ª—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
                        data_weights = {
                            '–ï—Å—Ç—å': 0.33,
                            '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç': 0.1
                        }
                        
                        # –í–µ—Å–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
                        internet_weights = {
                            '–î–æ—Å—Ç—É–ø–µ–Ω': 0.33,
                            '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω': 0.1
                        }
                        
                        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
                        if settings:
                            confidential_data = settings.get('impact_confidential_data', '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç')
                            internet_access = settings.get('impact_internet_access', '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
                        else:
                            confidential_data = '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'
                            internet_access = '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
                        
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º Impact —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
                        impact = (
                            resource_weights.get(criticality, 0.15) +
                            data_weights.get(confidential_data, 0.1) +
                            internet_weights.get(internet_access, 0.1)
                        )
                        
                        # –ü–æ–ª–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–∞ (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
                        raw_risk = epss_score * impact
                        risk_score = min(1, raw_risk) * 100
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º CVSS score (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: CVE v3 > CVE v2 > —Ö–æ—Å—Ç)
                        cvss_score = None
                        cvss_source = None
                        
                        if cve_data_row and cve_data_row['cvss_v3_base_score'] is not None:
                            cvss_score = float(cve_data_row['cvss_v3_base_score'])
                            cvss_source = 'CVSS v3'
                        elif cve_data_row and cve_data_row['cvss_v2_base_score'] is not None:
                            cvss_score = float(cve_data_row['cvss_v2_base_score'])
                            cvss_source = 'CVSS v2'
                        elif host_row['cvss'] is not None:
                            cvss_score = float(host_row['cvss'])
                            cvss_source = 'Host'
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ö–æ—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —ç–∫—Å–ø–ª–æ–π—Ç–∞—Ö
                        update_query = """
                            UPDATE hosts SET
                                cvss = $1,
                                cvss_source = $2,
                                epss_score = $3,
                                epss_percentile = $4,
                                exploits_count = $5,
                                has_exploits = $6,
                                risk_score = $7,
                                risk_raw = $8,
                                epss_updated_at = $9,
                                exploits_updated_at = $10,
                                risk_updated_at = $11
                            WHERE id = $12
                        """
                        
                        await conn.execute(update_query,
                            cvss_score,
                            cvss_source,
                            epss_score,
                            float(epss_row['percentile']) if epss_row['percentile'] else None,
                            exploit_count,
                            has_exploits,
                            risk_score,
                            raw_risk,
                            datetime.now(),
                            datetime.now(),
                            datetime.now(),
                            host_row['id']
                        )
                        
                        updated_hosts += 1
                        
                    except Exception as host_error:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ö–æ—Å—Ç–∞ {host_row['id']} –¥–ª—è {cve}: {host_error}")
                        continue
                
                processed_cves += 1
                
                # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 CVE
                if i % 100 == 0:
                    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i+1}/{total_cves} CVE (–æ—à–∏–±–æ–∫: {error_cves}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Ö–æ—Å—Ç–æ–≤: {updated_hosts})")
                
            except Exception as e:
                error_cves += 1
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ CVE {cve}: {e}")
                continue
        
        print(f"‚úÖ –†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_cves} CVE, –æ—à–∏–±–æ–∫ {error_cves}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Ö–æ—Å—Ç–æ–≤ {updated_hosts}")
        
        if progress_callback:
            await progress_callback('calculating_risk', 
                f'–†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω ({processed_cves}/{total_cves} CVE, –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Ö–æ—Å—Ç–æ–≤: {updated_hosts})', 
                95, 
                current_step_progress=total_cves, 
                processed_records=processed_cves)
    
    async def get_hosts_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ö–æ—Å—Ç–æ–≤"""
        conn = await self.get_connection()
        try:
            stats = {}
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            stats['total'] = await conn.fetchval("SELECT COUNT(*) FROM hosts")
            
            # –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º
            status_query = "SELECT status, COUNT(*) as count FROM hosts GROUP BY status"
            status_rows = await conn.fetch(status_query)
            stats['by_status'] = {row['status']: row['count'] for row in status_rows}
            
            # –ü–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
            criticality_query = "SELECT criticality, COUNT(*) as count FROM hosts GROUP BY criticality"
            criticality_rows = await conn.fetch(criticality_query)
            stats['by_criticality'] = {row['criticality']: row['count'] for row in criticality_rows}
            
            # –ü–æ –∑–æ–Ω–∞–º
            zone_query = "SELECT zone, COUNT(*) as count FROM hosts WHERE zone IS NOT NULL AND zone != '' GROUP BY zone"
            zone_rows = await conn.fetch(zone_query)
            stats['by_zone'] = {row['zone']: row['count'] for row in zone_rows}
            
            return stats
        finally:
            await self.release_connection(conn)

    async def count_hosts_records(self):
        """–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π —Ö–æ—Å—Ç–æ–≤ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        return await self.get_hosts_count()

    async def search_hosts(self, hostname_pattern: str = None, cve: str = None, ip_address: str = None, criticality: str = None, exploits_only: bool = False, epss_only: bool = False, sort_by: str = None, limit: int = 100, page: int = 1):
        """–ü–æ–∏—Å–∫ —Ö–æ—Å—Ç–æ–≤ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        conn = await self.get_connection()
        try:
            conditions = []
            params = []
            param_count = 0
            
            if hostname_pattern:
                param_count += 1
                # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–∞—Å–∫–∏ * –¥–ª—è hostname
                pattern = hostname_pattern.replace('*', '%')
                if '%' not in pattern:
                    pattern = f"%{pattern}%"
                conditions.append(f"hostname ILIKE ${param_count}")
                params.append(pattern)
            
            if cve:
                param_count += 1
                # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —á–∞—Å—Ç–∏ CVE ID
                cve_pattern = cve.upper()
                if not cve_pattern.startswith('CVE-'):
                    # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä, –¥–æ–±–∞–≤–ª—è–µ–º CVE- –ø—Ä–µ—Ñ–∏–∫—Å
                    if cve_pattern.isdigit():
                        cve_pattern = f"CVE-%{cve_pattern}%"
                    else:
                        cve_pattern = f"%{cve_pattern}%"
                else:
                    # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω –ø–æ–ª–Ω—ã–π CVE, –¥–µ–ª–∞–µ–º —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫
                    cve_pattern = f"{cve_pattern}%"
                conditions.append(f"cve ILIKE ${param_count}")
                params.append(cve_pattern)
            
            if ip_address:
                param_count += 1
                conditions.append(f"CAST(ip_address AS TEXT) ILIKE ${param_count}")
                params.append(f"%{ip_address}%")
            
            if criticality:
                param_count += 1
                conditions.append(f"criticality = ${param_count}")
                params.append(criticality)
            
            if exploits_only:
                conditions.append("has_exploits = TRUE")
            
            if epss_only:
                conditions.append("epss_score IS NOT NULL")
            
            where_clause = " AND ".join(conditions) if conditions else "1=1"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
            order_clause = "ORDER BY hostname, cve"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if sort_by:
                if sort_by == "risk_score_desc":
                    order_clause = "ORDER BY risk_score DESC NULLS LAST, hostname, cve"
                elif sort_by == "risk_score_asc":
                    order_clause = "ORDER BY risk_score ASC NULLS LAST, hostname, cve"
                elif sort_by == "cvss_desc":
                    order_clause = "ORDER BY cvss DESC NULLS LAST, hostname, cve"
                elif sort_by == "cvss_asc":
                    order_clause = "ORDER BY cvss ASC NULLS LAST, hostname, cve"
                elif sort_by == "epss_score_desc":
                    order_clause = "ORDER BY epss_score DESC NULLS LAST, hostname, cve"
                elif sort_by == "epss_score_asc":
                    order_clause = "ORDER BY epss_score ASC NULLS LAST, hostname, cve"
                elif sort_by == "exploits_count_desc":
                    order_clause = "ORDER BY exploits_count DESC NULLS LAST, hostname, cve"
                elif sort_by == "exploits_count_asc":
                    order_clause = "ORDER BY exploits_count ASC NULLS LAST, hostname, cve"
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            count_query = f"SELECT COUNT(*) FROM hosts WHERE {where_clause}"
            total_count = await conn.fetchval(count_query, *params)
            
            # –ó–∞—Ç–µ–º –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
            offset = (page - 1) * limit
            query = f"""
                SELECT id, hostname, ip_address, cve, cvss, cvss_source, criticality, status,
                       os_name, zone, epss_score, epss_percentile, risk_score, risk_raw, impact_score,
                       exploits_count, verified_exploits_count, has_exploits, last_exploit_date,
                       epss_updated_at, exploits_updated_at, risk_updated_at, created_at
                FROM hosts 
                WHERE {where_clause}
                {order_clause}
                LIMIT {limit} OFFSET {offset}
            """
            
            rows = await conn.fetch(query, *params)
            
            results = []
            for row in rows:
                results.append({
                    'id': row['id'],
                    'hostname': row['hostname'],
                    'ip_address': row['ip_address'],
                    'cve': row['cve'],
                    'cvss': float(row['cvss']) if row['cvss'] else None,
                    'cvss_source': row['cvss_source'],
                    'criticality': row['criticality'],
                    'status': row['status'],
                    'os_name': row['os_name'],
                    'zone': row['zone'],
                    'epss_score': float(row['epss_score']) if row['epss_score'] else None,
                    'epss_percentile': float(row['epss_percentile']) if row['epss_percentile'] else None,
                    'risk_score': float(row['risk_score']) if row['risk_score'] else None,
                    'risk_raw': float(row['risk_raw']) if row['risk_raw'] else None,
                    'impact_score': float(row['impact_score']) if row['impact_score'] else None,
                    'exploits_count': row['exploits_count'],
                    'verified_exploits_count': row['verified_exploits_count'],
                    'has_exploits': row['has_exploits'],
                    'last_exploit_date': row['last_exploit_date'].isoformat() if row['last_exploit_date'] else None,
                    'epss_updated_at': row['epss_updated_at'].isoformat() if row['epss_updated_at'] else None,
                    'exploits_updated_at': row['exploits_updated_at'].isoformat() if row['exploits_updated_at'] else None,
                    'risk_updated_at': row['risk_updated_at'].isoformat() if row['risk_updated_at'] else None,
                    'imported_at': row['created_at'].isoformat() if row['created_at'] else None
                })
            
            return results, total_count
        except Exception as e:
            print(f"Error searching hosts: {e}")
            return [], 0
        finally:
            await self.release_connection(conn)

    async def get_host_by_id(self, host_id: int):
        """–ü–æ–ª—É—á–∏—Ç—å —Ö–æ—Å—Ç –ø–æ ID —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        conn = await self.get_connection()
        try:
            query = """
                SELECT id, hostname, ip_address, cve, cvss, criticality, status,
                       os_name, zone, epss_score, epss_percentile, risk_score, risk_raw, impact_score,
                       exploits_count, verified_exploits_count, has_exploits, last_exploit_date,
                       epss_updated_at, exploits_updated_at, risk_updated_at, created_at
                FROM hosts 
                WHERE id = $1
            """
            row = await conn.fetchrow(query, host_id)
            
            if row:
                return {
                    'id': row['id'],
                    'hostname': row['hostname'],
                    'ip_address': row['ip_address'],
                    'cve': row['cve'],
                    'cvss': float(row['cvss']) if row['cvss'] else None,
                    'criticality': row['criticality'],
                    'status': row['status'],
                    'os_name': row['os_name'],
                    'zone': row['zone'],
                    'epss_score': float(row['epss_score']) if row['epss_score'] else None,
                    'epss_percentile': float(row['epss_percentile']) if row['epss_percentile'] else None,
                    'risk_score': float(row['risk_score']) if row['risk_score'] else None,
                    'risk_raw': float(row['risk_raw']) if row['risk_raw'] else None,
                    'impact_score': float(row['impact_score']) if row['impact_score'] else None,
                    'exploits_count': row['exploits_count'],
                    'verified_exploits_count': row['verified_exploits_count'],
                    'has_exploits': row['has_exploits'],
                    'last_exploit_date': row['last_exploit_date'].isoformat() if row['last_exploit_date'] else None,
                    'epss_updated_at': row['epss_updated_at'].isoformat() if row['epss_updated_at'] else None,
                    'exploits_updated_at': row['exploits_updated_at'].isoformat() if row['exploits_updated_at'] else None,
                    'risk_updated_at': row['risk_updated_at'].isoformat() if row['risk_updated_at'] else None,
                    'imported_at': row['created_at'].isoformat() if row['created_at'] else None
                }
            return None
        except Exception as e:
            print(f"Error getting host by ID {host_id}: {e}")
            return None
        finally:
            await self.release_connection(conn)

    async def clear_hosts(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —Ö–æ—Å—Ç–æ–≤"""
        conn = await self.get_connection()
        try:
            query = "DELETE FROM hosts"
            await conn.execute(query)
            print("Hosts table cleared successfully")
        except Exception as e:
            print(f"Error clearing hosts table: {e}")
            raise e
        finally:
            await self.release_connection(conn)

    async def import_vm_hosts(self, hosts_data: list):
        """–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ö–æ—Å—Ç—ã –∏–∑ VM MaxPatrol"""
        conn = await self.get_connection()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–æ –∏–º–ø–æ—Ä—Ç–∞
            count_before = await conn.fetchval("SELECT COUNT(*) FROM hosts")
            print(f"Hosts records in database before VM import: {count_before}")
            
            async with conn.transaction():
                inserted_count = 0
                updated_count = 0
                
                for host_data in hosts_data:
                    # –ü–∞—Ä—Å–∏–º hostname –∏ IP –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "hostname (IP)"
                    host_info = host_data.get('hostname', '')
                    ip_address = ''
                    hostname = host_info
                    
                    if '(' in host_info and ')' in host_info:
                        parts = host_info.split('(')
                        hostname = parts[0].strip()
                        ip_address = parts[1].rstrip(')').strip()
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º CVE –∏–∑ –¥–∞–Ω–Ω—ã—Ö
                    cve = host_data.get('cve', '').strip()
                    if not cve:
                        continue
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å –∏–∑ VM –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –û–°
                    vm_criticality = host_data.get('criticality', '').strip()
                    os_name = host_data.get('os_name', '').lower()
                    
                    if vm_criticality and vm_criticality in ['Critical', 'High', 'Medium', 'Low']:
                        criticality = vm_criticality
                    else:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –û–° –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –≤ VM
                        criticality = 'Medium'
                        if 'windows' in os_name:
                            criticality = 'High'
                        elif 'rhel' in os_name or 'centos' in os_name:
                            criticality = 'High'
                        elif 'ubuntu' in os_name or 'debian' in os_name:
                            criticality = 'Medium'
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ —Ö–æ—Å—Ç–∞ –∏ CVE
                    existing = await conn.fetchval(
                        "SELECT id FROM hosts WHERE hostname = $1 AND cve = $2", 
                        hostname, cve
                    )
                    
                    if existing:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                        query = """
                            UPDATE hosts 
                            SET ip_address = $2, os_name = $3, criticality = $4, 
                                zone = $5, status = $6, updated_at = CURRENT_TIMESTAMP
                            WHERE hostname = $1 AND cve = $7
                        """
                        await conn.execute(query, 
                            hostname, ip_address, host_data.get('os_name', ''), 
                            criticality, host_data.get('zone', ''), 'Active', cve)
                        updated_count += 1
                    else:
                        # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                        query = """
                            INSERT INTO hosts (hostname, ip_address, cve, cvss, criticality, status, os_name, zone)
                            VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
                        """
                        await conn.execute(query, 
                            hostname, ip_address, cve, None, criticality, 'Active', 
                            host_data.get('os_name', ''), host_data.get('zone', ''))
                        inserted_count += 1
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞
                count_after = await conn.fetchval("SELECT COUNT(*) FROM hosts")
                print(f"Hosts records in database after VM import: {count_after}")
                print(f"New hosts records inserted: {inserted_count}")
                print(f"Existing hosts records updated: {updated_count}")
                print(f"Total VM hosts processed: {len(hosts_data)}")
                print(f"Net change in hosts database: {count_after - count_before}")
                
                return {
                    'inserted': inserted_count,
                    'updated': updated_count,
                    'total_processed': len(hosts_data),
                    'net_change': count_after - count_before
                }
                
        finally:
            await self.release_connection(conn)

    async def get_vm_import_status(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ VM"""
        conn = await self.get_connection()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –æ –∏–º–ø–æ—Ä—Ç–µ
            query = """
                SELECT key, value, updated_at 
                FROM settings 
                WHERE key IN ('vm_last_import', 'vm_last_import_count', 'vm_last_import_error')
                ORDER BY updated_at DESC
                LIMIT 1
            """
            rows = await conn.fetch(query)
            
            status = {
                'last_import': None,
                'last_import_count': 0,
                'last_import_error': None,
                'vm_enabled': False
            }
            
            for row in rows:
                if row['key'] == 'vm_last_import':
                    status['last_import'] = row['updated_at']
                elif row['key'] == 'vm_last_import_count':
                    status['last_import_count'] = int(row['value']) if row['value'].isdigit() else 0
                elif row['key'] == 'vm_last_import_error':
                    status['last_import_error'] = row['value']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ VM –∏–º–ø–æ—Ä—Ç
            vm_enabled = await conn.fetchval("SELECT value FROM settings WHERE key = 'vm_enabled'")
            status['vm_enabled'] = vm_enabled == 'true' if vm_enabled else False
            
            return status
        finally:
            await self.release_connection(conn)

    async def update_vm_import_status(self, count: int, error: str = None):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–º–ø–æ—Ä—Ç–∞ VM"""
        conn = await self.get_connection()
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
            await conn.execute(
                "INSERT INTO settings (key, value) VALUES ('vm_last_import_count', $1) ON CONFLICT (key) DO UPDATE SET value = $1, updated_at = CURRENT_TIMESTAMP",
                str(count)
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
            await conn.execute(
                "INSERT INTO settings (key, value) VALUES ('vm_last_import', CURRENT_TIMESTAMP::text) ON CONFLICT (key) DO UPDATE SET value = CURRENT_TIMESTAMP::text, updated_at = CURRENT_TIMESTAMP"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
            if error:
                await conn.execute(
                    "INSERT INTO settings (key, value) VALUES ('vm_last_import_error', $1) ON CONFLICT (key) DO UPDATE SET value = $1, updated_at = CURRENT_TIMESTAMP",
                    error
                )
            else:
                # –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –∏–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω
                await conn.execute("DELETE FROM settings WHERE key = 'vm_last_import_error'")
                
        finally:
            await self.release_connection(conn)
