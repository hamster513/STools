"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ –±–æ–ª—å—à–∏—Ö JSON —Ñ–∞–π–ª–æ–≤ –Ω–∞ —á–∞—Å—Ç–∏
"""
import json
import os
import ijson
from typing import List, Dict, Any
from pathlib import Path


class JSONSplitter:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ –±–æ–ª—å—à–∏—Ö JSON —Ñ–∞–π–ª–æ–≤ –Ω–∞ —á–∞—Å—Ç–∏"""
    
    def __init__(self, records_per_file: int = 10000):
        self.records_per_file = records_per_file
    
    def split_json_file(self, input_file: str, output_dir: str) -> List[str]:
        """
        –†–∞–∑–±–∏—Ç—å JSON —Ñ–∞–π–ª –Ω–∞ —á–∞—Å—Ç–∏ —Å –ø–æ—Ç–æ–∫–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        
        Args:
            input_file: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É JSON —Ñ–∞–π–ª—É
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Å—Ç–µ–π
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Å–æ–∑–¥–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            Path(output_dir).mkdir(parents=True, exist_ok=True)
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            base_name = Path(input_file).stem
            
            part_num = 1
            current_records = []
            created_files = []
            
            print(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–±–∏–≤–∫—É —Ñ–∞–π–ª–∞ {input_file}")
            print(f"üìä –ó–∞–ø–∏—Å–µ–π –≤ —á–∞—Å—Ç–∏: {self.records_per_file}")
            
            with open(input_file, 'rb') as f:
                parser = ijson.items(f, 'item')
                
                for item in parser:
                    current_records.append(item)
                    
                    # –ï—Å–ª–∏ –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–ø–∏—Å–µ–π, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å—Ç—å
                    if len(current_records) >= self.records_per_file:
                        output_file = os.path.join(output_dir, f"{base_name}_part_{part_num:03d}.json")
                        
                        with open(output_file, 'w', encoding='utf-8') as out_f:
                            json.dump(current_records, out_f, ensure_ascii=False, indent=2)
                        
                        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —á–∞—Å—Ç—å {part_num}: {output_file} ({len(current_records)} –∑–∞–ø–∏—Å–µ–π)")
                        created_files.append(output_file)
                        
                        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±—É—Ñ–µ—Ä –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                        current_records = []
                        part_num += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø–∏—Å–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if current_records:
                output_file = os.path.join(output_dir, f"{base_name}_part_{part_num:03d}.json")
                
                with open(output_file, 'w', encoding='utf-8') as out_f:
                    json.dump(current_records, out_f, ensure_ascii=False, indent=2)
                
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å {part_num}: {output_file} ({len(current_records)} –∑–∞–ø–∏—Å–µ–π)")
                created_files.append(output_file)
            
            print(f"üéâ –†–∞–∑–±–∏–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–æ–∑–¥–∞–Ω–æ {len(created_files)} —á–∞—Å—Ç–µ–π")
            return created_files
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–∏–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            raise Exception(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–∏–≤–∫–∏ JSON —Ñ–∞–π–ª–∞: {str(e)}")
    
    def get_file_info(self, file_path: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ"""
        try:
            file_size = os.path.getsize(file_path)
            
            # –ë—ã—Å—Ç—Ä–æ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            with open(file_path, 'rb') as f:
                parser = ijson.items(f, 'item')
                record_count = sum(1 for _ in parser)
            
            return {
                'file_path': file_path,
                'file_size_bytes': file_size,
                'file_size_mb': round(file_size / (1024 * 1024), 2),
                'record_count': record_count
            }
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ: {e}")
            return {
                'file_path': file_path,
                'file_size_bytes': 0,
                'file_size_mb': 0,
                'record_count': 0
            }


def split_vm_data_file(input_file: str, output_dir: str = None, records_per_file: int = 10000) -> List[str]:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ VM –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        input_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É VM –¥–∞–Ω–Ω—ã—Ö
        output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —á–∞—Å—Ç–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—è–¥–æ–º —Å –∏—Å—Ö–æ–¥–Ω—ã–º —Ñ–∞–π–ª–æ–º)
        records_per_file: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —á–∞—Å—Ç–∏
        
    Returns:
        –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Å–æ–∑–¥–∞–Ω–Ω—ã–º —á–∞—Å—Ç—è–º
    """
    if output_dir is None:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ä—è–¥–æ–º —Å –∏—Å—Ö–æ–¥–Ω—ã–º —Ñ–∞–π–ª–æ–º
        input_path = Path(input_file)
        output_dir = input_path.parent / f"{input_path.stem}_parts"
    
    splitter = JSONSplitter(records_per_file)
    return splitter.split_json_file(input_file, str(output_dir))


if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    import sys
    
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python json_splitter.py <input_file> [output_dir] [records_per_file]")
        sys.exit(1)
    
    input_file = sys.argv[1]
    output_dir = sys.argv[2] if len(sys.argv) > 2 else None
    records_per_file = int(sys.argv[3]) if len(sys.argv) > 3 else 10000
    
    try:
        created_files = split_vm_data_file(input_file, output_dir, records_per_file)
        print(f"\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        for file_path in created_files:
            print(f"  - {file_path}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)
