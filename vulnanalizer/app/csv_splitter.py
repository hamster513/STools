#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –±–æ–ª—å—à–∏—Ö CSV —Ñ–∞–π–ª–æ–≤ –Ω–∞ —á–∞—Å—Ç–∏
"""

import csv
import os
import sys
import argparse
from pathlib import Path

def split_csv_file(input_file, output_dir, lines_per_file=1000000, delimiter=';'):
    """
    –†–∞–∑–¥–µ–ª–∏—Ç—å CSV —Ñ–∞–π–ª –Ω–∞ —á–∞—Å—Ç–∏
    
    Args:
        input_file (str): –ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É CSV —Ñ–∞–π–ª—É
        output_dir (str): –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Å—Ç–µ–π
        lines_per_file (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –∫–∞–∂–¥–æ–º —Ñ–∞–π–ª–µ
        delimiter (str): –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å CSV
    """
    
    # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    output_path = Path(output_dir)
    output_path.mkdir(parents=True, exist_ok=True)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    input_path = Path(input_file)
    base_name = input_path.stem
    
    # –ß–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    with open(input_file, 'r', encoding='utf-8-sig') as f:
        reader = csv.reader(f, delimiter=delimiter)
        headers = next(reader)  # –ß–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    
    # –°—á–µ—Ç—á–∏–∫–∏
    total_lines = 0
    file_number = 1
    current_lines = 0
    current_file = None
    current_writer = None
    
    print(f"üìÅ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {input_file}")
    print(f"üìä –†–∞–∑–º–µ—Ä —á–∞—Å—Ç–∏: {lines_per_file:,} —Å—Ç—Ä–æ–∫")
    print(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏: {', '.join(headers)}")
    
    # –ß–∏—Ç–∞–µ–º –∏ —Ä–∞–∑–¥–µ–ª—è–µ–º —Ñ–∞–π–ª
    with open(input_file, 'r', encoding='utf-8-sig') as f:
        reader = csv.reader(f, delimiter=delimiter)
        next(reader)  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (—É–∂–µ –ø—Ä–æ—á–∏—Ç–∞–ª–∏)
        
        for row in reader:
            # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª
            if current_lines == 0:
                if current_file:
                    current_file.close()
                
                output_file = output_path / f"{base_name}_part_{file_number:03d}.csv"
                current_file = open(output_file, 'w', newline='', encoding='utf-8-sig')
                current_writer = csv.writer(current_file, delimiter=delimiter)
                current_writer.writerow(headers)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                
                print(f"üìÑ –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª: {output_file.name}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É
            current_writer.writerow(row)
            current_lines += 1
            total_lines += 1
            
            # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ —Å—Ç—Ä–æ–∫, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ñ–∞–π–ª—É
            if current_lines >= lines_per_file:
                print(f"‚úÖ –§–∞–π–ª {output_file.name} –∑–∞–≤–µ—Ä—à–µ–Ω: {current_lines:,} —Å—Ç—Ä–æ–∫")
                current_lines = 0
                file_number += 1
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª
    if current_file:
        current_file.close()
        print(f"‚úÖ –§–∞–π–ª {output_file.name} –∑–∞–≤–µ—Ä—à–µ–Ω: {current_lines:,} —Å—Ç—Ä–æ–∫")
    
    print(f"\nüéâ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {total_lines:,}")
    print(f"üìÅ –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {file_number - 1}")
    print(f"üìÇ –í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {output_dir}")
    
    return file_number - 1

def main():
    parser = argparse.ArgumentParser(description='–†–∞–∑–¥–µ–ª–∏—Ç—å –±–æ–ª—å—à–æ–π CSV —Ñ–∞–π–ª –Ω–∞ —á–∞—Å—Ç–∏')
    parser.add_argument('input_file', help='–ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É CSV —Ñ–∞–π–ª—É')
    parser.add_argument('output_dir', help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Å—Ç–µ–π')
    parser.add_argument('--lines', '-l', type=int, default=1000000, 
                       help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –∫–∞–∂–¥–æ–º —Ñ–∞–π–ª–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1,000,000)')
    parser.add_argument('--delimiter', '-d', default=';', 
                       help='–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å CSV (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ;)')
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    if not os.path.exists(args.input_file):
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª {args.input_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        sys.exit(1)
    
    try:
        num_files = split_csv_file(args.input_file, args.output_dir, args.lines, args.delimiter)
        print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print(f"   - –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ —Ñ–∞–π–ª—ã –ø–æ –æ–¥–Ω–æ–º—É")
        print(f"   - –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–º–ø–æ—Ä—Ç–∞")
        print(f"   - –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä —á–∞—Å—Ç–∏")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()
