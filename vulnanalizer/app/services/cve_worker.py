#!/usr/bin/env python3
"""
Worker –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ CVE –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import aiohttp
import gzip
import io
import json
from datetime import datetime
from typing import List, Dict, Optional
from database import get_db
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º parse_cve_json –Ω–∞–ø—Ä—è–º—É—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
def parse_cve_json(data):
    """–ü–∞—Ä—Å–∏—Ç—å JSON –¥–∞–Ω–Ω—ã–µ CVE (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã 1.1 –∏ 2.0)"""
    import json
    records = []
    
    try:
        cve_data = json.loads(data)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç CVE
        if 'CVE_Items' in cve_data:
            # –§–æ—Ä–º–∞—Ç CVE 1.1
            cve_items = cve_data.get('CVE_Items', [])
            format_version = "1.1"
        elif 'vulnerabilities' in cve_data:
            # –§–æ—Ä–º–∞—Ç CVE 2.0
            cve_items = cve_data.get('vulnerabilities', [])
            format_version = "2.0"
        else:
            raise Exception("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç CVE –¥–∞–Ω–Ω—ã—Ö")
        
        print(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º CVE —Ñ–æ—Ä–º–∞—Ç {format_version}, –Ω–∞–π–¥–µ–Ω–æ {len(cve_items)} –∑–∞–ø–∏—Å–µ–π")
        
        for item in cve_items:
            try:
                if format_version == "1.1":
                    # –§–æ—Ä–º–∞—Ç CVE 1.1
                    cve_info = item.get('cve', {})
                    cve_id = cve_info.get('CVE_data_meta', {}).get('ID')
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
                    description = ""
                    description_data = cve_info.get('description', {}).get('description_data', [])
                    for desc in description_data:
                        if desc.get('lang') == 'en':
                            description = desc.get('value', '')
                            break
                else:
                    # –§–æ—Ä–º–∞—Ç CVE 2.0
                    cve_info = item.get('cve', {})
                    cve_id = cve_info.get('id')
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
                    description = ""
                    descriptions = cve_info.get('descriptions', [])
                    for desc in descriptions:
                        if desc.get('lang') == 'en':
                            description = desc.get('value', '')
                            break
                
                if not cve_id:
                    continue
                
                # –ü–∞—Ä—Å–∏–º CVSS –¥–∞–Ω–Ω—ã–µ
                cvss_v3_base_score = None
                cvss_v3_base_severity = None
                cvss_v3_attack_vector = None
                cvss_v3_privileges_required = None
                cvss_v3_user_interaction = None
                cvss_v3_confidentiality_impact = None
                cvss_v3_integrity_impact = None
                cvss_v3_availability_impact = None
                
                cvss_v2_base_score = None
                cvss_v2_base_severity = None
                cvss_v2_access_vector = None
                cvss_v2_access_complexity = None
                cvss_v2_authentication = None
                cvss_v2_confidentiality_impact = None
                cvss_v2_integrity_impact = None
                cvss_v2_availability_impact = None
                
                if format_version == "1.1":
                    # –§–æ—Ä–º–∞—Ç CVE 1.1
                    impact = item.get('impact', {})
                    
                    # CVSS v3.1
                    if 'baseMetricV3' in impact:
                        cvss_v3 = impact['baseMetricV3'].get('cvssV3', {})
                        cvss_v3_base_score = cvss_v3.get('baseScore')
                        cvss_v3_base_severity = cvss_v3.get('baseSeverity')
                    
                    # CVSS v2
                    if 'baseMetricV2' in impact:
                        cvss_v2 = impact['baseMetricV2'].get('cvssV2', {})
                        cvss_v2_base_score = cvss_v2.get('baseScore')
                        cvss_v2_base_severity = cvss_v2.get('baseSeverity')
                else:
                    # –§–æ—Ä–º–∞—Ç CVE 2.0
                    metrics = cve_info.get('metrics', {})
                    
                    # CVSS v3.1 (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç) –∏–ª–∏ v3.0
                    cvss_v3_metric = None
                    if 'cvssMetricV31' in metrics and metrics['cvssMetricV31']:
                        cvss_v3_metric = metrics['cvssMetricV31'][0]
                    elif 'cvssMetricV30' in metrics and metrics['cvssMetricV30']:
                        cvss_v3_metric = metrics['cvssMetricV30'][0]
                    
                    if cvss_v3_metric:
                        cvss_v3_data = cvss_v3_metric.get('cvssData', {})
                        cvss_v3_base_score = cvss_v3_data.get('baseScore')
                        cvss_v3_base_severity = cvss_v3_data.get('baseSeverity')  # –í cvssData
                        cvss_v3_attack_vector = cvss_v3_data.get('attackVector')
                        cvss_v3_privileges_required = cvss_v3_data.get('privilegesRequired')
                        cvss_v3_user_interaction = cvss_v3_data.get('userInteraction')
                        cvss_v3_confidentiality_impact = cvss_v3_data.get('confidentialityImpact')
                        cvss_v3_integrity_impact = cvss_v3_data.get('integrityImpact')
                        cvss_v3_availability_impact = cvss_v3_data.get('availabilityImpact')
                    
                    # CVSS v2
                    if 'cvssMetricV2' in metrics and metrics['cvssMetricV2']:
                        cvss_v2_metric = metrics['cvssMetricV2'][0]
                        cvss_v2_data = cvss_v2_metric.get('cvssData', {})
                        cvss_v2_base_score = cvss_v2_data.get('baseScore')
                        cvss_v2_base_severity = cvss_v2_metric.get('baseSeverity')  # –ù–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
                        cvss_v2_access_vector = cvss_v2_data.get('accessVector')
                        cvss_v2_access_complexity = cvss_v2_data.get('accessComplexity')
                        cvss_v2_authentication = cvss_v2_data.get('authentication')
                        cvss_v2_confidentiality_impact = cvss_v2_data.get('confidentialityImpact')
                        cvss_v2_integrity_impact = cvss_v2_data.get('integrityImpact')
                        cvss_v2_availability_impact = cvss_v2_data.get('availabilityImpact')
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
                record = {
                    'cve_id': cve_id,
                    'description': description,
                    'cvss_v3_base_score': cvss_v3_base_score,
                    'cvss_v3_base_severity': cvss_v3_base_severity,
                    'cvss_v3_attack_vector': cvss_v3_attack_vector,
                    'cvss_v3_privileges_required': cvss_v3_privileges_required,
                    'cvss_v3_user_interaction': cvss_v3_user_interaction,
                    'cvss_v3_confidentiality_impact': cvss_v3_confidentiality_impact,
                    'cvss_v3_integrity_impact': cvss_v3_integrity_impact,
                    'cvss_v3_availability_impact': cvss_v3_availability_impact,
                    'cvss_v2_base_score': cvss_v2_base_score,
                    'cvss_v2_base_severity': cvss_v2_base_severity,
                    'cvss_v2_access_vector': cvss_v2_access_vector,
                    'cvss_v2_access_complexity': cvss_v2_access_complexity,
                    'cvss_v2_authentication': cvss_v2_authentication,
                    'cvss_v2_confidentiality_impact': cvss_v2_confidentiality_impact,
                    'cvss_v2_integrity_impact': cvss_v2_integrity_impact,
                    'cvss_v2_availability_impact': cvss_v2_availability_impact,
                    'published_date': item.get('publishedDate') or cve_info.get('published'),
                    'last_modified_date': item.get('lastModifiedDate') or cve_info.get('lastModified')
                }
                
                records.append(record)
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ CVE –∑–∞–ø–∏—Å–∏: {e}")
                continue
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(records)} CVE –∑–∞–ø–∏—Å–µ–π")
        return records
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ CVE JSON: {e}")
        return []


class CVEWorker:
    def __init__(self):
        self.db = get_db()
        self.is_running = False
        self.current_task_id = None
        self.selected_years = []
        
    async def start_download(self, years: List[int], task_id: int) -> Dict:
        """–ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ CVE –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ª–µ—Ç"""
        self.is_running = True
        self.current_task_id = task_id
        self.selected_years = sorted(years, reverse=True)  # –°–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ –≥–æ–¥—ã
        
        try:
            total_records = 0
            total_files = len(self.selected_years)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
            await self.db.update_background_task(
                task_id,
                status='running',
                current_step='–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏',
                total_items=total_files,
                processed_items=0,
                progress_percent=0
            )
            
            for i, year in enumerate(self.selected_years):
                if not self.is_running:
                    await self.db.update_background_task(
                        task_id,
                        status='cancelled',
                        current_step='–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'
                    )
                    return {"success": False, "message": "–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"}
                
                try:
                    # –≠—Ç–∞–ø A: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫–æ–π —Ñ–∞–π–ª –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
                    current_file = f"nvdcve-2.0-{year}.json.gz"
                    remaining_files = total_files - i - 1
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    progress = (i * 100) // total_files
                    await self.db.update_background_task(
                        task_id,
                        current_step=f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {current_file}",
                        details=f"–û—Å—Ç–∞–ª–æ—Å—å —Ñ–∞–π–ª–æ–≤: {remaining_files}",
                        processed_items=i,
                        total_items=total_files,
                        progress_percent=progress
                    )
                    
                    # –≠—Ç–∞–ø B: –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ö–∏–≤–∞ —Å —Å–∞–π—Ç–∞
                    url = f"https://nvd.nist.gov/feeds/json/cve/2.0/nvdcve-2.0-{year}.json.gz"
                    
                    await self.db.update_background_task(
                        task_id,
                        current_step=f"–ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ö–∏–≤–∞: {current_file}",
                        details=f"URL: {url}"
                    )
                    
                    timeout = aiohttp.ClientTimeout(total=600, connect=60)
                    async with aiohttp.ClientSession(timeout=timeout) as session:
                        async with session.get(url) as resp:
                            if resp.status != 200:
                                error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {year}: HTTP {resp.status}"
                                await self.db.update_background_task(
                                    task_id,
                                    current_step=f"–û—à–∏–±–∫–∞: {error_msg}",
                                    details="–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º"
                                )
                                continue
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
                            content_length = resp.headers.get('content-length')
                            if content_length:
                                await self.db.update_background_task(
                                    task_id,
                                    current_step=f"–ó–∞–≥—Ä—É–∑–∫–∞: {current_file}",
                                    details=f"–†–∞–∑–º–µ—Ä: {int(content_length):,} –±–∞–π—Ç"
                                )
                            
                            gz_content = await resp.read()
                            
                            await self.db.update_background_task(
                                task_id,
                                current_step=f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {current_file}",
                                details=f"–ü–æ–ª—É—á–µ–Ω–æ: {len(gz_content):,} –±–∞–π—Ç"
                            )
                    
                    # –≠—Ç–∞–ø C: –†–∞–∑–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ
                    await self.db.update_background_task(
                        task_id,
                        current_step=f"–†–∞–∑–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ: {current_file}",
                        details="–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∂–∞—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö..."
                    )
                    
                    with gzip.GzipFile(fileobj=io.BytesIO(gz_content)) as gz:
                        content = gz.read().decode('utf-8')
                    
                    await self.db.update_background_task(
                        task_id,
                        current_step=f"–†–∞–∑–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {current_file}",
                        details=f"–†–∞–∑–º–µ—Ä: {len(content):,} —Å–∏–º–≤–æ–ª–æ–≤"
                    )
                    
                    # –≠—Ç–∞–ø D: –ü–∞—Ä—Å–∏–Ω–≥ JSON
                    await self.db.update_background_task(
                        task_id,
                        current_step=f"–ü–∞—Ä—Å–∏–Ω–≥ JSON: {current_file}",
                        details="–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ CVE –∑–∞–ø–∏—Å–µ–π..."
                    )
                    
                    records = parse_cve_json(content)
                    
                    if records:
                        await self.db.update_background_task(
                            task_id,
                            current_step=f"–ù–∞–π–¥–µ–Ω–æ CVE: {current_file}",
                            details=f"–ó–∞–ø–∏—Å–µ–π: {len(records):,}"
                        )
                        
                        # –≠—Ç–∞–ø E: –£–∫–ª–∞–¥–∫–∞ –≤ –±–∞–∑—É
                        await self.db.update_background_task(
                            task_id,
                            current_step=f"–ó–∞–≥—Ä—É–∑–∫–∞ –≤ –ë–î: {current_file}",
                            details=f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ: 0/{len(records):,}"
                        )
                        
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–ø–∏—Å–∏ –±–∞—Ç—á–∞–º–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                        batch_size = 1000
                        for j in range(0, len(records), batch_size):
                            if not self.is_running:
                                break
                                
                            batch = records[j:j + batch_size]
                            await self.db.insert_cve_records(batch)
                            
                            loaded = min(j + batch_size, len(records))
                            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞ (50-90% –æ—Ç –æ–±—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞)
                            file_progress = 50 + (loaded * 40) // len(records)
                            total_progress = (i * 100 + file_progress) // total_files
                            await self.db.update_background_task(
                                task_id,
                                current_step=f"–ó–∞–≥—Ä—É–∑–∫–∞ –≤ –ë–î: {current_file}",
                                details=f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ: {loaded:,}/{len(records):,}",
                                progress_percent=total_progress
                            )
                        
                        total_records += len(records)
                        
                        await self.db.update_background_task(
                            task_id,
                            current_step=f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {current_file}",
                            details=f"–í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {total_records:,} CVE"
                        )
                    else:
                        await self.db.update_background_task(
                            task_id,
                            current_step=f"–ü—É—Å—Ç–æ–π —Ñ–∞–π–ª: {current_file}",
                            details="CVE –∑–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                        )
                
                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {year}: {str(e)}"
                    await self.db.update_background_task(
                        task_id,
                        current_step=f"–û—à–∏–±–∫–∞: {error_msg}",
                        details="–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º"
                    )
                    continue
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            if self.is_running:
                await self.db.update_background_task(
                    task_id,
                    status='completed',
                    current_step='–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
                    details=f"–í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {total_records:,} CVE –∏–∑ {total_files} —Ñ–∞–π–ª–æ–≤",
                    total_records=total_records,
                    updated_records=total_records,
                    progress_percent=100
                )
                
                return {
                    "success": True,
                    "count": total_records,
                    "files_processed": total_files,
                    "message": f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {total_records:,} CVE –∏–∑ {total_files} —Ñ–∞–π–ª–æ–≤"
                }
            else:
                return {"success": False, "message": "–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"}
                
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            await self.db.update_background_task(
                task_id,
                status='error',
                current_step='–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞',
                error_message=error_msg
            )
            return {"success": False, "error": error_msg}
        
        finally:
            self.is_running = False
            self.current_task_id = None
    
    async def cancel_download(self) -> bool:
        """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏"""
        if self.is_running and self.current_task_id:
            self.is_running = False
            await self.db.update_background_task(
                self.current_task_id,
                status='cancelled',
                current_step='–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'
            )
            return True
        return False
    
    def is_downloading(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–¥–µ—Ç –ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞"""
        return self.is_running
    
    def get_current_task_id(self) -> Optional[int]:
        """–ü–æ–ª—É—á–∏—Ç—å ID —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏"""
        return self.current_task_id


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä worker'–∞
cve_worker = CVEWorker()
