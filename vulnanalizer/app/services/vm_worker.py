"""
VM MaxPatrol Worker –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
"""
import csv
import io
import json
import os
import requests
import asyncio
from typing import Dict, List, Any, Optional
from datetime import datetime
from database import get_db
from database.risk_calculation import calculate_risk_score
from services.simple_logging_service import simple_logging_service
from utils.json_splitter import JSONSplitter
import traceback


class VMWorker:
    """Worker –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ VM MaxPatrol"""
    
    def __init__(self):
        self.db = get_db()
        self.is_running = True
        self.logger = None
        self.vm_data_dir = "/app/data/vm_imports"
        self._ensure_data_dir()
    
    def _ensure_data_dir(self):
        """–°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö VM –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        try:
            if not os.path.exists(self.vm_data_dir):
                os.makedirs(self.vm_data_dir, exist_ok=True)
        except PermissionError:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            import tempfile
            self.vm_data_dir = os.path.join(tempfile.gettempdir(), 'stools_vm_imports')
            os.makedirs(self.vm_data_dir, exist_ok=True)
    
    def _get_vm_data_file_path(self, task_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–∞–Ω–Ω—ã—Ö VM –¥–ª—è –∑–∞–¥–∞—á–∏"""
        return os.path.join(self.vm_data_dir, f"vm_data_{task_id}.json")
    
    def _get_latest_vm_data_file(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –¥–∞–Ω–Ω—ã—Ö VM"""
        try:
            if not os.path.exists(self.vm_data_dir):
                return None
            
            vm_files = []
            for filename in os.listdir(self.vm_data_dir):
                # –ò—â–µ–º —Ç–æ–ª—å–∫–æ –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã VM (–±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞ _filtered)
                if filename.startswith("vm_data_") and filename.endswith(".json") and "_filtered" not in filename:
                    file_path = os.path.join(self.vm_data_dir, filename)
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
                    mtime = os.path.getmtime(file_path)
                    vm_files.append((file_path, mtime))
            
            if not vm_files:
                return None
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π)
            vm_files.sort(key=lambda x: x[1], reverse=True)
            latest_file = vm_files[0][0]
            
            print(f"üìÅ –ù–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª VM –¥–∞–Ω–Ω—ã—Ö: {os.path.basename(latest_file)}")
            return latest_file
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–∞ VM –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None
    
    def _cleanup_old_vm_files(self):
        """–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö VM"""
        try:
            if os.path.exists(self.vm_data_dir):
                for filename in os.listdir(self.vm_data_dir):
                    if filename.startswith("vm_data_") and filename.endswith(".json"):
                        file_path = os.path.join(self.vm_data_dir, filename)
                        os.remove(file_path)
                        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª VM –¥–∞–Ω–Ω—ã—Ö: {filename}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ VM: {e}")
    
    async def _save_vm_data_to_file(self, task_id: int, vm_data: List[Dict[str, str]]) -> str:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ VM –≤ JSON —Ñ–∞–π–ª"""
        try:
            file_path = self._get_vm_data_file_path(task_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(vm_data, f, ensure_ascii=False, indent=2)
            
            await self._log('info', f"–î–∞–Ω–Ω—ã–µ VM —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {file_path}", {
                "file_path": file_path,
                "records_count": len(vm_data)
            })
            
            return file_path
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö VM –≤ —Ñ–∞–π–ª: {str(e)}"
            await self._log('error', error_msg)
            raise Exception(error_msg)
    
    async def _load_vm_data_from_file(self, task_id: int, file_path: str = None) -> List[Dict[str, str]]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ VM –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            # –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–∞–Ω–Ω—ã—Ö VM
            if not file_path:
                file_path = self._get_latest_vm_data_file()
                
            if not file_path or not os.path.exists(file_path):
                raise Exception(f"–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö VM –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            
            file_size = os.path.getsize(file_path)
            print(f"üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª VM –¥–∞–Ω–Ω—ã—Ö: {os.path.basename(file_path)} ({file_size / (1024*1024):.1f} MB)")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            if file_size > 100 * 1024 * 1024:  # 100MB
                print(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ç–æ–∫–æ–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è —Ñ–∞–π–ª–∞")
                vm_data = await self._load_large_json_file(file_path, task_id)
            else:
                # –î–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
                with open(file_path, 'r', encoding='utf-8') as f:
                    vm_data = json.load(f)
            
            await self._log('info', f"–î–∞–Ω–Ω—ã–µ VM –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞: {file_path}", {
                "file_path": file_path,
                "records_count": len(vm_data),
                "file_size_mb": round(file_size / (1024*1024), 2)
            })
            
            return vm_data
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö VM –∏–∑ —Ñ–∞–π–ª–∞: {str(e)}"
            await self._log('error', error_msg)
            raise Exception(error_msg)
    
    async def _load_large_json_file(self, file_path: str, task_id: int) -> List[Dict[str, str]]:
        """–ü–æ—Ç–æ–∫–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –±–æ–ª—å—à–æ–≥–æ JSON —Ñ–∞–π–ª–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ijson"""
        try:
            import ijson
            
            file_size = os.path.getsize(file_path)
            print(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ {os.path.basename(file_path)} ({file_size / (1024*1024):.1f} MB)")
            
            vm_data = []
            processed_count = 0
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            await self.db.update_background_task(task_id, **{
                'current_step': '–ü–æ—Ç–æ–∫–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ JSON –¥–∞–Ω–Ω—ã—Ö',
                'progress_percent': 10
            })
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ijson –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
            with open(file_path, 'rb') as f:
                # –ü–∞—Ä—Å–∏–º JSON –º–∞—Å—Å–∏–≤ –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º
                parser = ijson.items(f, 'item')
                
                for item in parser:
                    vm_data.append(item)
                    processed_count += 1
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10000 –∑–∞–ø–∏—Å–µ–π
                    if processed_count % 10000 == 0:
                        progress = min(90, 10 + (processed_count / 100000) * 80)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º ~100k –∑–∞–ø–∏—Å–µ–π
                        await self.db.update_background_task(task_id, **{
                            'current_step': f'–ó–∞–≥—Ä—É–∂–µ–Ω–æ {processed_count} –∑–∞–ø–∏—Å–µ–π',
                            'progress_percent': int(progress)
                        })
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏
                        await self._update_task_activity(task_id, f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {processed_count} –∑–∞–ø–∏—Å–µ–π")
                        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {processed_count} –∑–∞–ø–∏—Å–µ–π...")
            
            await self.db.update_background_task(task_id, **{
                'current_step': '–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã',
                'progress_percent': 100
            })
            
            print(f"‚úÖ –ü–æ—Ç–æ–∫–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(vm_data)} –∑–∞–ø–∏—Å–µ–π")
            return vm_data
            
        except ImportError:
            print("‚ö†Ô∏è ijson –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É")
            # Fallback –∫ –æ–±—ã—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
            await self.db.update_background_task(task_id, **{
                'current_step': '–ó–∞–≥—Ä—É–∑–∫–∞ JSON –¥–∞–Ω–Ω—ã—Ö (–æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º)',
                'progress_percent': 50
            })
            
            with open(file_path, 'r', encoding='utf-8') as f:
                vm_data = json.load(f)
            
            await self.db.update_background_task(task_id, **{
                'current_step': '–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã',
                'progress_percent': 100
            })
            
            print(f"‚úÖ –û–±—ã—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(vm_data)} –∑–∞–ø–∏—Å–µ–π")
            return vm_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
    
    async def _apply_filters_to_large_file(self, file_path: str, task_id: int, 
                                         criticality_filter: str = None, 
                                         os_filter: str = None, 
                                         zone_filter: str = None) -> str:
        """
        –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∫ –±–æ–ª—å—à–æ–º—É —Ñ–∞–π–ª—É –î–û —Ä–∞–∑–±–∏–≤–∫–∏
        
        Args:
            file_path: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
            task_id: ID –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            criticality_filter: –§–∏–ª—å—Ç—Ä –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
            os_filter: –§–∏–ª—å—Ç—Ä –û–°
            zone_filter: –§–∏–ª—å—Ç—Ä –∑–æ–Ω—ã
            
        Returns:
            –ü—É—Ç—å –∫ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        try:
            import ijson
            
            file_size = os.path.getsize(file_path)
            print(f"üîç –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫ —Ñ–∞–π–ª—É {os.path.basename(file_path)} ({file_size / (1024*1024):.1f} MB)")
            
            await self.db.update_background_task(task_id, **{
                'current_step': '–ü–æ—Ç–æ–∫–æ–≤–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞',
                'progress_percent': 5
            })
            await self._update_task_activity(task_id, "–ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é")
            
            # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            file_dir = os.path.dirname(file_path)
            file_name = os.path.splitext(os.path.basename(file_path))[0]
            filtered_file_path = os.path.join(file_dir, f"{file_name}_filtered.json")
            
            filtered_count = 0
            total_count = 0
            
            # –ü–æ—Ç–æ–∫–æ–≤–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å –∑–∞–ø–∏—Å—å—é –≤ –Ω–æ–≤—ã–π —Ñ–∞–π–ª
            with open(file_path, 'rb') as input_file, open(filtered_file_path, 'w', encoding='utf-8') as output_file:
                output_file.write('[')  # –ù–∞—á–∏–Ω–∞–µ–º JSON –º–∞—Å—Å–∏–≤
                first_item = True
                
                parser = ijson.items(input_file, 'item')
                
                for item in parser:
                    total_count += 1
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
                    if self._matches_filters(item, criticality_filter, os_filter, zone_filter):
                        if not first_item:
                            output_file.write(',\n')
                        json.dump(item, output_file, ensure_ascii=False, indent=2)
                        first_item = False
                        filtered_count += 1
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10000 –∑–∞–ø–∏—Å–µ–π
                    if total_count % 10000 == 0:
                        progress = min(80, 5 + (total_count / 100000) * 75)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º ~100k –∑–∞–ø–∏—Å–µ–π
                        await self.db.update_background_task(task_id, **{
                            'current_step': f'–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {filtered_count} –∏–∑ {total_count} –∑–∞–ø–∏—Å–µ–π',
                            'progress_percent': int(progress)
                        })
                        await self._update_task_activity(task_id, f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {filtered_count} –∏–∑ {total_count} –∑–∞–ø–∏—Å–µ–π")
                        print(f"üìä –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {filtered_count} –∏–∑ {total_count} –∑–∞–ø–∏—Å–µ–π...")
                
                output_file.write('\n]')  # –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º JSON –º–∞—Å—Å–∏–≤
            
            await self.db.update_background_task(task_id, **{
                'current_step': f'–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {filtered_count} –∏–∑ {total_count} –∑–∞–ø–∏—Å–µ–π',
                'progress_percent': 80
            })
            await self._update_task_activity(task_id, f"–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {filtered_count} –∏–∑ {total_count} –∑–∞–ø–∏—Å–µ–π")
            
            print(f"‚úÖ –ü–æ—Ç–æ–∫–æ–≤–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {filtered_count} –∏–∑ {total_count} –∑–∞–ø–∏—Å–µ–π")
            print(f"üìÅ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: {os.path.basename(filtered_file_path)}")
            
            return filtered_file_path
            
        except ImportError:
            print("‚ö†Ô∏è ijson –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é")
            # Fallback –∫ –æ–±—ã—á–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            return await self._apply_filters_fallback(file_path, task_id, criticality_filter, os_filter, zone_filter)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {e}")
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
    
    async def _apply_filters_fallback(self, file_path: str, task_id: int, 
                                   criticality_filter: str = None, 
                                   os_filter: str = None, 
                                   zone_filter: str = None) -> str:
        """Fallback –º–µ—Ç–æ–¥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–ª—É—á–∞–µ–≤ –±–µ–∑ ijson"""
        try:
            await self.db.update_background_task(task_id, **{
                'current_step': '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º)',
                'progress_percent': 20
            })
            
            with open(file_path, 'r', encoding='utf-8') as f:
                vm_data = json.load(f)
            
            await self.db.update_background_task(task_id, **{
                'current_step': '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º',
                'progress_percent': 50
            })
            
            filtered_data = []
            for item in vm_data:
                if self._matches_filters(item, criticality_filter, os_filter, zone_filter):
                    filtered_data.append(item)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            file_dir = os.path.dirname(file_path)
            file_name = os.path.splitext(os.path.basename(file_path))[0]
            filtered_file_path = os.path.join(file_dir, f"{file_name}_filtered.json")
            
            with open(filtered_file_path, 'w', encoding='utf-8') as f:
                json.dump(filtered_data, f, ensure_ascii=False, indent=2)
            
            await self.db.update_background_task(task_id, **{
                'current_step': f'–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(filtered_data)} –∏–∑ {len(vm_data)} –∑–∞–ø–∏—Å–µ–π',
                'progress_percent': 80
            })
            
            print(f"‚úÖ –û–±—ã—á–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(filtered_data)} –∏–∑ {len(vm_data)} –∑–∞–ø–∏—Å–µ–π")
            return filtered_file_path
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—ã—á–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {e}")
            raise Exception(f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
    
    def _matches_filters(self, item: dict, criticality_filter: str = None, 
                        os_filter: str = None, zone_filter: str = None) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å —Ñ–∏–ª—å—Ç—Ä–∞–º"""
        try:
            # –§–∏–ª—å—Ç—Ä –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
            if criticality_filter:
                item_criticality = item.get('criticality', '').lower()
                if criticality_filter.lower() not in item_criticality:
                    return False
            
            # –§–∏–ª—å—Ç—Ä –û–°
            if os_filter:
                item_os = item.get('os_name', '').lower()
                if os_filter.lower() not in item_os:
                    return False
            
            # –§–∏–ª—å—Ç—Ä –∑–æ–Ω—ã
            if zone_filter:
                item_zone = item.get('zone', '').lower()
                if zone_filter.lower() not in item_zone:
                    return False
            
            return True
        except Exception:
            return False

    async def _split_large_file_if_needed(self, file_path: str, task_id: int) -> List[str]:
        """
        –†–∞–∑–±–∏—Ç—å –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            task_id: ID –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –∏–ª–∏ –≤—Å–µ —á–∞—Å—Ç–∏)
        """
        try:
            file_size = os.path.getsize(file_path)
            max_size_mb = 200  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ MB
            
            if file_size <= max_size_mb * 1024 * 1024:
                print(f"üìÅ –§–∞–π–ª {os.path.basename(file_path)} ({file_size / (1024*1024):.1f} MB) –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Ä–∞–∑–±–∏–≤–∫–∏")
                return [file_path]
            
            print(f"üîÑ –§–∞–π–ª {os.path.basename(file_path)} ({file_size / (1024*1024):.1f} MB) —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏")
            
            await self.db.update_background_task(task_id, **{
                'current_step': '–†–∞–∑–±–∏–≤–∫–∞ –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞ —á–∞—Å—Ç–∏',
                'progress_percent': 5
            })
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —á–∞—Å—Ç–µ–π
            file_dir = os.path.dirname(file_path)
            file_name = os.path.splitext(os.path.basename(file_path))[0]
            parts_dir = os.path.join(file_dir, f"{file_name}_parts")
            
            # –†–∞–∑–±–∏–≤–∞–µ–º —Ñ–∞–π–ª
            splitter = JSONSplitter(records_per_file=50000)  # 50k –∑–∞–ø–∏—Å–µ–π –≤ —á–∞—Å—Ç–∏
            created_files = splitter.split_json_file(file_path, parts_dir)
            
            await self.db.update_background_task(task_id, **{
                'current_step': f'–§–∞–π–ª —Ä–∞–∑–±–∏—Ç –Ω–∞ {len(created_files)} —á–∞—Å—Ç–µ–π',
                'progress_percent': 10
            })
            
            print(f"‚úÖ –§–∞–π–ª —Ä–∞–∑–±–∏—Ç –Ω–∞ {len(created_files)} —á–∞—Å—Ç–µ–π")
            await self._log('info', f"–§–∞–π–ª —Ä–∞–∑–±–∏—Ç –Ω–∞ {len(created_files)} —á–∞—Å—Ç–µ–π", {
                "original_file": file_path,
                "parts_count": len(created_files),
                "parts_dir": parts_dir
            })
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            return created_files
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–∏–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            await self._log('error', f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–∏–≤–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
            return [file_path]
    
    async def _update_task_activity(self, task_id: int, activity_message: str = None):
        """–û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏"""
        try:
            await self.db.update_background_task(task_id, **{
                'last_activity_at': datetime.now(),
                'activity_count': await self._get_activity_count(task_id) + 1
            })
            
            if activity_message:
                print(f"üîÑ [{task_id}] {activity_message}")
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏ {task_id}: {e}")
    
    async def _get_activity_count(self, task_id: int) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        try:
            conn = await self.db.get_connection()
            try:
                count = await conn.fetchval(
                    "SELECT activity_count FROM vulnanalizer.background_tasks WHERE id = $1",
                    task_id
                )
                return count or 0
            finally:
                await self.db.release_connection(conn)
        except Exception:
            return 0
    
    async def _log(self, level: str, message: str, data: dict = None):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if self.logger:
            if level == 'info':
                await self.logger.info(message, data)
            elif level == 'debug':
                await self.logger.debug(message, data)
            elif level == 'warning':
                await self.logger.warning(message, data)
            elif level == 'error':
                await self.logger.error(message, data)
    
    async def start_import(self, task_id: int, parameters: Dict[str, Any]) -> Dict:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ VM MaxPatrol"""
        try:
            print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç VM –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã VM –¥–∞–Ω–Ω—ã—Ö
            self._cleanup_old_vm_files()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            await self.db.update_background_task(task_id, **{
                'status': 'processing',
                'current_step': '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ VM'
            })
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VM
            vm_settings = await self.db.get_vm_settings()
            
            # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            if vm_settings.get('vm_detailed_logging') == 'true':
                self.logger = await simple_logging_service.create_task_logger(task_id, 'vm_import')
                await self._log('info', "–ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç VM –¥–∞–Ω–Ω—ã—Ö", {"task_id": task_id, "parameters": parameters})
                await self._log('debug', "–ü–æ–ª—É—á–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VM", {"vm_host": vm_settings.get('vm_host'), "vm_username": vm_settings.get('vm_username')})
            
            if not vm_settings.get('vm_host') or not vm_settings.get('vm_username'):
                error_msg = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ VM MaxPatrol –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
                await self._log('error', error_msg, {"vm_settings": vm_settings})
                raise Exception(error_msg)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            await self.db.update_background_task(task_id, **{
                'current_step': '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ VM MaxPatrol'
            })
            await self._log('info', "–ù–∞—á–∏–Ω–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –≤ VM MaxPatrol")
            
            token = await self._get_vm_token(
                vm_settings['vm_host'].strip(),
                vm_settings['vm_username'].strip(),
                vm_settings['vm_password'].strip(),
                vm_settings['vm_client_secret'].strip()
            )
            await self._log('info', "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ VM MaxPatrol —É—Å–ø–µ—à–Ω–∞")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ VM API
            await self.db.update_background_task(task_id, **{
                'current_step': '–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ VM API'
            })
            await self._log('info', "–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ VM API")
            
            vm_data = await self._get_vm_data(
                vm_settings['vm_host'].strip(),
                token,
                vm_settings
            )
            
            if not vm_data:
                error_msg = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ VM API"
                await self._log('error', error_msg)
                raise Exception(error_msg)
            
            await self._log('info', f"–ü–æ–ª—É—á–µ–Ω–æ {len(vm_data)} –∑–∞–ø–∏—Å–µ–π –∏–∑ VM API")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
            await self.db.update_background_task(task_id, **{
                'current_step': '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª'
            })
            await self._log('info', "–ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö VM –≤ —Ñ–∞–π–ª")
            
            file_path = await self._save_vm_data_to_file(task_id, vm_data)
            await self._log('info', f"–î–∞–Ω–Ω—ã–µ VM —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {file_path}")
            
            # –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç - —Ç–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            await self.db.update_background_task(task_id, **{
                'status': 'completed',
                'current_step': '–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª. –ì–æ—Ç–æ–≤–æ –∫ —Ä—É—á–Ω–æ–º—É –∏–º–ø–æ—Ä—Ç—É.',
                'end_time': datetime.now()
            })
            
            await self._log('info', f"–î–∞–Ω–Ω—ã–µ VM —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {file_path}. –ò–º–ø–æ—Ä—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ VM —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {file_path}")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
            if self.logger:
                await self.logger.close()
            
            return {
                "success": True,
                "count": len(vm_data),
                "message": f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(vm_data)} –∑–∞–ø–∏—Å–µ–π –≤ —Ñ–∞–π–ª. –ò–º–ø–æ—Ä—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
                "file_path": file_path
            }
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ VM –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
            print(f"‚ùå {error_msg}")
            print(f"‚ùå Traceback: {traceback.format_exc()}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            await self._log('error', error_msg, {"traceback": traceback.format_exc()})
            if self.logger:
                await self.logger.close()
            
            await self.db.update_background_task(task_id, **{
                'status': 'error',
                'error_message': error_msg,
                'end_time': datetime.now()
            })
            
            return {"success": False, "message": error_msg}
    
    async def _cleanup_vm_imports_folder(self, task_id: int, keep_original_file: str = None) -> None:
        """
        –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–ø–∫—É vm_imports –æ—Ç –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, –∫—Ä–æ–º–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ
        
        Args:
            task_id: ID –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            keep_original_file: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
        """
        try:
            vm_imports_dir = os.path.join(self.data_dir, 'vm_imports')
            if not os.path.exists(vm_imports_dir):
                return
            
            await self.db.update_background_task(task_id, **{
                'current_step': '–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤',
                'progress_percent': 0
            })
            await self._update_task_activity(task_id, "–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
            
            deleted_files = []
            kept_files = []
            
            for filename in os.listdir(vm_imports_dir):
                file_path = os.path.join(vm_imports_dir, filename)
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                if os.path.isdir(file_path):
                    continue
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
                if keep_original_file and os.path.samefile(file_path, keep_original_file):
                    kept_files.append(filename)
                    continue
                
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
                try:
                    os.remove(file_path)
                    deleted_files.append(filename)
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {filename}: {e}")
            
            print(f"üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ {len(deleted_files)} —Ñ–∞–π–ª–æ–≤, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(kept_files)} —Ñ–∞–π–ª–æ–≤")
            if deleted_files:
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {', '.join(deleted_files)}")
            if kept_files:
                print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {', '.join(kept_files)}")
                
            await self._log('info', f"–û—á–∏—Å—Ç–∫–∞ –ø–∞–ø–∫–∏ vm_imports –∑–∞–≤–µ—Ä—à–µ–Ω–∞", {
                "deleted_files": deleted_files,
                "kept_files": kept_files
            })
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–ø–∫–∏ vm_imports: {e}")
            await self._log('error', f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–ø–∫–∏ vm_imports: {e}")

    async def start_manual_import(self, task_id: int, parameters: Dict[str, Any]) -> Dict:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä—É—á–Ω–æ–π –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ VM —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π"""
        try:
            print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä—É—á–Ω–æ–π –∏–º–ø–æ—Ä—Ç VM –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")
            print(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {parameters}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            criticality_filter = parameters.get('criticality_filter', '')
            os_filter = parameters.get('os_filter', '')
            zone_filter = parameters.get('zone_filter', '')
            
            print(f"üîç –§–∏–ª—å—Ç—Ä –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏: {criticality_filter}")
            print(f"üîç –§–∏–ª—å—Ç—Ä –û–°: {os_filter}")
            print(f"üîç –§–∏–ª—å—Ç—Ä –∑–æ–Ω—ã: {zone_filter}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            await self.db.update_background_task(task_id, **{
                'status': 'processing',
                'current_step': '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞'
            })
            
            # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            vm_settings = await self.db.get_vm_settings()
            if vm_settings.get('vm_detailed_logging') == 'true':
                self.logger = await simple_logging_service.create_task_logger(task_id, 'vm_manual_import')
                await self._log('info', "–ù–∞—á–∏–Ω–∞–µ–º —Ä—É—á–Ω–æ–π –∏–º–ø–æ—Ä—Ç VM –¥–∞–Ω–Ω—ã—Ö", {"task_id": task_id, "parameters": parameters})
            
            # –≠—Ç–∞–ø 1: –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–∞–Ω–Ω—ã—Ö VM
            await self.db.update_background_task(task_id, **{
                'current_step': '–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö VM',
                'progress_percent': 1
            })
            await self._update_task_activity(task_id, "–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö VM")
            
            vm_data_file_path = self._get_latest_vm_data_file()
            if not vm_data_file_path or not os.path.exists(vm_data_file_path):
                raise Exception(f"–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö VM –Ω–µ –Ω–∞–π–¥–µ–Ω: {vm_data_file_path}")
            
            await self._log('info', f"–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö VM: {vm_data_file_path}")
            
            # –≠—Ç–∞–ø 1.5: –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É vm_imports –æ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            await self._cleanup_vm_imports_folder(task_id, vm_data_file_path)
            
            # –≠—Ç–∞–ø 2: –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –î–û —Ä–∞–∑–±–∏–≤–∫–∏ —Ñ–∞–π–ª–∞
            file_to_process = vm_data_file_path
            
            if criticality_filter or os_filter or zone_filter:
                await self.db.update_background_task(task_id, **{
                    'current_step': '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É',
                    'progress_percent': 5
                })
                await self._update_task_activity(task_id, "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É")
                
                file_to_process = await self._apply_filters_to_large_file(
                    vm_data_file_path, task_id, criticality_filter, os_filter, zone_filter
                )
                await self._log('info', f"–§–∏–ª—å—Ç—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã, —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {file_to_process}")
            else:
                await self._log('info', "–§–∏–ª—å—Ç—Ä—ã –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª")
            
            # –≠—Ç–∞–ø 3: –†–∞–∑–±–∏–≤–∞–µ–º —Ñ–∞–π–ª –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            await self.db.update_background_task(task_id, **{
                'current_step': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–∞–∑–±–∏–≤–∫–∏ —Ñ–∞–π–ª–∞',
                'progress_percent': 80
            })
            await self._update_task_activity(task_id, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–∞–∑–±–∏–≤–∫–∏ —Ñ–∞–π–ª–∞")
            
            files_to_process = await self._split_large_file_if_needed(file_to_process, task_id)
            await self._log('info', f"–§–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {files_to_process}")
            
            # –≠—Ç–∞–ø 4: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
            await self.db.update_background_task(task_id, **{
                'current_step': f'–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {len(files_to_process)} —Ñ–∞–π–ª–æ–≤',
                'progress_percent': 85
            })
            await self._update_task_activity(task_id, f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {len(files_to_process)} —Ñ–∞–π–ª–æ–≤")
            await self._log('info', f"–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ {len(files_to_process)} —Ñ–∞–π–ª–æ–≤")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
            all_vm_data = []
            for i, file_path in enumerate(files_to_process):
                await self.db.update_background_task(task_id, **{
                    'current_step': f'–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ {i+1} –∏–∑ {len(files_to_process)}: {os.path.basename(file_path)}',
                    'progress_percent': 85 + (i * 5 // len(files_to_process))
                })
                
                vm_data_from_file = await self._load_vm_data_from_file(task_id, file_path)
                all_vm_data.extend(vm_data_from_file)
                await self._log('info', f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(vm_data_from_file)} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ñ–∞–π–ª–∞ {os.path.basename(file_path)}")
            
            vm_data_from_file = all_vm_data
            await self._log('info', f"–í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(vm_data_from_file)} –∑–∞–ø–∏—Å–µ–π –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤")
            
            # –≠—Ç–∞–ø 5: –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –¥—É–±–ª–µ–π –∏ –ø—É—Å—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π
            await self.db.update_background_task(task_id, **{
                'current_step': '–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –¥—É–±–ª–µ–π –∏ –ø—É—Å—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π',
                'progress_percent': 90
            })
            await self._update_task_activity(task_id, "–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –¥—É–±–ª–µ–π –∏ –ø—É—Å—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π")
            await self._log('info', "–ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –æ—Ç –¥—É–±–ª–µ–π –∏ –ø—É—Å—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π")
            
            # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
            async def update_cleanup_progress(step, message, progress_percent):
                await self.db.update_background_task(task_id, **{
                    'current_step': message,
                    'progress_percent': progress_percent
                })
                await self._update_task_activity(task_id, message)
            
            clean_records = await self._clean_import_data_async(vm_data_from_file, task_id, update_cleanup_progress)
            await self._log('info', f"–ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {len(clean_records)} –∑–∞–ø–∏—Å–µ–π (—É–¥–∞–ª–µ–Ω–æ {len(vm_data_from_file) - len(clean_records)} –¥—É–±–ª–µ–π/–ø—É—Å—Ç—ã—Ö)")
            
            # –≠—Ç–∞–ø 6: –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
            await self.db.update_background_task(task_id, **{
                'current_step': '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É',
                'progress_percent': 95
            })
            await self._update_task_activity(task_id, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É")
            await self._log('info', f"–ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {len(clean_records)} –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            
            # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            async def update_save_progress(step, message, progress_percent):
                await self.db.update_background_task(task_id, **{
                    'current_step': message,
                    'progress_percent': progress_percent
                })
                await self._update_task_activity(task_id, message)
            
            saved_count = await self._save_clean_records_to_db(clean_records, task_id, update_save_progress)
            await self._log('info', f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            
            # –≠—Ç–∞–ø 7: –†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–æ–≤ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –≤ _save_hosts_with_risks
            await self.db.update_background_task(task_id, **{
                'current_step': '–†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω',
                'progress_percent': 98
            })
            await self._update_task_activity(task_id, "–†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
            await self._log('info', "–†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
            try:
                file_path = self._get_vm_data_file_path(task_id)
                os.remove(file_path)
                await self._log('info', f"–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö VM —É–¥–∞–ª–µ–Ω: {file_path}")
            except Exception as e:
                await self._log('warning', f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö VM: {e}")
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
            await self.db.update_background_task(task_id, **{
                'status': 'completed',
                'current_step': '–†—É—á–Ω–æ–π –∏–º–ø–æ—Ä—Ç VM –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω',
                'progress_percent': 100,
                'end_time': datetime.now()
            })
            await self._update_task_activity(task_id, "–†—É—á–Ω–æ–π –∏–º–ø–æ—Ä—Ç VM –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω")
            await self._log('info', f"–†—É—á–Ω–æ–π –∏–º–ø–æ—Ä—Ç VM –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {saved_count} –∑–∞–ø–∏—Å–µ–π")
            print(f"‚úÖ –†—É—á–Ω–æ–π –∏–º–ø–æ—Ä—Ç VM –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω: {saved_count} –∑–∞–ø–∏—Å–µ–π")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
            if self.logger:
                await self.logger.close()
            
            return {
                "success": True,
                "count": saved_count,
                "message": f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {saved_count} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ñ–∞–π–ª–∞ VM"
            }
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ VM –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
            print(f"‚ùå {error_msg}")
            print(f"‚ùå Traceback: {traceback.format_exc()}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            await self._log('error', error_msg, {"traceback": traceback.format_exc()})
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
            await self.db.update_background_task(task_id, **{
                'status': 'failed',
                'current_step': f'–û—à–∏–±–∫–∞: {error_msg}',
                'end_time': datetime.now()
            })
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
            if self.logger:
                await self.logger.close()
            
            raise Exception(error_msg)
    
    async def _get_vm_token(self, host: str, username: str, password: str, client_secret: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è VM MaxPatrol"""
        try:
            if self.logger:
                await self._log('debug', "–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏", {"host": host, "username": username})
            
            url = f'https://{host}:3334/connect/token'
            
            headers = {
                'Content-Type': 'application/x-www-form-urlencoded'
            }
            
            data = {
                'username': username,
                'password': password,
                'client_id': 'mpx',
                'client_secret': client_secret,
                'grant_type': 'password',
                'response_type': 'code id_token',
                'scope': 'offline_access mpx.api'
            }
            
            response = requests.post(url, headers=headers, data=data, verify=False, timeout=30)
            response.raise_for_status()
            
            result = response.json()
            if 'access_token' not in result:
                error_msg = f"–¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω: {result}"
                if self.logger:
                    await self._log('error', error_msg, {"response": result})
                raise Exception(error_msg)
            
            if self.logger:
                await self._log('debug', "–¢–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
            return result['access_token']
            
        except requests.exceptions.RequestException as e:
            error_msg = f"–û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            if self.logger:
                await self._log('error', error_msg)
            raise Exception(error_msg)
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {str(e)}"
            if self.logger:
                await self._log('error', error_msg)
            raise Exception(error_msg)
    
    async def _get_vm_data(self, host: str, token: str, settings: Dict[str, str]) -> List[Dict[str, str]]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ VM API"""
        try:
            await self._log('debug', "–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ VM API", {"host": host})
            
            # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            vm_limit = int(settings.get('vm_limit', 0))
            await self._log('debug', f"–õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π: {vm_limit} (0 = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)")
            
            # PDQL –∑–∞–ø—Ä–æ—Å —Å –ª–∏–º–∏—Ç–æ–º –∑–∞–ø–∏—Å–µ–π
            if vm_limit > 0:
                pdql = f"""select(@Host, Host.OsName, Host.@Groups, Host.@Vulners.CVEs, Host.UF_Criticality, Host.UF_Zone) 
                | filter(Host.OsName != null) 
                | limit({vm_limit})"""
            else:
                pdql = """select(@Host, Host.OsName, Host.@Groups, Host.@Vulners.CVEs, Host.UF_Criticality, Host.UF_Zone) 
                | filter(Host.OsName != null)"""
            
            if self.logger:
                await self._log('debug', "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω PDQL –∑–∞–ø—Ä–æ—Å", {"pdql": pdql})
            
            url = f'https://{host}/api/assets_temporal_readmodel/v1/assets_grid'
            params = {
                'pdql': pdql,
                'includeNestedGroups': False
            }
            
            headers = {
                'Content-Type': 'application/json',
                'Authorization': f'Bearer {token}'
            }
            
            # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
            if self.logger:
                await self._log('debug', "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞", {"url": url})
            
            response = requests.post(url, headers=headers, json=params, verify=False, timeout=60)
            response.raise_for_status()
            
            result = response.json()
            if 'token' not in result:
                error_msg = f"–¢–æ–∫–µ–Ω —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω: {result}"
                if self.logger:
                    await self._log('error', error_msg, {"response": result})
                raise Exception(error_msg)
            
            export_token = result['token']
            if self.logger:
                await self._log('debug', "–¢–æ–∫–µ–Ω —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –ü–æ–ª—É—á–∞–µ–º CSV –¥–∞–Ω–Ω—ã–µ
            export_url = f'https://{host}/api/assets_temporal_readmodel/v1/assets_grid/export?pdqlToken={export_token}'
            if self.logger:
                await self._log('debug', "–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º CSV –¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∞", {"export_url": export_url})
            
            export_response = requests.get(export_url, headers=headers, verify=False, timeout=300)
            export_response.raise_for_status()
            
            # –ü–∞—Ä—Å–∏–º CSV –¥–∞–Ω–Ω—ã–µ
            csv_content = export_response.text
            if self.logger:
                await self._log('debug', f"–ü–æ–ª—É—á–µ–Ω CSV –∫–æ–Ω—Ç–µ–Ω—Ç —Ä–∞–∑–º–µ—Ä–æ–º {len(csv_content)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ CSV –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            csv_lines = csv_content.split('\n')
            non_empty_lines = [line for line in csv_lines if line.strip()]
            if self.logger:
                await self._log('debug', f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ CSV: {len(csv_lines)}, –Ω–µ–ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫: {len(non_empty_lines)}")
            
            # CSV —Ñ–∞–π–ª –±–æ–ª—å—à–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –¥–µ–±–∞–≥–∞
            
            # –ü–∞—Ä—Å–∏–º CSV –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
            csv_lines = csv_content.split('\n')
            if not csv_lines:
                raise Exception("CSV —Ñ–∞–π–ª –ø—É—Å—Ç")
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
            header_line = csv_lines[0]
            headers = [h.strip('"') for h in header_line.split(';')]
            
            if self.logger:
                await self._log('debug', f"–ó–∞–≥–æ–ª–æ–≤–∫–∏ CSV: {headers}")
            
            vm_data = []
            row_count = 0
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫)
            for line in csv_lines[1:]:
                if not line.strip():  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    continue
                    
                row_count += 1
                
                # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –≤—Ä—É—á–Ω—É—é
                values = [v.strip('"') for v in line.split(';')]
                if len(values) != len(headers):
                    if self.logger:
                        await self._log('warning', f"–°—Ç—Ä–æ–∫–∞ {row_count}: –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ª–æ–Ω–æ–∫ ({len(values)} != {len(headers)})")
                    continue
                
                row_dict = dict(zip(headers, values))
                
                if self.logger and row_count <= 5:  # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    await self._log('debug', f"–°—Ç—Ä–æ–∫–∞ {row_count}: {row_dict}")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 10000 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                if self.logger and row_count % 10000 == 0:
                    await self._log('debug', f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {row_count} —Å—Ç—Ä–æ–∫ CSV...")
                
                vm_data.append({
                    'host': row_dict.get('@Host', '').strip('"'),
                    'os_name': row_dict.get('Host.OsName', '').strip('"'),
                    'groups': row_dict.get('Host.@Groups', '').strip('"'),
                    'cve': row_dict.get('Host.@Vulners.CVEs', '').strip('"'),
                    'criticality': row_dict.get('Host.UF_Criticality', '').strip('"'),
                    'zone': row_dict.get('Host.UF_Zone', '').strip('"')
                })
            
            if self.logger:
                await self._log('debug', f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {row_count} —Å—Ç—Ä–æ–∫ CSV, —Å–æ–∑–¥–∞–Ω–æ {len(vm_data)} –∑–∞–ø–∏—Å–µ–π")
            
            if self.logger:
                await self._log('info', f"–ü–∞—Ä—Å–∏–Ω–≥ CSV –∑–∞–≤–µ—Ä—à–µ–Ω: {len(vm_data)} –∑–∞–ø–∏—Å–µ–π")
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(vm_data)} –∑–∞–ø–∏—Å–µ–π –∏–∑ VM API")
            return vm_data
            
        except requests.exceptions.RequestException as e:
            error_msg = f"–û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫ VM API: {str(e)}"
            if self.logger:
                await self._log('error', error_msg)
            raise Exception(error_msg)
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ VM API: {str(e)}"
            if self.logger:
                await self._log('error', error_msg)
            raise Exception(error_msg)
    
    def _clean_import_data(self, raw_records: list) -> list:
        """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –¥—É–±–ª–µ–π –∏ –ø—É—Å—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ VM"""
        print(f"üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É {len(raw_records)} –∑–∞–ø–∏—Å–µ–π")
        
        # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∑–∞–ø–∏—Å–∏
        non_empty_records = []
        for record in raw_records:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ VM
            if (record.get('host') and record.get('host').strip() and
                record.get('cve') and record.get('cve').strip()):
                non_empty_records.append(record)
        
        print(f"üßπ –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—É—Å—Ç—ã—Ö: {len(non_empty_records)} –∑–∞–ø–∏—Å–µ–π")
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏ –ø–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ host + cve (–¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ VM)
        seen_combinations = set()
        unique_records = []
        
        for record in non_empty_records:
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–µ–π
            key = (
                record.get('host', '').strip().lower(),
                record.get('cve', '').strip()
            )
            
            if key not in seen_combinations:
                seen_combinations.add(key)
                unique_records.append(record)
        
        print(f"üßπ –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–µ–π: {len(unique_records)} –∑–∞–ø–∏—Å–µ–π")
        print(f"üßπ –£–¥–∞–ª–µ–Ω–æ {len(raw_records) - len(unique_records)} –∑–∞–ø–∏—Å–µ–π (–ø—É—Å—Ç—ã–µ + –¥—É–±–ª–∏)")
        
        return unique_records

    async def _clean_import_data_async(self, raw_records: list, task_id: int, update_progress) -> list:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –¥—É–±–ª–µ–π –∏ –ø—É—Å—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ VM"""
        print(f"üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É {len(raw_records)} –∑–∞–ø–∏—Å–µ–π")
        
        # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∑–∞–ø–∏—Å–∏
        non_empty_records = []
        total_records = len(raw_records)
        processed = 0
        
        for record in raw_records:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ VM
            if (record.get('host') and record.get('host').strip() and
                record.get('cve') and record.get('cve').strip()):
                non_empty_records.append(record)
            
            processed += 1
            if processed % 10000 == 0:
                progress_percent = (processed / total_records) * 50  # 50% –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö
                await update_progress('cleaning', f'–£–¥–∞–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π... ({processed}/{total_records})', progress_percent)
                await asyncio.sleep(0.001)
        
        print(f"üßπ –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—É—Å—Ç—ã—Ö: {len(non_empty_records)} –∑–∞–ø–∏—Å–µ–π")
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏ –ø–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ host + cve (–¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ VM)
        seen_combinations = set()
        unique_records = []
        processed = 0
        
        for record in non_empty_records:
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–µ–π
            key = (
                record.get('host', '').strip().lower(),
                record.get('cve', '').strip()
            )
            
            if key not in seen_combinations:
                seen_combinations.add(key)
                unique_records.append(record)
            
            processed += 1
            if processed % 10000 == 0:
                progress_percent = 50 + (processed / len(non_empty_records)) * 50  # 50-100% –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–µ–π
                await update_progress('cleaning', f'–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–µ–π... ({processed}/{len(non_empty_records)})', progress_percent)
                await asyncio.sleep(0.001)
        
        print(f"üßπ –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–µ–π: {len(unique_records)} –∑–∞–ø–∏—Å–µ–π")
        print(f"üßπ –£–¥–∞–ª–µ–Ω–æ {len(raw_records) - len(unique_records)} –∑–∞–ø–∏—Å–µ–π (–ø—É—Å—Ç—ã–µ + –¥—É–±–ª–∏)")
        
        return unique_records

    async def _apply_filters_async(self, records: list, criticality_filter: str, os_filter: str, zone_filter: str, task_id: int, update_progress) -> list:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ –∑–∞–ø–∏—Å—è–º –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ VM"""
        if not criticality_filter and not os_filter and not zone_filter:
            return records
        
        print(f"üîç –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã: –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å='{criticality_filter}', –û–°='{os_filter}', –∑–æ–Ω–∞='{zone_filter}'")
        
        filtered_records = []
        criticality_list = []
        
        # –ü–∞—Ä—Å–∏–º —Ñ–∏–ª—å—Ç—Ä –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
        if criticality_filter:
            criticality_list = [c.strip() for c in criticality_filter.split(',') if c.strip()]
            print(f"üîç –°–ø–∏—Å–æ–∫ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–µ–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {criticality_list}")
        
        total_records = len(records)
        processed = 0
        
        for i, record in enumerate(records):
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ (–ø–æ–ª–µ criticality –≤ —Ñ–æ—Ä–º–∞—Ç–µ VM)
            if criticality_list:
                record_criticality = record.get('criticality', '').strip()
                if record_criticality not in criticality_list:
                    continue
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –û–° (–ø–æ–ª–µ os_name –≤ —Ñ–æ—Ä–º–∞—Ç–µ VM)
            if os_filter:
                record_os = record.get('os_name', '').strip()
                if os_filter.lower() not in record_os.lower():
                    continue
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∑–æ–Ω—ã (–ø–æ–ª–µ zone –≤ —Ñ–æ—Ä–º–∞—Ç–µ VM)
            if zone_filter:
                record_zone = record.get('zone', '').strip()
                if zone_filter.lower() not in record_zone.lower():
                    continue
            
            filtered_records.append(record)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10000 –∑–∞–ø–∏—Å–µ–π
            processed += 1
            if processed % 10000 == 0:
                progress_percent = (processed / total_records) * 100
                await update_progress('filtering', f'–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö... ({processed}/{total_records})', progress_percent)
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è event loop
                await asyncio.sleep(0.001)
        
        print(f"üîç –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(filtered_records)} –∑–∞–ø–∏—Å–µ–π (—É–¥–∞–ª–µ–Ω–æ {len(records) - len(filtered_records)})")
        return filtered_records

    def _group_vm_data_by_hosts(self, vm_data: List[Dict[str, str]]) -> List[Dict[str, Any]]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ VM –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è hosts_repository (–æ–¥–∏–Ω CVE = –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å)"""
        result = []
        
        if self.logger:
            import asyncio
            asyncio.create_task(self.logger.debug(f"–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ {len(vm_data)} –∑–∞–ø–∏—Å–µ–π (–æ–¥–∏–Ω CVE = –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å)"))
        
        for record in vm_data:
            host_info = record['host']
            
            # –ü–∞—Ä—Å–∏–º hostname –∏ IP
            if ' (' in host_info:
                hostname = host_info.split(' (')[0]
                ip_address = host_info.split('(')[1].split(')')[0]
            else:
                hostname = host_info
                ip_address = ''
            
            # –ü–æ–ª—É—á–∞–µ–º CVE
            cve = record['cve']
            if not cve or not cve.strip():
                continue
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ CVE
            result.append({
                'hostname': hostname,
                'ip_address': ip_address,
                'cve': cve,
                'cvss': 0.0,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é CVSS = 0
                'criticality': record.get('criticality', 'Medium'),  # –ò–∑ Host.UF_Criticality
                'zone': record.get('zone', ''),  # –ò–∑ Host.UF_Zone
                'status': 'Active',
                'os_name': record.get('os_name', '')  # –î–æ–±–∞–≤–ª—è–µ–º os_name
            })
        
        if self.logger:
            import asyncio
            asyncio.create_task(self.logger.debug(f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {len(result)} –∑–∞–ø–∏—Å–µ–π –∏–∑ {len(vm_data)} –∏—Å—Ö–æ–¥–Ω—ã—Ö"))
        
        return result
    
    async def _save_hosts_with_risks(self, task_id: int, hosts: List[Dict[str, Any]]) -> Dict:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ö–æ—Å—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞—Å—á–µ—Ç–æ–º —Ä–∏—Å–∫–æ–≤"""
        try:
            if self.logger:
                await self._log('debug', f"–ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {len(hosts)} —Ö–æ—Å—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ö–æ—Å—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                for i, host in enumerate(hosts[:3]):
                    await self._log('debug', f"–•–æ—Å—Ç {i+1}: {host}")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤
            settings = await self.db.get_settings()
            if self.logger:
                await self._log('debug', "–ü–æ–ª—É—á–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤", {"settings_keys": list(settings.keys())})
            
            # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            async def update_progress(step, message, progress_percent, processed_records=None, current_step_progress=None, processed_cves=None, updated_hosts=None):
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º processed_cves –µ—Å–ª–∏ processed_records –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
                    records_count = processed_records or processed_cves or 0
                    
                    await self.db.update_background_task(task_id, **{
                        'current_step': message,
                        'processed_records': records_count,
                        'progress_percent': progress_percent
                    })
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏
                    await self._update_task_activity(task_id, message)
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                    if self.logger and records_count and records_count % 100 == 0:
                        await self._log('debug', f"–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {records_count}/{len(hosts)} ({progress_percent}%)")
                        
                except Exception as e:
                    if self.logger:
                        await self._log('warning', f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å —Ä–∞—Å—á–µ—Ç–æ–º —Ä–∏—Å–∫–æ–≤
            if self.logger:
                await self._log('debug', "–í—ã–∑—ã–≤–∞–µ–º insert_hosts_records_with_progress")
            
            result = await self.db.insert_hosts_records_with_progress(hosts, update_progress)
            
            if self.logger:
                await self._log('info', "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ö–æ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", {
                    "result": result,
                    "result_type": type(result).__name__,
                    "result_keys": list(result.keys()) if isinstance(result, dict) else "not_dict"
                })
            
            return result
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö–æ—Å—Ç–æ–≤: {str(e)}"
            if self.logger:
                await self._log('error', error_msg)
            raise Exception(error_msg)
    
    async def _save_clean_records_to_db(self, clean_records: List[Dict[str, str]], task_id: int, update_progress) -> int:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—á–∏—â–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            await self._log('info', f"–ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {len(clean_records)} –æ—á–∏—â–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ —Ö–æ—Å—Ç–∞–º
            await self._update_task_activity(task_id, "–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–∞–ø–∏—Å–µ–π –ø–æ —Ö–æ—Å—Ç–∞–º")
            grouped_hosts = self._group_vm_data_by_hosts(clean_records)
            await self._log('info', f"–°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ {len(grouped_hosts)} —Ö–æ—Å—Ç–æ–≤ –∏–∑ {len(clean_records)} –∑–∞–ø–∏—Å–µ–π")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            await self.db.update_background_task(task_id, **{
                'total_records': len(grouped_hosts),
                'processed_records': 0
            })
            await self._update_task_activity(task_id, f"–ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {len(grouped_hosts)} —Ö–æ—Å—Ç–æ–≤")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–æ—Å—Ç—ã —Å —Ä–∞—Å—á–µ—Ç–æ–º —Ä–∏—Å–∫–æ–≤
            result = await self._save_hosts_with_risks(task_id, grouped_hosts)
            await self._log('info', "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ö–æ—Å—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ", {"result": result})
            
            return len(grouped_hosts)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—á–∏—â–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {e}")
            await self._log('error', f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—á–∏—â–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {str(e)}")
            raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—á–∏—â–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {str(e)}")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å worker"""
        self.is_running = False
