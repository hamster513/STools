"""
VM MaxPatrol Worker –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
"""
import csv
import io
import json
import os
import requests
from typing import Dict, List, Any, Optional
from datetime import datetime
from database import get_db
from database.risk_calculation import calculate_risk_score
from services.simple_logging_service import simple_logging_service
import traceback


class VMWorker:
    """Worker –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ VM MaxPatrol"""
    
    def __init__(self):
        self.db = get_db()
        self.is_running = True
        self.logger = None
        self.vm_data_dir = "/app/data/vm_imports"
        self._ensure_data_dir()
    
    def _ensure_data_dir(self):
        """–°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö VM –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        try:
            if not os.path.exists(self.vm_data_dir):
                os.makedirs(self.vm_data_dir, exist_ok=True)
        except PermissionError:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            import tempfile
            self.vm_data_dir = os.path.join(tempfile.gettempdir(), 'stools_vm_imports')
            os.makedirs(self.vm_data_dir, exist_ok=True)
    
    def _get_vm_data_file_path(self, task_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–∞–Ω–Ω—ã—Ö VM –¥–ª—è –∑–∞–¥–∞—á–∏"""
        return os.path.join(self.vm_data_dir, f"vm_data_{task_id}.json")
    
    def _cleanup_old_vm_files(self):
        """–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö VM"""
        try:
            if os.path.exists(self.vm_data_dir):
                for filename in os.listdir(self.vm_data_dir):
                    if filename.startswith("vm_data_") and filename.endswith(".json"):
                        file_path = os.path.join(self.vm_data_dir, filename)
                        os.remove(file_path)
                        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª VM –¥–∞–Ω–Ω—ã—Ö: {filename}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ VM: {e}")
    
    async def _save_vm_data_to_file(self, task_id: int, vm_data: List[Dict[str, str]]) -> str:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ VM –≤ JSON —Ñ–∞–π–ª"""
        try:
            file_path = self._get_vm_data_file_path(task_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(vm_data, f, ensure_ascii=False, indent=2)
            
            await self._log('info', f"–î–∞–Ω–Ω—ã–µ VM —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {file_path}", {
                "file_path": file_path,
                "records_count": len(vm_data)
            })
            
            return file_path
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö VM –≤ —Ñ–∞–π–ª: {str(e)}"
            await self._log('error', error_msg)
            raise Exception(error_msg)
    
    async def _load_vm_data_from_file(self, task_id: int) -> List[Dict[str, str]]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ VM –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            file_path = self._get_vm_data_file_path(task_id)
            
            if not os.path.exists(file_path):
                raise Exception(f"–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö VM –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            
            with open(file_path, 'r', encoding='utf-8') as f:
                vm_data = json.load(f)
            
            await self._log('info', f"–î–∞–Ω–Ω—ã–µ VM –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞: {file_path}", {
                "file_path": file_path,
                "records_count": len(vm_data)
            })
            
            return vm_data
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö VM –∏–∑ —Ñ–∞–π–ª–∞: {str(e)}"
            await self._log('error', error_msg)
            raise Exception(error_msg)
    
    async def _log(self, level: str, message: str, data: dict = None):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if self.logger:
            if level == 'info':
                await self.logger.info(message, data)
            elif level == 'debug':
                await self.logger.debug(message, data)
            elif level == 'warning':
                await self.logger.warning(message, data)
            elif level == 'error':
                await self.logger.error(message, data)
    
    async def start_import(self, task_id: int, parameters: Dict[str, Any]) -> Dict:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ VM MaxPatrol"""
        try:
            print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç VM –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã VM –¥–∞–Ω–Ω—ã—Ö
            self._cleanup_old_vm_files()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            await self.db.update_background_task(task_id, **{
                'status': 'processing',
                'current_step': '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ VM'
            })
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VM
            vm_settings = await self.db.get_vm_settings()
            
            # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            if vm_settings.get('vm_detailed_logging') == 'true':
                self.logger = await simple_logging_service.create_task_logger(task_id, 'vm_import')
                await self._log('info', "–ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç VM –¥–∞–Ω–Ω—ã—Ö", {"task_id": task_id, "parameters": parameters})
                await self._log('debug', "–ü–æ–ª—É—á–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VM", {"vm_host": vm_settings.get('vm_host'), "vm_username": vm_settings.get('vm_username')})
            
            if not vm_settings.get('vm_host') or not vm_settings.get('vm_username'):
                error_msg = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ VM MaxPatrol –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
                await self._log('error', error_msg, {"vm_settings": vm_settings})
                raise Exception(error_msg)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            await self.db.update_background_task(task_id, **{
                'current_step': '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ VM MaxPatrol'
            })
            await self._log('info', "–ù–∞—á–∏–Ω–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –≤ VM MaxPatrol")
            
            token = await self._get_vm_token(
                vm_settings['vm_host'].strip(),
                vm_settings['vm_username'].strip(),
                vm_settings['vm_password'].strip(),
                vm_settings['vm_client_secret'].strip()
            )
            await self._log('info', "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ VM MaxPatrol —É—Å–ø–µ—à–Ω–∞")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ VM API
            await self.db.update_background_task(task_id, **{
                'current_step': '–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ VM API'
            })
            await self._log('info', "–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ VM API")
            
            vm_data = await self._get_vm_data(
                vm_settings['vm_host'].strip(),
                token,
                vm_settings
            )
            
            if not vm_data:
                error_msg = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ VM API"
                await self._log('error', error_msg)
                raise Exception(error_msg)
            
            await self._log('info', f"–ü–æ–ª—É—á–µ–Ω–æ {len(vm_data)} –∑–∞–ø–∏—Å–µ–π –∏–∑ VM API")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
            await self.db.update_background_task(task_id, **{
                'current_step': '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª'
            })
            await self._log('info', "–ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö VM –≤ —Ñ–∞–π–ª")
            
            file_path = await self._save_vm_data_to_file(task_id, vm_data)
            await self._log('info', f"–î–∞–Ω–Ω—ã–µ VM —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {file_path}")
            
            # –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç - —Ç–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            await self.db.update_background_task(task_id, **{
                'status': 'completed',
                'current_step': '–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª. –ì–æ—Ç–æ–≤–æ –∫ —Ä—É—á–Ω–æ–º—É –∏–º–ø–æ—Ä—Ç—É.',
                'end_time': datetime.now()
            })
            
            await self._log('info', f"–î–∞–Ω–Ω—ã–µ VM —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {file_path}. –ò–º–ø–æ—Ä—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ VM —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {file_path}")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
            if self.logger:
                await self.logger.close()
            
            return {
                "success": True,
                "count": len(vm_data),
                "message": f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(vm_data)} –∑–∞–ø–∏—Å–µ–π –≤ —Ñ–∞–π–ª. –ò–º–ø–æ—Ä—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
                "file_path": file_path
            }
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ VM –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
            print(f"‚ùå {error_msg}")
            print(f"‚ùå Traceback: {traceback.format_exc()}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            await self._log('error', error_msg, {"traceback": traceback.format_exc()})
            if self.logger:
                await self.logger.close()
            
            await self.db.update_background_task(task_id, **{
                'status': 'error',
                'error_message': error_msg,
                'end_time': datetime.now()
            })
            
            return {"success": False, "message": error_msg}
    
    async def start_manual_import(self, task_id: int, parameters: Dict[str, Any]) -> Dict:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä—É—á–Ω–æ–π –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ VM"""
        try:
            print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä—É—á–Ω–æ–π –∏–º–ø–æ—Ä—Ç VM –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            await self.db.update_background_task(task_id, **{
                'status': 'processing',
                'current_step': '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞'
            })
            
            # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            vm_settings = await self.db.get_vm_settings()
            if vm_settings.get('vm_detailed_logging') == 'true':
                self.logger = await simple_logging_service.create_task_logger(task_id, 'vm_manual_import')
                await self._log('info', "–ù–∞—á–∏–Ω–∞–µ–º —Ä—É—á–Ω–æ–π –∏–º–ø–æ—Ä—Ç VM –¥–∞–Ω–Ω—ã—Ö", {"task_id": task_id, "parameters": parameters})
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
            await self.db.update_background_task(task_id, **{
                'current_step': '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞'
            })
            await self._log('info', "–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞")
            
            vm_data_from_file = await self._load_vm_data_from_file(task_id)
            await self._log('info', f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(vm_data_from_file)} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ñ–∞–π–ª–∞")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ö–æ—Å—Ç–∞–º
            await self.db.update_background_task(task_id, **{
                'current_step': '–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ö–æ—Å—Ç–∞–º'
            })
            await self._log('info', "–ù–∞—á–∏–Ω–∞–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ö–æ—Å—Ç–∞–º")
            
            grouped_hosts = self._group_vm_data_by_hosts(vm_data_from_file)
            await self._log('info', f"–°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ {len(grouped_hosts)} —Ö–æ—Å—Ç–æ–≤ –∏–∑ {len(vm_data_from_file)} –∑–∞–ø–∏—Å–µ–π")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            await self.db.update_background_task(task_id, **{
                'total_records': len(grouped_hosts),
                'processed_records': 0
            })
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞—Å—á–µ—Ç–æ–º —Ä–∏—Å–∫–æ–≤
            await self.db.update_background_task(task_id, **{
                'current_step': '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞—Å—á–µ—Ç–æ–º —Ä–∏—Å–∫–æ–≤'
            })
            await self._log('info', "–ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ö–æ—Å—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞—Å—á–µ—Ç–æ–º —Ä–∏—Å–∫–æ–≤")
            
            result = await self._save_hosts_with_risks(task_id, grouped_hosts)
            await self._log('info', "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ö–æ—Å—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ", {"result": result})
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
            try:
                file_path = self._get_vm_data_file_path(task_id)
                os.remove(file_path)
                await self._log('info', f"–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö VM —É–¥–∞–ª–µ–Ω: {file_path}")
            except Exception as e:
                await self._log('warning', f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö VM: {e}")
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            await self.db.update_background_task(task_id, **{
                'status': 'completed',
                'current_step': '–†—É—á–Ω–æ–π –∏–º–ø–æ—Ä—Ç VM –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω',
                'processed_records': len(grouped_hosts),
                'total_records': len(grouped_hosts),
                'end_time': datetime.now()
            })
            
            await self._log('info', f"–†—É—á–Ω–æ–π –∏–º–ø–æ—Ä—Ç VM –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ: {len(grouped_hosts)} —Ö–æ—Å—Ç–æ–≤")
            print(f"‚úÖ –†—É—á–Ω–æ–π –∏–º–ø–æ—Ä—Ç VM –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω: {len(grouped_hosts)} —Ö–æ—Å—Ç–æ–≤")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
            if self.logger:
                await self.logger.close()
            
            return {
                "success": True,
                "count": len(grouped_hosts),
                "message": f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(grouped_hosts)} —Ö–æ—Å—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ VM"
            }
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ VM –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
            print(f"‚ùå {error_msg}")
            print(f"‚ùå Traceback: {traceback.format_exc()}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            await self._log('error', error_msg, {"traceback": traceback.format_exc()})
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
            await self.db.update_background_task(task_id, **{
                'status': 'failed',
                'current_step': f'–û—à–∏–±–∫–∞: {error_msg}',
                'end_time': datetime.now()
            })
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
            if self.logger:
                await self.logger.close()
            
            raise Exception(error_msg)
    
    async def _get_vm_token(self, host: str, username: str, password: str, client_secret: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è VM MaxPatrol"""
        try:
            if self.logger:
                await self._log('debug', "–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏", {"host": host, "username": username})
            
            url = f'https://{host}:3334/connect/token'
            
            headers = {
                'Content-Type': 'application/x-www-form-urlencoded'
            }
            
            data = {
                'username': username,
                'password': password,
                'client_id': 'mpx',
                'client_secret': client_secret,
                'grant_type': 'password',
                'response_type': 'code id_token',
                'scope': 'offline_access mpx.api'
            }
            
            response = requests.post(url, headers=headers, data=data, verify=False, timeout=30)
            response.raise_for_status()
            
            result = response.json()
            if 'access_token' not in result:
                error_msg = f"–¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω: {result}"
                if self.logger:
                    await self._log('error', error_msg, {"response": result})
                raise Exception(error_msg)
            
            if self.logger:
                await self._log('debug', "–¢–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                
            return result['access_token']
            
        except requests.exceptions.RequestException as e:
            error_msg = f"–û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            if self.logger:
                await self._log('error', error_msg)
            raise Exception(error_msg)
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {str(e)}"
            if self.logger:
                await self._log('error', error_msg)
            raise Exception(error_msg)
    
    async def _get_vm_data(self, host: str, token: str, settings: Dict[str, str]) -> List[Dict[str, str]]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ VM API"""
        try:
            await self._log('debug', "–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ VM API", {"host": host})
            
            # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            vm_limit = int(settings.get('vm_limit', 0))
            await self._log('debug', f"–õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π: {vm_limit} (0 = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)")
            
            # PDQL –∑–∞–ø—Ä–æ—Å —Å –ª–∏–º–∏—Ç–æ–º –∑–∞–ø–∏—Å–µ–π
            if vm_limit > 0:
                pdql = f"""select(@Host, Host.OsName, Host.@Groups, Host.@Vulners.CVEs, Host.UF_Criticality, Host.UF_Zone) 
                | filter(Host.OsName != null) 
                | limit({vm_limit})"""
            else:
                pdql = """select(@Host, Host.OsName, Host.@Groups, Host.@Vulners.CVEs, Host.UF_Criticality, Host.UF_Zone) 
                | filter(Host.OsName != null)"""
            
            if self.logger:
                await self._log('debug', "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω PDQL –∑–∞–ø—Ä–æ—Å", {"pdql": pdql})
            
            url = f'https://{host}/api/assets_temporal_readmodel/v1/assets_grid'
            params = {
                'pdql': pdql,
                'includeNestedGroups': False
            }
            
            headers = {
                'Content-Type': 'application/json',
                'Authorization': f'Bearer {token}'
            }
            
            # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
            if self.logger:
                await self._log('debug', "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞", {"url": url})
            
            response = requests.post(url, headers=headers, json=params, verify=False, timeout=60)
            response.raise_for_status()
            
            result = response.json()
            if 'token' not in result:
                error_msg = f"–¢–æ–∫–µ–Ω —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω: {result}"
                if self.logger:
                    await self._log('error', error_msg, {"response": result})
                raise Exception(error_msg)
            
            export_token = result['token']
            if self.logger:
                await self._log('debug', "–¢–æ–∫–µ–Ω —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –ü–æ–ª—É—á–∞–µ–º CSV –¥–∞–Ω–Ω—ã–µ
            export_url = f'https://{host}/api/assets_temporal_readmodel/v1/assets_grid/export?pdqlToken={export_token}'
            if self.logger:
                await self._log('debug', "–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º CSV –¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∞", {"export_url": export_url})
            
            export_response = requests.get(export_url, headers=headers, verify=False, timeout=300)
            export_response.raise_for_status()
            
            # –ü–∞—Ä—Å–∏–º CSV –¥–∞–Ω–Ω—ã–µ
            csv_content = export_response.text
            if self.logger:
                await self._log('debug', f"–ü–æ–ª—É—á–µ–Ω CSV –∫–æ–Ω—Ç–µ–Ω—Ç —Ä–∞–∑–º–µ—Ä–æ–º {len(csv_content)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # CSV —Ñ–∞–π–ª –±–æ–ª—å—à–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –¥–µ–±–∞–≥–∞
            
            csv_reader = csv.DictReader(io.StringIO(csv_content), delimiter=';')
            
            vm_data = []
            row_count = 0
            for row in csv_reader:
                row_count += 1
                if self.logger and row_count <= 5:  # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    await self._log('debug', f"–°—Ç—Ä–æ–∫–∞ {row_count}: {dict(row)}")
                
                vm_data.append({
                    'host': row['@Host'].strip('"'),
                    'os_name': row['Host.OsName'].strip('"'),
                    'groups': row['Host.@Groups'].strip('"'),
                    'cve': row['Host.@Vulners.CVEs'].strip('"'),
                    'criticality': row['Host.UF_Criticality'].strip('"'),
                    'zone': row['Host.UF_Zone'].strip('"')
                })
            
            if self.logger:
                await self._log('debug', f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {row_count} —Å—Ç—Ä–æ–∫ CSV, —Å–æ–∑–¥–∞–Ω–æ {len(vm_data)} –∑–∞–ø–∏—Å–µ–π")
            
            if self.logger:
                await self._log('info', f"–ü–∞—Ä—Å–∏–Ω–≥ CSV –∑–∞–≤–µ—Ä—à–µ–Ω: {len(vm_data)} –∑–∞–ø–∏—Å–µ–π")
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(vm_data)} –∑–∞–ø–∏—Å–µ–π –∏–∑ VM API")
            return vm_data
            
        except requests.exceptions.RequestException as e:
            error_msg = f"–û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫ VM API: {str(e)}"
            if self.logger:
                await self._log('error', error_msg)
            raise Exception(error_msg)
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ VM API: {str(e)}"
            if self.logger:
                await self._log('error', error_msg)
            raise Exception(error_msg)
    
    def _group_vm_data_by_hosts(self, vm_data: List[Dict[str, str]]) -> List[Dict[str, Any]]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ VM –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è hosts_repository (–æ–¥–∏–Ω CVE = –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å)"""
        result = []
        
        if self.logger:
            import asyncio
            asyncio.create_task(self.logger.debug(f"–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ {len(vm_data)} –∑–∞–ø–∏—Å–µ–π (–æ–¥–∏–Ω CVE = –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å)"))
        
        for record in vm_data:
            host_info = record['host']
            
            # –ü–∞—Ä—Å–∏–º hostname –∏ IP
            if ' (' in host_info:
                hostname = host_info.split(' (')[0]
                ip_address = host_info.split('(')[1].split(')')[0]
            else:
                hostname = host_info
                ip_address = ''
            
            # –ü–æ–ª—É—á–∞–µ–º CVE
            cve = record['cve']
            if not cve or not cve.strip():
                continue
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ CVE
            result.append({
                'hostname': hostname,
                'ip_address': ip_address,
                'cve': cve,
                'cvss': 0.0,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é CVSS = 0
                'criticality': record.get('criticality', 'Medium'),  # –ò–∑ Host.UF_Criticality
                'zone': record.get('zone', ''),  # –ò–∑ Host.UF_Zone
                'status': 'Active',
                'os_name': record.get('os_name', '')  # –î–æ–±–∞–≤–ª—è–µ–º os_name
            })
        
        if self.logger:
            import asyncio
            asyncio.create_task(self.logger.debug(f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {len(result)} –∑–∞–ø–∏—Å–µ–π –∏–∑ {len(vm_data)} –∏—Å—Ö–æ–¥–Ω—ã—Ö"))
        
        return result
    
    async def _save_hosts_with_risks(self, task_id: int, hosts: List[Dict[str, Any]]) -> Dict:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ö–æ—Å—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞—Å—á–µ—Ç–æ–º —Ä–∏—Å–∫–æ–≤"""
        try:
            if self.logger:
                await self._log('debug', f"–ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {len(hosts)} —Ö–æ—Å—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ö–æ—Å—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                for i, host in enumerate(hosts[:3]):
                    await self._log('debug', f"–•–æ—Å—Ç {i+1}: {host}")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤
            settings = await self.db.get_settings()
            if self.logger:
                await self._log('debug', "–ü–æ–ª—É—á–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤", {"settings_keys": list(settings.keys())})
            
            # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            async def update_progress(step, message, progress_percent, processed_records=None, current_step_progress=None, processed_cves=None, updated_hosts=None):
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º processed_cves –µ—Å–ª–∏ processed_records –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
                    records_count = processed_records or processed_cves or 0
                    
                    await self.db.update_background_task(task_id, **{
                        'current_step': message,
                        'processed_records': records_count,
                        'progress_percent': progress_percent
                    })
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                    if self.logger and records_count and records_count % 100 == 0:
                        await self._log('debug', f"–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {records_count}/{len(hosts)} ({progress_percent}%)")
                        
                except Exception as e:
                    if self.logger:
                        await self._log('warning', f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å —Ä–∞—Å—á–µ—Ç–æ–º —Ä–∏—Å–∫–æ–≤
            if self.logger:
                await self._log('debug', "–í—ã–∑—ã–≤–∞–µ–º insert_hosts_records_with_progress")
            
            result = await self.db.insert_hosts_records_with_progress(hosts, update_progress)
            
            if self.logger:
                await self._log('info', "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ö–æ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", {
                    "result": result,
                    "result_type": type(result).__name__,
                    "result_keys": list(result.keys()) if isinstance(result, dict) else "not_dict"
                })
            
            return result
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö–æ—Å—Ç–æ–≤: {str(e)}"
            if self.logger:
                await self._log('error', error_msg)
            raise Exception(error_msg)
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å worker"""
        self.is_running = False
