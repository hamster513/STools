"""
–°–µ—Ä–≤–∏—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
"""
import asyncio
import schedule
import time
from datetime import datetime, timedelta
from typing import Dict, Any, Optional
from database import get_db

class SchedulerService:
    def __init__(self):
        self.db = get_db()
        self.running = False
        self.tasks = {}
    
    async def start_scheduler(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        if self.running:
            return
        
        self.running = True
        print("üïê Scheduler started")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        schedule.every().day.at("02:00").do(self.daily_update)
        schedule.every().hour.do(self.hourly_check)
        schedule.every(30).minutes.do(self.cleanup_old_data)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        asyncio.create_task(self._run_scheduler())
    
    async def stop_scheduler(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        self.running = False
        schedule.clear()
        print("üïê Scheduler stopped")
    
    async def _run_scheduler(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        while self.running:
            schedule.run_pending()
            await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    
    async def daily_update(self):
        """–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            print("üîÑ Starting daily update")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            existing_task = await self.db.get_background_task('hosts_update')
            if existing_task and existing_task['status'] in ['processing', 'initializing']:
                print("‚ö†Ô∏è Update already running, skipping daily update")
                return
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            result = await self.db.update_hosts_incremental(days_old=1)
            
            if result['success']:
                print(f"‚úÖ Daily update completed: {result['updated_count']} hosts updated")
            else:
                print(f"‚ùå Daily update failed: {result['message']}")
                
        except Exception as e:
            print(f"‚ùå Error in daily update: {e}")
    
    async def hourly_check(self):
        """–ï–∂–µ—á–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            print("üîç Hourly system check")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            conn = await self.db.get_connection()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ—Å—Ç–æ–≤ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö
            hosts_without_data = await conn.fetchval("""
                SELECT COUNT(*) FROM hosts 
                WHERE epss_score IS NULL AND exploits_count IS NULL
            """)
            
            if hosts_without_data > 0:
                print(f"‚ö†Ô∏è Found {hosts_without_data} hosts without data")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            last_update = await conn.fetchval("""
                SELECT MAX(GREATEST(epss_updated_at, exploits_updated_at, risk_updated_at)) 
                FROM hosts
            """)
            
            if last_update:
                hours_since_update = (datetime.now() - last_update).total_seconds() / 3600
                if hours_since_update > 24:
                    print(f"‚ö†Ô∏è Last update was {hours_since_update:.1f} hours ago")
            
        except Exception as e:
            print(f"‚ùå Error in hourly check: {e}")
    
    async def cleanup_old_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            print("üßπ Cleaning up old data")
            
            conn = await self.db.get_connection()
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
            deleted_tasks = await conn.execute("""
                DELETE FROM background_tasks 
                WHERE created_at < NOW() - INTERVAL '30 days'
            """)
            
            print(f"‚úÖ Cleaned up old background tasks")
            
        except Exception as e:
            print(f"‚ùå Error in cleanup: {e}")
    
    async def add_custom_schedule(self, task_name: str, schedule_config: Dict[str, Any]):
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
        try:
            frequency = schedule_config.get('frequency', 'daily')
            time_str = schedule_config.get('time', '02:00')
            
            if frequency == 'daily':
                schedule.every().day.at(time_str).do(self._run_custom_task, task_name)
            elif frequency == 'hourly':
                schedule.every().hour.do(self._run_custom_task, task_name)
            elif frequency == 'weekly':
                day = schedule_config.get('day', 'monday')
                schedule.every().monday.at(time_str).do(self._run_custom_task, task_name)
            
            self.tasks[task_name] = schedule_config
            print(f"‚úÖ Added custom schedule for task: {task_name}")
            
        except Exception as e:
            print(f"‚ùå Error adding custom schedule: {e}")
    
    async def _run_custom_task(self, task_name: str):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –∑–∞–¥–∞—á—É"""
        try:
            print(f"üîÑ Running custom task: {task_name}")
            
            if task_name == 'full_update':
                # –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                result = await self.db.update_hosts_epss_and_exploits_background_parallel()
            elif task_name == 'incremental_update':
                # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                days = self.tasks.get(task_name, {}).get('days_old', 1)
                result = await self.db.update_hosts_incremental(days_old=days)
            else:
                print(f"‚ö†Ô∏è Unknown custom task: {task_name}")
                return
            
            print(f"‚úÖ Custom task {task_name} completed")
            
        except Exception as e:
            print(f"‚ùå Error in custom task {task_name}: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler_service = SchedulerService()
