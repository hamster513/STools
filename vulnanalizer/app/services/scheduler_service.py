"""
–°–µ—Ä–≤–∏—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
"""
import asyncio
import schedule
import time
import csv
import json
from datetime import datetime, timedelta
from typing import Dict, Any, Optional
from pathlib import Path
from database import get_db
from utils.file_utils import split_file_by_size, extract_compressed_file
from utils.validation_utils import is_valid_ip
import traceback

class SchedulerService:
    def __init__(self):
        self.db = get_db()
        self.running = False
        self.tasks = {}
    
    async def start_scheduler(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        if self.running:
            return
        
        self.running = True
        print("üïê Scheduler started")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        schedule.every().day.at("02:00").do(self._run_async_task, self.daily_update)
        schedule.every().hour.do(self._run_async_task, self.hourly_check)
        schedule.every(30).minutes.do(self._run_async_task, self.cleanup_old_data)
        schedule.every(10).seconds.do(self._run_async_task, self.process_background_tasks)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        asyncio.create_task(self._run_scheduler())
    
    async def stop_scheduler(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        self.running = False
        schedule.clear()
        print("üïê Scheduler stopped")
    
    def _run_async_task(self, async_func):
        """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ async —Ñ—É–Ω–∫—Ü–∏–π –≤ schedule"""
        asyncio.create_task(async_func())
    
    async def _run_scheduler(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        print("üïê –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª")
        while self.running:
            try:
                schedule.run_pending()
                # –î–µ–ª–∞–µ–º —Ü–∏–∫–ª –±–æ–ª–µ–µ –æ—Ç–∑—ã–≤—á–∏–≤—ã–º: –ø—Ä–æ–≤–µ—Ä—è–µ–º pending –∫–∞–∂–¥—ã–µ 1 —Å–µ–∫—É–Ω–¥—É
                await asyncio.sleep(1)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
                print(f"‚ùå Error details: {traceback.format_exc()}")
                await asyncio.sleep(1)  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
    
    async def daily_update(self):
        """–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            print("üîÑ Starting daily update")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            existing_task = await self.db.get_background_task_by_type('hosts_update')
            if existing_task and existing_task['status'] in ['processing', 'initializing']:
                print("‚ö†Ô∏è Update already running, skipping daily update")
                return
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            result = await self.db.update_hosts_incremental(days_old=1)
            
            if result['success']:
                print(f"‚úÖ Daily update completed: {result['updated_count']} hosts updated")
            else:
                print(f"‚ùå Daily update failed: {result['message']}")
                
        except Exception as e:
            print(f"‚ùå Error in daily update: {e}")
    
    async def hourly_check(self):
        """–ï–∂–µ—á–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            print("üîç Hourly system check")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            conn = await self.db.get_connection()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ—Å—Ç–æ–≤ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö
            hosts_without_data = await conn.fetchval("""
                SELECT COUNT(*) FROM vulnanalizer.hosts 
                WHERE epss_score IS NULL AND exploits_count IS NULL
            """)
            
            if hosts_without_data > 0:
                print(f"‚ö†Ô∏è Found {hosts_without_data} hosts without data")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            last_update = await conn.fetchval("""
                SELECT MAX(GREATEST(epss_updated_at, exploits_updated_at, risk_updated_at)) 
                FROM vulnanalizer.hosts
            """)
            
            if last_update:
                hours_since_update = (datetime.now() - last_update).total_seconds() / 3600
                if hours_since_update > 24:
                    print(f"‚ö†Ô∏è Last update was {hours_since_update:.1f} hours ago")
            
        except Exception as e:
            print(f"‚ùå Error in hourly check: {e}")
    
    async def process_hosts_import_task(self, task_id: int, parameters: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –∏–º–ø–æ—Ä—Ç–∞ —Ö–æ—Å—Ç–æ–≤"""
        try:
            print(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á–∏ –∏–º–ø–æ—Ä—Ç–∞ —Ö–æ—Å—Ç–æ–≤ {task_id}")
            print(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {parameters}")
            print(f"üìã –¢–∏–ø –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {type(parameters)}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
            await self.db.update_background_task(task_id, **{
                'status': 'processing',
                'current_step': '–ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞ —Ö–æ—Å—Ç–æ–≤',
                'start_time': datetime.now()
            })
            
            file_path = parameters.get('file_path')
            filename = parameters.get('filename')
            
            if not file_path or not Path(file_path).exists():
                await self.db.update_background_task(task_id, **{
                    'status': 'error',
                    'error_message': f'–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}',
                    'end_time': datetime.now()
                })
                return
            
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            await self.db.update_background_task(task_id, **{
                'current_step': '–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞'
            })
            
            with open(file_path, 'rb') as f:
                content = f.read()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∞—Ä—Ö–∏–≤–æ–º
            is_archive = filename.lower().endswith(('.zip', '.gz', '.gzip'))
            
            if is_archive:
                await self.db.update_background_task(task_id, **{
                    'current_step': '–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞'
                })
                decoded_content = extract_compressed_file(content, filename)
            else:
                decoded_content = content.decode('utf-8-sig')
            
            # –†–∞–∑–¥–µ–ª—è–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            decoded_size_mb = len(decoded_content.encode('utf-8')) / (1024 * 1024)
            if decoded_size_mb > 100:
                await self.db.update_background_task(task_id, **{
                    'current_step': f'–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ ({decoded_size_mb:.1f} –ú–ë)'
                })
                parts = split_file_by_size(decoded_content, 100)
                total_parts = len(parts)
            else:
                parts = [decoded_content]
                total_parts = 1
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å—Ç–µ–π
            total_records = 0
            total_processed_lines = 0
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Å—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ total_records
            total_expected_records = 0
            for part_content in parts:
                part_lines = part_content.splitlines()
                reader = csv.DictReader(part_lines, delimiter=';')
                total_expected_records += len(list(reader))
            
            print(f"üìä –û–∂–∏–¥–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ {total_expected_records} –∑–∞–ø–∏—Å–µ–π")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É —Å –æ–±—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–ø–∏—Å–µ–π
            await self.db.update_background_task(task_id, **{
                'total_records': total_expected_records,
                'processed_records': 0
            })
            
            for part_index, part_content in enumerate(parts, 1):
                await self.db.update_background_task(task_id, **{
                    'current_step': f'–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å—Ç–∏ {part_index} –∏–∑ {total_parts}',
                    'processed_items': part_index,
                    'total_items': total_parts
                })
                
                # –ü–∞—Ä—Å–∏–º CSV
                part_lines = part_content.splitlines()
                reader = csv.DictReader(part_lines, delimiter=';')
                
                part_records = []
                for row in reader:
                    try:
                        # –ü–∞—Ä—Å–∏–º hostname –∏ IP
                        host_info = row['@Host'].strip('"')
                        hostname = host_info.split(' (')[0] if ' (' in host_info else host_info
                        ip_address = host_info.split('(')[1].split(')')[0] if ' (' in host_info else ''
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å IP
                        if ip_address and not is_valid_ip(ip_address):
                            continue
                        
                        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                        cve = row['Host.@Vulners.CVEs'].strip('"')
                        criticality = row['host.UF_Criticality'].strip('"')
                        zone = row['Host.UF_Zone'].strip('"')
                        os_name = row['Host.OsName'].strip('"')
                        
                        part_records.append({
                            'hostname': hostname,
                            'ip_address': ip_address,
                            'cve': cve,
                            'cvss': None,
                            'criticality': criticality,
                            'status': 'Active',
                            'os_name': os_name,
                            'zone': zone
                        })
                        
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏: {e}")
                        continue
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                await self.db.update_background_task(task_id, **{
                    'current_step': f'–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–∞—Å—Ç–∏ {part_index} –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö'
                })
                
                print(f"üíæ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {len(part_records)} –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
                
                # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                async def update_progress(step, message, progress_percent, current_step_progress=None, processed_records=None):
                    try:
                        print(f"üîß –í—ã–∑–æ–≤ update_progress: step={step}, message='{message}', progress_percent={progress_percent}, current_step_progress={current_step_progress}, processed_records={processed_records}")
                        
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è processed_records
                        current_processed = processed_records if processed_records is not None else 0
                        
                        print(f"üîß –í—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π current_processed: {current_processed}")
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                        update_data = {
                            'current_step': message,
                            'processed_records': current_processed,
                            'total_records': total_expected_records
                        }
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç—Ç–∞–ø–∞
                        if step == 'cleaning':
                            update_data['current_step'] = f"–≠—Ç–∞–ø 1/3: {message}"
                        elif step == 'inserting':
                            update_data['current_step'] = f"–≠—Ç–∞–ø 2/3: {message}"
                        elif step == 'calculating_risk':
                            # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–∞—Å—á–µ—Ç–µ —Ä–∏—Å–∫–æ–≤
                            if '–†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–æ–≤...' in message:
                                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º CVE –±–µ–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
                                import re
                                match = re.search(r'–†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–æ–≤\.\.\. \((\d+)/(\d+) CVE\)', message)
                                if match:
                                    current_cve = match.group(1)
                                    total_cve = match.group(2)
                                    update_data['current_step'] = f"–≠—Ç–∞–ø 3/3: –†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–æ–≤... ({current_cve}/{total_cve} CVE)"
                                else:
                                    update_data['current_step'] = f"–≠—Ç–∞–ø 3/3: {message}"
                            else:
                                update_data['current_step'] = f"–≠—Ç–∞–ø 3/3: {message}"
                        elif step == 'completed':
                            update_data['current_step'] = f"‚úÖ {message}"
                        
                        await self.db.update_background_task(task_id, **update_data)
                        print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞—á–∏ {task_id}: {message} ({progress_percent:.1f}%) - {current_processed}/{total_expected_records}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
                        import traceback
                        print(f"‚ö†Ô∏è Traceback: {traceback.format_exc()}")
                
                await self.db.insert_hosts_records_with_progress(part_records, update_progress)
                print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                
                total_records += len(part_records)
                total_processed_lines += len(part_lines)
                
                await self.db.update_background_task(task_id, **{
                    'processed_items': part_index,
                    'total_items': total_parts,
                    'processed_records': total_records,
                    'total_records': total_records
                })
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            await self.db.update_background_task(task_id, **{
                'status': 'completed',
                'current_step': '–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω',
                'processed_records': total_records,
                'total_records': total_records,
                'end_time': datetime.now()
            })
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                Path(file_path).unlink()
            except:
                pass
            
            print(f"‚úÖ –ò–º–ø–æ—Ä—Ç —Ö–æ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω: {total_records} –∑–∞–ø–∏—Å–µ–π")
            print(f"üéâ –ó–∞–¥–∞—á–∞ {task_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ö–æ—Å—Ç–æ–≤: {str(e)}"
            print(f"‚ùå {error_msg}")
            print(f"‚ùå –ó–∞–¥–∞—á–∞ {task_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π")
            
            await self.db.update_background_task(task_id, **{
                'status': 'error',
                'error_message': error_msg,
                'end_time': datetime.now()
            })

    async def process_hosts_update_task(self, task_id: int, parameters: dict):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–¥–∞—á—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ö–æ—Å—Ç–æ–≤"""
        try:
            print(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ö–æ—Å—Ç–æ–≤ {task_id}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ 'processing'
            await self.db.update_background_task(task_id, **{
                'status': 'processing',
                'current_step': '–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤'
            })
            
            # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            total_updated_hosts = 0  # –°—á–µ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤
            
            async def update_progress(status, step, **kwargs):
                nonlocal total_updated_hosts
                try:
                    # –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤
                    if kwargs.get('updated_hosts', 0) > 0:
                        total_updated_hosts += kwargs.get('updated_hosts', 0)
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                    total_cves = kwargs.get('total_cves', 0)
                    processed_cves = kwargs.get('processed_cves', 0)
                    progress_percent = 0
                    
                    if total_cves > 0:
                        progress_percent = int((processed_cves / total_cves) * 100)
                    
                    update_data = {
                        'current_step': step,
                        'total_items': total_cves,
                        'processed_items': processed_cves,
                        'total_records': kwargs.get('total_hosts', 0),
                        'updated_records': total_updated_hosts,
                        'progress_percent': progress_percent
                    }
                    
                    # –£–±–∏—Ä–∞–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è
                    update_data = {k: v for k, v in update_data.items() if v is not None}
                    
                    print(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É {task_id} —Å –¥–∞–Ω–Ω—ã–º–∏: {update_data}")
                    await self.db.update_background_task(task_id, **update_data)
                    print(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å hosts_update: {step} - {processed_cves}/{total_cves} CVE ({progress_percent}%), {total_updated_hosts} —Ö–æ—Å—Ç–æ–≤ (–≤—Å–µ–≥–æ)")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ hosts_update: {e}")
                    print(f"‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            update_type = parameters.get('update_type', 'parallel')
            
            if update_type == 'optimized_batch':
                print(f"üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ö–æ—Å—Ç–æ–≤")
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤
                result = await self.db.hosts_update.update_hosts_complete(update_progress)
            else:
                print(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤
                result = await self.db.hosts_update.update_hosts_complete(update_progress)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            if result['success']:
                await self.db.update_background_task(task_id, **{
                    'status': 'completed',
                    'current_step': '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
                    'total_items': result.get('processed_cves', 0),
                    'processed_items': result.get('processed_cves', 0),
                    'total_records': result.get('updated_count', 0),
                    'updated_records': result.get('updated_count', 0),
                    'end_time': datetime.now()
                })
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ö–æ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {result.get('updated_count', 0)} –∑–∞–ø–∏—Å–µ–π")
                print(f"üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {result}")
            else:
                await self.db.update_background_task(task_id, **{
                    'status': 'error',
                    'current_step': '–û—à–∏–±–∫–∞',
                    'error_message': result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'),
                    'end_time': datetime.now()
                })
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ö–æ—Å—Ç–æ–≤: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ö–æ—Å—Ç–æ–≤: {str(e)}"
            print(f"‚ùå {error_msg}")
            
            await self.db.update_background_task(task_id, **{
                'status': 'error',
                'error_message': error_msg,
                'end_time': datetime.now()
            })
    
    async def process_background_tasks(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á"""
        try:
            print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ 'idle'
            idle_tasks = await self.db.get_background_tasks_by_status('idle')
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á –≤ —Å—Ç–∞—Ç—É—Å–µ 'idle': {len(idle_tasks)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å—à–∏–µ –∑–∞–¥–∞—á–∏ (processing –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç)
            stuck_tasks = await self._check_stuck_tasks()
            if stuck_tasks:
                print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á: {len(stuck_tasks)}")
                for task in stuck_tasks:
                    print(f"‚ö†Ô∏è –ó–∞–≤–∏—Å—à–∞—è –∑–∞–¥–∞—á–∞ {task['id']} ({task['task_type']}): {task['current_step']}")
                    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≤–∏—Å—à–∏–µ –∑–∞–¥–∞—á–∏
                    await self._restart_stuck_task(task)
            
            if idle_tasks:
                print(f"üìã –î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á: {[(t['id'], t['task_type'], t['status']) for t in idle_tasks]}")
                
                for task in idle_tasks:
                    task_id = task['id']
                    task_type = task['task_type']
                    parameters_str = task.get('parameters', '{}')
                    
                    print(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É {task_id} —Ç–∏–ø–∞ {task_type}")
                    print(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–∞—á–∏: {parameters_str}")
                    
                    # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ JSON
                    import json
                    try:
                        parameters = json.loads(parameters_str) if parameters_str else {}
                        print(f"üìã –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {parameters}")
                    except json.JSONDecodeError:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")
                        parameters = {}
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ 'initializing'
                    await self.db.update_background_task(task_id, **{
                        'status': 'initializing',
                        'current_step': '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á–∏'
                    })
                    print(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ {task_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'initializing'")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
                    if task_type == 'hosts_import':
                        print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á–∏ –∏–º–ø–æ—Ä—Ç–∞ —Ö–æ—Å—Ç–æ–≤ {task_id} –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ")
                        task = asyncio.create_task(self.process_hosts_import_task(task_id, parameters))
                        task.add_done_callback(lambda t: self._handle_task_completion(t, task_id, 'hosts_import'))
                    elif task_type == 'hosts_update':
                        print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ö–æ—Å—Ç–æ–≤ {task_id} –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ")
                        task = asyncio.create_task(self.process_hosts_update_task(task_id, parameters))
                        task.add_done_callback(lambda t: self._handle_task_completion(t, task_id, 'hosts_update'))
                    elif task_type == 'risk_calculation':
                        print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á–∏ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤ {task_id} –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ")
                        task = asyncio.create_task(self.process_risk_calculation_task(task_id, parameters))
                        task.add_done_callback(lambda t: self._handle_task_completion(t, task_id, 'risk_calculation'))
                    elif task_type == 'risk_recalculation':
                        print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤ {task_id} –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ")
                        task = asyncio.create_task(self.process_risk_recalculation_task(task_id, parameters))
                        task.add_done_callback(lambda t: self._handle_task_completion(t, task_id, 'risk_recalculation'))
                    else:
                        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏: {task_type}")
                        await self.db.update_background_task(task_id, **{
                            'status': 'error',
                            'error_message': f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏: {task_type}',
                            'end_time': datetime.now()
                        })
            else:
                print("üìã –ù–µ—Ç –∑–∞–¥–∞—á –≤ —Å—Ç–∞—Ç—É—Å–µ 'idle' –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á: {e}")
            print(f"‚ùå Error details: {traceback.format_exc()}")
    
    async def _check_stuck_tasks(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å—à–∏–µ –∑–∞–¥–∞—á–∏ (processing –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç)"""
        try:
            conn = await self.db.get_connection()
            
            # –ò—â–µ–º –∑–∞–¥–∞—á–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ processing, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç
            query = """
                SELECT id, task_type, status, current_step, created_at, updated_at, start_time
                FROM vulnanalizer.background_tasks 
                WHERE status IN ('processing', 'initializing')
                AND updated_at < NOW() - INTERVAL '10 minutes'
                ORDER BY updated_at ASC
            """
            stuck_tasks = await conn.fetch(query)
            return [dict(task) for task in stuck_tasks]
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞–¥–∞—á: {e}")
            return []
        finally:
            await self.db.release_connection(conn)
    
    async def _restart_stuck_task(self, task):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–≤–∏—Å—à—É—é –∑–∞–¥–∞—á—É"""
        try:
            task_id = task['id']
            task_type = task['task_type']
            
            print(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≤–∏—Å—à—É—é –∑–∞–¥–∞—á—É {task_id} ({task_type})")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            parameters_str = task.get('parameters', '{}')
            import json
            try:
                parameters = json.loads(parameters_str) if parameters_str else {}
            except json.JSONDecodeError:
                parameters = {}
            
            # –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É
            await self.db.update_background_task(task_id, **{
                'status': 'cancelled',
                'current_step': '–û—Ç–º–µ–Ω–µ–Ω–æ: –∑–∞–≤–∏—Å–ª–∞',
                'error_message': '–ó–∞–¥–∞—á–∞ –∑–∞–≤–∏—Å–ª–∞ –∏ –±—ã–ª–∞ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏',
                'end_time': datetime.now()
            })
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
            new_task_id = await self.db.create_background_task(
                task_type=task_type,
                parameters=parameters,
                description=f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–≤–∏—Å—à–µ–π –∑–∞–¥–∞—á–∏ {task_id}"
            )
            
            print(f"‚úÖ –ó–∞–≤–∏—Å—à–∞—è –∑–∞–¥–∞—á–∞ {task_id} –æ—Ç–º–µ–Ω–µ–Ω–∞, —Å–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ {new_task_id}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∑–∞–≤–∏—Å—à–µ–π –∑–∞–¥–∞—á–∏ {task['id']}: {e}")
    
    async def cleanup_old_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            print("üßπ Cleaning up old data")
            
            conn = await self.db.get_connection()
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
            deleted_tasks = await conn.execute("""
                DELETE FROM vulnanalizer.background_tasks 
                WHERE created_at < NOW() - INTERVAL '30 days'
            """)
            
            print(f"‚úÖ Cleaned up old background tasks")
            
        except Exception as e:
            print(f"‚ùå Error in cleanup: {e}")
    
    async def add_custom_schedule(self, task_name: str, schedule_config: Dict[str, Any]):
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
        try:
            frequency = schedule_config.get('frequency', 'daily')
            time_str = schedule_config.get('time', '02:00')
            
            if frequency == 'daily':
                schedule.every().day.at(time_str).do(self._run_custom_task, task_name)
            elif frequency == 'hourly':
                schedule.every().hour.do(self._run_custom_task, task_name)
            elif frequency == 'weekly':
                day = schedule_config.get('day', 'monday')
                schedule.every().monday.at(time_str).do(self._run_custom_task, task_name)
            
            self.tasks[task_name] = schedule_config
            print(f"‚úÖ Added custom schedule for task: {task_name}")
            
        except Exception as e:
            print(f"‚ùå Error adding custom schedule: {e}")
    
    async def _run_custom_task(self, task_name: str):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –∑–∞–¥–∞—á—É"""
        try:
            print(f"üîÑ Running custom task: {task_name}")
            
            if task_name == 'full_update':
                # –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                result = await self.db.update_hosts_complete()
            elif task_name == 'incremental_update':
                # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                days = self.tasks.get(task_name, {}).get('days_old', 1)
                result = await self.db.update_hosts_incremental(days_old=days)
            else:
                print(f"‚ö†Ô∏è Unknown custom task: {task_name}")
                return
            
            print(f"‚úÖ Custom task {task_name} completed")
            
        except Exception as e:
            print(f"‚ùå Error in custom task {task_name}: {e}")

    def _handle_task_completion(self, task, task_id: int, task_type: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        try:
            if task.cancelled():
                print(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ {task_id} ({task_type}) –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            elif task.exception():
                error = task.exception()
                print(f"‚ùå –ó–∞–¥–∞—á–∞ {task_id} ({task_type}) –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {error}")
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î
                asyncio.create_task(self._update_task_error_status(task_id, str(error)))
            else:
                result = task.result()
                print(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_id} ({task_type}) —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task_id}: {e}")

    async def _update_task_error_status(self, task_id: int, error_message: str):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –Ω–∞ error"""
        try:
            await self.db.update_background_task(task_id, **{
                'status': 'error',
                'error_message': error_message,
                'end_time': datetime.now()
            })
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ {task_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ error")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ {task_id}: {e}")

    async def process_risk_calculation_task(self, task_id: int, parameters: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤ –¥–ª—è —Ö–æ—Å—Ç–æ–≤ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á–µ—Ç —Ä–∏—Å–∫–æ–≤ –¥–ª—è —Ö–æ—Å—Ç–æ–≤ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö (–∑–∞–¥–∞—á–∞ {task_id})")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ 'processing'
            await self.db.update_background_task(task_id, **{
                'status': 'processing',
                'current_step': '–ü–æ–∏—Å–∫ —Ö–æ—Å—Ç–æ–≤ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö EPSS –∏ Risk',
                'start_time': datetime.now()
            })
            
            # –ü–æ–ª—É—á–∞–µ–º —Ö–æ—Å—Ç—ã –±–µ–∑ EPSS –∏ Risk –¥–∞–Ω–Ω—ã—Ö
            conn = await self.db.get_connection()
            
            # –ù–∞—Ö–æ–¥–∏–º CVE —Ö–æ—Å—Ç–æ–≤ –±–µ–∑ EPSS –¥–∞–Ω–Ω—ã—Ö
            cve_query = """
                SELECT DISTINCT h.cve 
                FROM vulnanalizer.hosts h 
                LEFT JOIN vulnanalizer.epss e ON h.cve = e.cve 
                WHERE h.cve IS NOT NULL AND h.cve != '' 
                AND (h.epss_score IS NULL OR h.risk_score IS NULL)
                AND e.cve IS NOT NULL
                ORDER BY h.cve
            """
            cve_rows = await conn.fetch(cve_query)
            
            if not cve_rows:
                print("‚úÖ –ù–µ—Ç —Ö–æ—Å—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤")
                await self.db.update_background_task(task_id, **{
                    'status': 'completed',
                    'current_step': '–ù–µ—Ç —Ö–æ—Å—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤',
                    'end_time': datetime.now()
                })
                return
            
            total_cves = len(cve_rows)
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ {total_cves} CVE –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            await self.db.update_background_task(task_id, **{
                'total_items': total_cves,
                'current_step': f'–ù–∞–π–¥–µ–Ω–æ {total_cves} CVE –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤'
            })
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            settings_query = "SELECT key, value FROM vulnanalizer.settings"
            settings_rows = await conn.fetch(settings_query)
            settings = {row['key']: row['value'] for row in settings_rows}
            
            # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            async def update_progress(step: str, message: str, progress_percent: int = 0, **kwargs):
                await self.db.update_background_task(task_id, **{
                    'current_step': message,
                    'progress_percent': progress_percent,
                    'processed_items': kwargs.get('processed_cves', 0),
                    'total_items': total_cves,
                    'processed_records': kwargs.get('updated_hosts', 0)
                })
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ö–æ—Å—Ç–æ–≤
            await self.db.risk_calculation.update_hosts_complete(update_progress)
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
            await self.db.update_background_task(task_id, **{
                'status': 'completed',
                'current_step': f'–†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {total_cves} CVE',
                'end_time': datetime.now()
            })
            
            print(f"‚úÖ –†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {total_cves} CVE")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤: {e}")
            print(f"‚ùå Error details: {traceback.format_exc()}")
            
            await self.db.update_background_task(task_id, **{
                'status': 'error',
                'current_step': '–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤',
                'error_message': str(e),
                'end_time': datetime.now()
            })

    async def process_risk_recalculation_task(self, task_id: int, parameters: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤ –¥–ª—è –í–°–ï–• —Ö–æ—Å—Ç–æ–≤"""
        try:
            print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç —Ä–∏—Å–∫–æ–≤ –¥–ª—è –í–°–ï–• —Ö–æ—Å—Ç–æ–≤ (–∑–∞–¥–∞—á–∞ {task_id})")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ 'processing'
            await self.db.update_background_task(task_id, **{
                'status': 'processing',
                'current_step': '–ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Ö–æ—Å—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤',
                'start_time': datetime.now()
            })
            
            # –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Ö–æ—Å—Ç—ã —Å CVE
            conn = await self.db.get_connection()
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ CVE —Ö–æ—Å—Ç–æ–≤
            cve_query = """
                SELECT DISTINCT h.cve 
                FROM vulnanalizer.hosts h 
                WHERE h.cve IS NOT NULL AND h.cve != '' 
                ORDER BY h.cve
            """
            cve_rows = await conn.fetch(cve_query)
            
            if not cve_rows:
                print("‚úÖ –ù–µ—Ç —Ö–æ—Å—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤")
                await self.db.update_background_task(task_id, **{
                    'status': 'completed',
                    'current_step': '–ù–µ—Ç —Ö–æ—Å—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤',
                    'end_time': datetime.now()
                })
                return
            
            total_cves = len(cve_rows)
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ {total_cves} CVE –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            await self.db.update_background_task(task_id, **{
                'total_items': total_cves,
                'current_step': f'–ù–∞–π–¥–µ–Ω–æ {total_cves} CVE –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤'
            })
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            settings_query = "SELECT key, value FROM vulnanalizer.settings"
            settings_rows = await conn.fetch(settings_query)
            settings = {row['key']: row['value'] for row in settings_rows}
            
            # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            async def update_progress(step: str, message: str, progress_percent: int = 0, **kwargs):
                await self.db.update_background_task(task_id, **{
                    'current_step': message,
                    'progress_percent': progress_percent,
                    'processed_items': kwargs.get('processed_cves', 0),
                    'total_items': total_cves,
                    'processed_records': kwargs.get('updated_hosts', 0)
                })
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤
            await self.db.risk_calculation.recalculate_all_risks(update_progress)
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
            await self.db.update_background_task(task_id, **{
                'status': 'completed',
                'current_step': f'–ü–µ—Ä–µ—Å—á–µ—Ç —Ä–∏—Å–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {total_cves} CVE',
                'end_time': datetime.now()
            })
            
            print(f"‚úÖ –ü–µ—Ä–µ—Å—á–µ—Ç —Ä–∏—Å–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {total_cves} CVE")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤: {e}")
            print(f"‚ùå Error details: {traceback.format_exc()}")
            
            await self.db.update_background_task(task_id, **{
                'status': 'error',
                'current_step': '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤',
                'error_message': str(e),
                'end_time': datetime.now()
            })

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler_service = SchedulerService()
