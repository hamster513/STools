"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è Worker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
–û—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
"""
import asyncio
import signal
import sys
from database import get_db
from services.scheduler_service import scheduler_service

class WorkerApp:
    def __init__(self):
        self.running = False
        self.db = get_db()
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ worker –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        print("üöÄ –ó–∞–ø—É—Å–∫ Worker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            conn = await self.db.get_connection()
            await conn.execute("SELECT 1")
            await self.db.release_connection(conn)
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            await scheduler_service.start_scheduler()
            print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω")
            
            self.running = True
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            while self.running:
                await asyncio.sleep(1)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Worker: {e}")
            sys.exit(1)
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ worker –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        print("üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Worker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...")
        self.running = False
        
        try:
            await scheduler_service.stop_scheduler()
            print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        
        print("üîÑ Worker –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
worker_app = WorkerApp()

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    print(f"üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Worker...")
    asyncio.create_task(worker_app.stop())

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        await worker_app.start()
    except KeyboardInterrupt:
        print("üì° –ü–æ–ª—É—á–µ–Ω SIGINT, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await worker_app.stop()

if __name__ == "__main__":
    asyncio.run(main())
