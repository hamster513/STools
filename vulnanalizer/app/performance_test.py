#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
"""
import asyncio
import asyncpg
from datetime import datetime
import time

async def test_performance():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤"""
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = await asyncpg.connect(
        host='postgres',
        port=5432,
        user='stools_user',
        password='stools_pass',
        database='stools_db'
    )
    
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ö–µ–º—É
        await conn.execute('SET search_path TO vulnanalizer')
        
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–µ—Ç–æ–¥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ—Å—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        total_hosts = await conn.fetchval("SELECT COUNT(*) FROM hosts")
        print(f"üìä –í—Å–µ–≥–æ —Ö–æ—Å—Ç–æ–≤ –≤ –±–∞–∑–µ: {total_hosts}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö CVE
        total_cves = await conn.fetchval("SELECT COUNT(DISTINCT cve) FROM hosts WHERE cve IS NOT NULL AND cve != ''")
        print(f"üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö CVE: {total_cves}")
        
        # –¢–µ—Å—Ç 1: Batch –∑–∞–ø—Ä–æ—Å—ã (–∫–∞–∫ –≤ –∏–º–ø–æ—Ä—Ç–µ)
        print(f"\nüß™ –¢–ï–°–¢ 1: Batch –∑–∞–ø—Ä–æ—Å—ã (–º–µ—Ç–æ–¥ –∏–º–ø–æ—Ä—Ç–∞)")
        start_time = time.time()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 100 CVE –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_cves = await conn.fetch("SELECT DISTINCT cve FROM hosts WHERE cve IS NOT NULL AND cve != '' ORDER BY cve LIMIT 100")
        cve_list = [row['cve'] for row in test_cves]
        
        # Batch –∑–∞–ø—Ä–æ—Å –¥–ª—è EPSS
        epss_start = time.time()
        epss_query = "SELECT cve, epss, percentile FROM epss WHERE cve = ANY($1::text[])"
        epss_rows = await conn.fetch(epss_query, cve_list)
        epss_time = time.time() - epss_start
        
        batch_total_time = time.time() - start_time
        
        print(f"   ‚úÖ EPSS batch –∑–∞–ø—Ä–æ—Å: {epss_time:.3f}s ({len(epss_rows)} –∑–∞–ø–∏—Å–µ–π)")
        print(f"   üöÄ –û–±—â–µ–µ –≤—Ä–µ–º—è batch –∑–∞–ø—Ä–æ—Å–æ–≤: {batch_total_time:.3f}s")
        
        # –¢–µ—Å—Ç 2: –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º –º–µ—Ç–æ–¥–µ)
        print(f"\nüß™ –¢–ï–°–¢ 2: –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥)")
        start_time = time.time()
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10 CVE –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—á—Ç–æ–±—ã –Ω–µ –∂–¥–∞—Ç—å —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ)
        test_cves_small = cve_list[:10]
        
        individual_epss_time = 0
        
        for cve in test_cves_small:
            # EPSS –∑–∞–ø—Ä–æ—Å
            epss_start = time.time()
            epss_row = await conn.fetchrow("SELECT epss, percentile FROM epss WHERE cve = $1", cve)
            individual_epss_time += time.time() - epss_start
        
        individual_total_time = time.time() - start_time
        
        print(f"   ‚è±Ô∏è EPSS –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {individual_epss_time:.3f}s (10 –∑–∞–ø—Ä–æ—Å–æ–≤)")
        print(f"   üêå –û–±—â–µ–µ –≤—Ä–µ–º—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {individual_total_time:.3f}s")
        
        # –†–∞—Å—á–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        print(f"\nüìä –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
        
        # –≠–∫—Å—Ç—Ä–∞–ø–æ–ª–∏—Ä—É–µ–º –Ω–∞ –≤—Å–µ CVE
        estimated_individual_time = (individual_total_time / 10) * total_cves
        speedup = estimated_individual_time / batch_total_time if batch_total_time > 0 else float('inf')
        
        print(f"   üìà Batch –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è {total_cves} CVE: ~{batch_total_time:.3f}s")
        print(f"   üìâ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è {total_cves} CVE: ~{estimated_individual_time:.3f}s")
        print(f"   üöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.1f}x")
        
        # –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
        batch_queries = 1  # EPSS
        individual_queries = total_cves * 1  # 1 –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–∞–∂–¥—ã–π CVE
        
        print(f"\nüìä –ö–û–õ–ò–ß–ï–°–¢–í–û –ó–ê–ü–†–û–°–û–í:")
        print(f"   üöÄ Batch –º–µ—Ç–æ–¥: {batch_queries} –∑–∞–ø—Ä–æ—Å–æ–≤")
        print(f"   üêå –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥: {individual_queries} –∑–∞–ø—Ä–æ—Å–æ–≤")
        print(f"   üìâ –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤: {individual_queries / batch_queries:.0f}x")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print(f"   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ batch –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π")
        print(f"   ‚úÖ –ö—ç—à–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏")
        print(f"   ‚úÖ –ò–∑–±–µ–≥–∞–π—Ç–µ –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞ –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π")
        print(f"   ‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ SQL –∑–∞–ø—Ä–æ—Å—ã —Å –ø–æ–º–æ—â—å—é ANY() –∏ IN()")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        print(f"‚ùå –î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
    finally:
        await conn.close()

if __name__ == "__main__":
    asyncio.run(test_performance())
