#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è STools
–°–æ–∑–¥–∞–µ—Ç CSV —Ñ–∞–π–ª —Å 100k –∑–∞–ø–∏—Å–µ–π —Ö–æ—Å—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–µ–∞–ª—å–Ω—ã–µ CVE –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
- 90k –∑–∞–ø–∏—Å–µ–π —Å CVE –∏–∑ NVD (—Å–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ)
- 10k –∑–∞–ø–∏—Å–µ–π —Å CVE –∏–∑ ExploitDB (—Å–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ)
"""

import csv
import random
import string
import subprocess
import tempfile
import os
from datetime import datetime, timedelta
from typing import List, Dict, Set

class RealisticDataGenerator:
    def __init__(self):
        self.nvd_cves = []
        self.exploitdb_cves = []
        
    def get_cves_from_database(self):
        """–ü–æ–ª—É—á–∞–µ—Ç CVE –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ docker exec"""
        print("üì• –ü–æ–ª—É—á–µ–Ω–∏–µ CVE –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º CVE –∏–∑ —Ç–∞–±–ª–∏—Ü—ã cve (NVD)
            print("üîç –ó–∞–≥—Ä—É–∑–∫–∞ CVE –∏–∑ NVD...")
            nvd_query = """
                SELECT cve_id, description, cvss_v3_base_score, cvss_v2_base_score, 
                       cvss_v3_base_severity, cvss_v2_base_severity
                FROM vulnanalizer.cve 
                WHERE cve_id IS NOT NULL 
                ORDER BY RANDOM() 
                LIMIT 90000;
            """
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ docker exec
            result = subprocess.run([
                'docker', 'exec', 'stools_postgres', 'psql', 
                '-U', 'stools_user', '-d', 'stools_db', 
                '-c', nvd_query, '--csv', '--no-align', '--tuples-only'
            ], capture_output=True, text=True)
            
            if result.returncode == 0:
                lines = result.stdout.strip().split('\n')
                for line in lines:
                    if line and '|' in line:
                        parts = line.split('|')
                        if len(parts) >= 6:
                            self.nvd_cves.append({
                                'cve_id': parts[0].strip(),
                                'description': parts[1].strip() if parts[1] else '',
                                'cvss_v3_base_score': float(parts[2]) if parts[2] and parts[2] != 'NULL' else None,
                                'cvss_v2_base_score': float(parts[3]) if parts[3] and parts[3] != 'NULL' else None,
                                'cvss_v3_base_severity': parts[4].strip() if parts[4] and parts[4] != 'NULL' else None,
                                'cvss_v2_base_severity': parts[5].strip() if parts[5] and parts[5] != 'NULL' else None
                            })
                
                print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.nvd_cves)} CVE –∏–∑ NVD")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è CVE –∏–∑ NVD: {result.stderr}")
                self.nvd_cves = self.generate_fake_nvd_cves(90000)
            
            # –ü–æ–ª—É—á–∞–µ–º CVE –∏–∑ ExploitDB
            print("üîç –ó–∞–≥—Ä—É–∑–∫–∞ CVE –∏–∑ ExploitDB...")
            exploitdb_query = """
                SELECT DISTINCT unnest(cves) as cve_id
                FROM vulnanalizer.exploitdb 
                WHERE cves IS NOT NULL AND array_length(cves, 1) > 0
                ORDER BY RANDOM() 
                LIMIT 10000;
            """
            
            result = subprocess.run([
                'docker', 'exec', 'stools_postgres', 'psql', 
                '-U', 'stools_user', '-d', 'stools_db', 
                '-c', exploitdb_query, '--csv', '--no-align', '--tuples-only'
            ], capture_output=True, text=True)
            
            if result.returncode == 0:
                exploitdb_cve_ids = [line.strip() for line in result.stdout.strip().split('\n') if line.strip()]
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º CVE –∏–∑ ExploitDB
                for cve_id in exploitdb_cve_ids:
                    cve_info_query = f"""
                        SELECT cve_id, description, cvss_v3_base_score, cvss_v2_base_score, 
                               cvss_v3_base_severity, cvss_v2_base_severity
                        FROM vulnanalizer.cve 
                        WHERE cve_id = '{cve_id}';
                    """
                    
                    result = subprocess.run([
                        'docker', 'exec', 'stools_postgres', 'psql', 
                        '-U', 'stools_user', '-d', 'stools_db', 
                        '-c', cve_info_query, '--csv', '--no-align', '--tuples-only'
                    ], capture_output=True, text=True)
                    
                    if result.returncode == 0 and result.stdout.strip():
                        line = result.stdout.strip()
                        if '|' in line:
                            parts = line.split('|')
                            if len(parts) >= 6:
                                self.exploitdb_cves.append({
                                    'cve_id': parts[0].strip(),
                                    'description': parts[1].strip() if parts[1] else '',
                                    'cvss_v3_base_score': float(parts[2]) if parts[2] and parts[2] != 'NULL' else None,
                                    'cvss_v2_base_score': float(parts[3]) if parts[3] and parts[3] != 'NULL' else None,
                                    'cvss_v3_base_severity': parts[4].strip() if parts[4] and parts[4] != 'NULL' else None,
                                    'cvss_v2_base_severity': parts[5].strip() if parts[5] and parts[5] != 'NULL' else None
                                })
                
                print(f"üîß –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.exploitdb_cves)} CVE –∏–∑ ExploitDB")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è CVE –∏–∑ ExploitDB: {result.stderr}")
                self.exploitdb_cves = self.generate_fake_exploitdb_cves(10000)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã: {e}")
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ë–î
            self.nvd_cves = self.generate_fake_nvd_cves(90000)
            self.exploitdb_cves = self.generate_fake_exploitdb_cves(10000)
    
    def generate_fake_nvd_cves(self, count: int) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ CVE –¥–ª—è NVD –µ—Å–ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞"""
        cves = []
        for i in range(count):
            year = random.randint(1999, 2024)
            number = random.randint(1, 99999)
            cve_id = f"CVE-{year}-{number:05d}"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è
            descriptions = [
                "Buffer overflow vulnerability in the processing of malformed network packets",
                "Cross-site scripting (XSS) vulnerability in web interface",
                "SQL injection vulnerability in database query processing",
                "Privilege escalation vulnerability in system service",
                "Denial of service vulnerability in network protocol implementation",
                "Information disclosure vulnerability in error handling",
                "Authentication bypass vulnerability in login mechanism",
                "Code execution vulnerability in file parser",
                "Memory corruption vulnerability in image processing",
                "Path traversal vulnerability in file upload functionality"
            ]
            
            cvss_v3_score = random.choice([None, round(random.uniform(0.1, 10.0), 1)])
            cvss_v2_score = random.choice([None, round(random.uniform(0.1, 10.0), 1)])
            
            cves.append({
                'cve_id': cve_id,
                'description': random.choice(descriptions),
                'cvss_v3_base_score': cvss_v3_score,
                'cvss_v2_base_score': cvss_v2_score,
                'cvss_v3_base_severity': self.get_severity_v3(cvss_v3_score) if cvss_v3_score else None,
                'cvss_v2_base_severity': self.get_severity_v2(cvss_v2_score) if cvss_v2_score else None
            })
        
        return cves
    
    def generate_fake_exploitdb_cves(self, count: int) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ CVE –¥–ª—è ExploitDB –µ—Å–ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞"""
        cves = []
        for i in range(count):
            year = random.randint(2010, 2024)  # –ë–æ–ª–µ–µ –Ω–æ–≤—ã–µ CVE –¥–ª—è —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤
            number = random.randint(1, 99999)
            cve_id = f"CVE-{year}-{number:05d}"
            
            # –ë–æ–ª–µ–µ —Å–µ—Ä—å–µ–∑–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –¥–ª—è ExploitDB
            descriptions = [
                "Remote code execution vulnerability in web application",
                "Privilege escalation vulnerability in kernel driver",
                "Authentication bypass vulnerability in admin panel",
                "SQL injection vulnerability in user input processing",
                "Buffer overflow vulnerability in network service",
                "Cross-site scripting vulnerability in user interface",
                "File upload vulnerability leading to code execution",
                "Memory corruption vulnerability in media player",
                "Command injection vulnerability in system utility",
                "Path traversal vulnerability in file manager"
            ]
            
            # –ë–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–µ CVSS scores –¥–ª—è —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤
            cvss_v3_score = round(random.uniform(5.0, 10.0), 1)
            cvss_v2_score = round(random.uniform(5.0, 10.0), 1)
            
            cves.append({
                'cve_id': cve_id,
                'description': random.choice(descriptions),
                'cvss_v3_base_score': cvss_v3_score,
                'cvss_v2_base_score': cvss_v2_score,
                'cvss_v3_base_severity': self.get_severity_v3(cvss_v3_score),
                'cvss_v2_base_severity': self.get_severity_v2(cvss_v2_score)
            })
        
        return cves
    
    def get_severity_v3(self, score: float) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ –¥–ª—è CVSS v3"""
        if score is None:
            return None
        if score >= 9.0:
            return "Critical"
        elif score >= 7.0:
            return "High"
        elif score >= 4.0:
            return "Medium"
        elif score >= 0.1:
            return "Low"
        else:
            return "None"
    
    def get_severity_v2(self, score: float) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ –¥–ª—è CVSS v2"""
        if score is None:
            return None
        if score >= 7.0:
            return "High"
        elif score >= 4.0:
            return "Medium"
        elif score >= 0.1:
            return "Low"
        else:
            return "None"
    
    def generate_ip(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π IP –∞–¥—Ä–µ—Å"""
        return f"{random.randint(1, 254)}.{random.randint(1, 254)}.{random.randint(1, 254)}.{random.randint(1, 254)}"
    
    def generate_hostname(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è —Ö–æ—Å—Ç–∞"""
        prefixes = ['server', 'host', 'node', 'vm', 'container', 'instance', 'machine', 'workstation', 'laptop', 'desktop']
        suffixes = ['prod', 'dev', 'test', 'staging', 'backup', 'db', 'web', 'app', 'api', 'mail', 'dns', 'proxy']
        environments = ['corp', 'office', 'branch', 'remote', 'cloud', 'onprem']
        
        prefix = random.choice(prefixes)
        suffix = random.choice(suffixes)
        env = random.choice(environments)
        number = random.randint(1, 999)
        
        return f"{prefix}-{suffix}-{env}-{number:03d}"
    
    def generate_realistic_data(self, num_hosts: int = 100000, num_with_exploits: int = 10000) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ö–æ—Å—Ç–æ–≤"""
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É –Ω–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ CVE
        if len(self.nvd_cves) < num_hosts - num_with_exploits:
            print(f"‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ CVE –∏–∑ NVD. –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ...")
            additional_needed = num_hosts - num_with_exploits - len(self.nvd_cves)
            self.nvd_cves.extend(self.generate_fake_nvd_cves(additional_needed))
        
        if len(self.exploitdb_cves) < num_with_exploits:
            print(f"‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ CVE –∏–∑ ExploitDB. –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ...")
            additional_needed = num_with_exploits - len(self.exploitdb_cves)
            self.exploitdb_cves.extend(self.generate_fake_exploitdb_cves(additional_needed))
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º CVE –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
        random.shuffle(self.nvd_cves)
        random.shuffle(self.exploitdb_cves)
        
        hosts = []
        criticality_levels = ['Critical', 'High', 'Medium', 'Low', 'None']
        zones = ['DMZ', 'Internal', 'External', 'Management', 'Backup', 'Development', 'Production', 'Testing']
        os_names = ['Linux', 'Windows', 'macOS', 'FreeBSD', 'Ubuntu', 'CentOS', 'Debian', 'Red Hat', 'SUSE', 'Windows Server']
        
        nvd_index = 0
        exploitdb_index = 0
        
        for i in range(num_hosts):
            hostname = self.generate_hostname()
            ip = self.generate_ip()
            os_name = random.choice(os_names)
            zone = random.choice(zones)
            
            # –í—ã–±–∏—Ä–∞–µ–º CVE –¥–ª—è —Ö–æ—Å—Ç–∞
            if i < num_with_exploits:
                # –ü–µ—Ä–≤—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—É—á–∞—é—Ç CVE —Å —ç–∫—Å–ø–ª–æ–π—Ç–∞–º–∏
                if exploitdb_index < len(self.exploitdb_cves):
                    cve_data = self.exploitdb_cves[exploitdb_index]
                    exploitdb_index += 1
                else:
                    # –ï—Å–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å CVE —Å —ç–∫—Å–ø–ª–æ–π—Ç–∞–º–∏, –±–µ—Ä–µ–º –∏–∑ NVD
                    cve_data = self.nvd_cves[nvd_index % len(self.nvd_cves)]
                    nvd_index += 1
            else:
                # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—É—á–∞—é—Ç CVE –∏–∑ NVD
                cve_data = self.nvd_cves[nvd_index % len(self.nvd_cves)]
                nvd_index += 1
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ CVSS
            cvss_score = cve_data.get('cvss_v3_base_score') or cve_data.get('cvss_v2_base_score')
            if cvss_score:
                if cvss_score >= 9.0:
                    criticality = 'Critical'
                elif cvss_score >= 7.0:
                    criticality = 'High'
                elif cvss_score >= 4.0:
                    criticality = 'Medium'
                else:
                    criticality = 'Low'
            else:
                criticality = random.choice(criticality_levels)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å –æ–¥–Ω–∏–º CVE
            host = {
                '@Host': f'{hostname} ({ip})',
                'Host.OsName': os_name,
                'Host.@Vulners.CVEs': cve_data['cve_id'],
                'host.UF_Criticality': criticality,
                'Host.UF_Zone': zone
            }
            
            hosts.append(host)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ CVE (0-3 —à—Ç—É–∫–∏) –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            num_additional = random.randint(0, 3)
            
            for _ in range(num_additional):
                if random.random() < 0.3:  # 30% —à–∞–Ω—Å –≤–∑—è—Ç—å CVE —Å —ç–∫—Å–ø–ª–æ–π—Ç–∞–º–∏
                    if exploitdb_index < len(self.exploitdb_cves):
                        additional_cve_data = self.exploitdb_cves[exploitdb_index]
                        exploitdb_index += 1
                    else:
                        additional_cve_data = self.nvd_cves[nvd_index % len(self.nvd_cves)]
                        nvd_index += 1
                else:
                    additional_cve_data = self.nvd_cves[nvd_index % len(self.nvd_cves)]
                    nvd_index += 1
                
                if additional_cve_data['cve_id'] != cve_data['cve_id']:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ CVE
                    additional_cvss_score = additional_cve_data.get('cvss_v3_base_score') or additional_cve_data.get('cvss_v2_base_score')
                    if additional_cvss_score:
                        if additional_cvss_score >= 9.0:
                            additional_criticality = 'Critical'
                        elif additional_cvss_score >= 7.0:
                            additional_criticality = 'High'
                        elif additional_cvss_score >= 4.0:
                            additional_criticality = 'Medium'
                        else:
                            additional_criticality = 'Low'
                    else:
                        additional_criticality = random.choice(criticality_levels)
                    
                    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ CVE
                    additional_host = {
                        '@Host': f'{hostname} ({ip})',
                        'Host.OsName': os_name,
                        'Host.@Vulners.CVEs': additional_cve_data['cve_id'],
                        'host.UF_Criticality': additional_criticality,
                        'Host.UF_Zone': zone
                    }
                    
                    hosts.append(additional_host)
        
        return hosts
    
    def save_to_csv(self, hosts: List[Dict], filename: str = 'realistic_test_data_100k.csv'):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ CSV —Ñ–∞–π–ª"""
        
        fieldnames = ['@Host', 'Host.OsName', 'Host.@Vulners.CVEs', 'host.UF_Criticality', 'Host.UF_Zone']
        
        with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames, delimiter=';', quoting=csv.QUOTE_ALL)
            writer.writeheader()
            writer.writerows(hosts)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è
        import os
        file_size = os.path.getsize(filename) / (1024*1024)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª {filename}")
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(hosts):,}")
        print(f"üéØ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:.2f} –ú–ë")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ CVE
        nvd_count = len(self.nvd_cves)
        exploitdb_count = len(self.exploitdb_cves)
        print(f"üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ CVE –∏–∑ NVD: {nvd_count:,}")
        print(f"üîß –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ CVE –∏–∑ ExploitDB: {exploitdb_count:,}")

def main():
    print("üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    print("üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")
    print("   - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ—Å—Ç–æ–≤: 100,000")
    print("   - –•–æ—Å—Ç–æ–≤ —Å —ç–∫—Å–ø–ª–æ–π—Ç–∞–º–∏: 10,000")
    print("   - CVE –Ω–∞ —Ö–æ—Å—Ç: 1-5")
    print("   - –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö NVD –∏ ExploitDB —á–µ—Ä–µ–∑ docker exec")
    
    generator = RealisticDataGenerator()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
        print("\nüì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        generator.get_cves_from_database()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        print("\nüîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤...")
        hosts = generator.generate_realistic_data(100000, 10000)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        print("\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª...")
        generator.save_to_csv(hosts, 'realistic_test_data_100k.csv')
        
        print("\n‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    main()
