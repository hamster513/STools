class LogAnalizer {
    constructor() {
        this.selectedFiles = [];
        this.uploadedFiles = [];
        this.settings = {};
        this.presets = [];
        this.customSettings = [];
        this.currentEditingSetting = null;
        this.operationStatus = {}; // –•—Ä–∞–Ω–∏—Ç —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        this.init();
    }

    init() {
        this.setupTheme();
        this.setupNavigation();
        this.setupFileUpload();
        this.setupEventListeners();
        this.loadInitialData();
    }

    setupTheme() {
        const savedTheme = localStorage.getItem('theme') || 'light';
        document.documentElement.setAttribute('data-theme', savedTheme);
        this.updateThemeIcon(savedTheme);
    }

    updateThemeIcon(theme) {
        const themeBtn = document.getElementById('theme-toggle');
        const icon = themeBtn.querySelector('i');
        if (theme === 'dark') {
            icon.className = 'fas fa-moon';
        } else {
            icon.className = 'fas fa-sun';
        }
    }

    toggleTheme() {
        const currentTheme = document.documentElement.getAttribute('data-theme');
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        document.documentElement.setAttribute('data-theme', newTheme);
        localStorage.setItem('theme', newTheme);
        this.updateThemeIcon(newTheme);
    }

    setupNavigation() {
        const navLinks = document.querySelectorAll('.nav-link');
        navLinks.forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const page = link.getAttribute('data-page');
                this.switchPage(page);
            });
        });
    }

    switchPage(page) {
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.querySelectorAll('.page-content').forEach(content => {
            content.classList.remove('active');
        });

        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫
        document.querySelectorAll('.nav-link').forEach(link => {
            link.classList.remove('active');
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        const targetPage = document.getElementById(`${page}-page`);
        if (targetPage) {
            targetPage.classList.add('active');
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ —Å—Å—ã–ª–∫–µ
        const activeLink = document.querySelector(`[data-page="${page}"]`);
        if (activeLink) {
            activeLink.classList.add('active');
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if (page === 'import') {
            this.loadFiles();
        } else if (page === 'analysis') {
            this.loadPresets();
        } else if (page === 'settings') {
            this.loadSettings();
        }
    }

    setupFileUpload() {
        const uploadArea = document.getElementById('upload-area');
        const fileInput = document.getElementById('file-input');

        console.log('Setting up file upload handlers');

        // Drag and drop
        uploadArea.addEventListener('dragover', (e) => {
            e.preventDefault();
            uploadArea.classList.add('dragover');
        });

        uploadArea.addEventListener('dragleave', () => {
            uploadArea.classList.remove('dragover');
        });

        uploadArea.addEventListener('drop', (e) => {
            e.preventDefault();
            uploadArea.classList.remove('dragover');
            const files = Array.from(e.dataTransfer.files);
            console.log('Files dropped:', files);
            this.handleFiles(files);
        });

        // Click to select - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–ª–∏–∫ –Ω–µ –ø–æ –∫–Ω–æ–ø–∫–µ
        uploadArea.addEventListener('click', (e) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–∫ –Ω–µ –ø–æ –∫–Ω–æ–ø–∫–µ
            if (!e.target.closest('button')) {
                console.log('Upload area clicked (not button)');
                fileInput.click();
            }
        });

        fileInput.addEventListener('change', (e) => {
            console.log('File input change event triggered');
            const files = Array.from(e.target.files);
            console.log('Selected files:', files);
            this.handleFiles(files);
        });

        // –û—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª—ã"
        const selectFilesBtn = document.getElementById('select-files-btn');
        if (selectFilesBtn) {
            selectFilesBtn.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                console.log('Select files button clicked');
                fileInput.click();
            });
        }

        console.log('File upload handlers setup complete');
    }

    handleFiles(files) {
        console.log('handleFiles called with:', files);
        this.selectedFiles = files;
        this.updateUploadButton();
        this.showNotification(`–í—ã–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length}`, 'info');
        console.log('‚úÖ Files selected, upload button should be enabled');
    }

    updateUploadButton() {
        const uploadBtn = document.getElementById('upload-btn');
        const isDisabled = this.selectedFiles.length === 0;
        uploadBtn.disabled = isDisabled;
        console.log('Upload button disabled:', isDisabled, 'Selected files:', this.selectedFiles.length);
    }

    setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
        document.getElementById('theme-toggle').addEventListener('click', () => {
            this.toggleTheme();
        });

        // –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        document.getElementById('upload-btn').addEventListener('click', () => {
            console.log('üöÄ Upload button clicked!');
            this.uploadFiles();
        });

        // –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        document.getElementById('clear-upload-btn').addEventListener('click', () => {
            this.clearUpload();
        });

        // –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
        document.getElementById('clear-all-btn').addEventListener('click', () => {
            this.clearAllFiles();
        });

        // –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
        document.getElementById('analyze-btn').addEventListener('click', () => {
            this.analyzeFiles();
        });

        // –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
        document.getElementById('clear-analysis-btn').addEventListener('click', () => {
            this.clearAnalysis();
        });

        // –ö–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        document.getElementById('save-settings-btn').addEventListener('click', () => {
            this.saveSettings();
        });

        document.getElementById('reset-settings-btn').addEventListener('click', () => {
            this.resetSettings();
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        document.getElementById('preview-close').addEventListener('click', () => {
            this.closePreviewModal();
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
        document.getElementById('preview-modal').addEventListener('click', (e) => {
            if (e.target.id === 'preview-modal') {
                this.closePreviewModal();
            }
        });

        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
        document.getElementById('add-custom-setting-btn').addEventListener('click', () => {
            this.showCustomSettingModal();
        });

        // –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        document.getElementById('toggle-inactive-settings-btn').addEventListener('click', () => {
            this.toggleInactiveSettings();
        });

        // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        document.getElementById('custom-setting-close').addEventListener('click', () => {
            this.closeCustomSettingModal();
        });

        document.getElementById('custom-setting-modal').addEventListener('click', (e) => {
            if (e.target.id === 'custom-setting-modal') {
                this.closeCustomSettingModal();
            }
        });

        document.getElementById('save-custom-setting-btn').addEventListener('click', () => {
            this.saveCustomSetting();
        });

        document.getElementById('delete-custom-setting-btn').addEventListener('click', () => {
            this.deleteCustomSetting();
        });

        document.getElementById('cancel-custom-setting-btn').addEventListener('click', () => {
            this.closeCustomSettingModal();
        });
    }

    async uploadFiles() {
        console.log('üì§ uploadFiles called with', this.selectedFiles.length, 'files');
        if (this.selectedFiles.length === 0) {
            this.showNotification('–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏', 'warning');
            return;
        }

        const uploadBtn = document.getElementById('upload-btn');
        const progressContainer = document.getElementById('upload-progress');
        
        uploadBtn.disabled = true;
        uploadBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> –ó–∞–≥—Ä—É–∑–∫–∞...';
        
        // –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        if (progressContainer) {
            progressContainer.style.display = 'none';
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –Ω–æ–≤–æ–º —Å—Ç–∞—Ç—É—Å–±–∞—Ä–µ
        this.showOperationProgress('upload', '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤...', 0);

        try {
            for (let i = 0; i < this.selectedFiles.length; i++) {
                const file = this.selectedFiles[i];
                const progress = ((i + 1) / this.selectedFiles.length) * 100;
                const fileSize = this.formatFileSize(file.size);
                
                this.updateOperationProgress('upload', 
                    `–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ ${i + 1} –∏–∑ ${this.selectedFiles.length}`, 
                    progress, 
                    `–û–±—Ä–∞–±–æ—Ç–∫–∞: ${file.name} (${fileSize})`
                );

                // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
                this.updateOperationProgress('upload', 
                    `–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ ${file.name}...`, 
                    progress, 
                    `–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ —Ä–∞–∑–º–µ—Ä–∞... (${fileSize})`
                );
                await new Promise(resolve => setTimeout(resolve, 300));

                this.updateOperationProgress('upload', 
                    `–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ ${file.name}...`, 
                    progress, 
                    `–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä... (${fileSize})`
                );
                await new Promise(resolve => setTimeout(resolve, 500));

                this.updateOperationProgress('upload', 
                    `–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ ${file.name}...`, 
                    progress, 
                    `–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ... (${fileSize})`
                );
                
                await this.uploadSingleFile(file);

                this.updateOperationProgress('upload', 
                    `–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${file.name}...`, 
                    progress, 
                    `–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤... (${fileSize})`
                );
                await new Promise(resolve => setTimeout(resolve, 200));
            }

            this.updateOperationProgress('upload', '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏...', 95, '–§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞...');
            await new Promise(resolve => setTimeout(resolve, 300));

            this.showOperationComplete('upload', '–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', 
                `–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${this.selectedFiles.length}`);
            this.showNotification('–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', 'success');
            this.clearUpload();
            this.loadFiles();
        } catch (error) {
            console.error('Upload error:', error);
            this.showOperationError('upload', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤', error.message);
            this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤: ' + error.message, 'error');
        } finally {
            uploadBtn.disabled = false;
            uploadBtn.innerHTML = '<i class="fas fa-upload"></i> –ó–∞–≥—Ä—É–∑–∏—Ç—å';
        }
    }

    async uploadSingleFile(file) {
        const formData = new FormData();
        formData.append('file', file);

        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        const settings = await this.getSettings();
        formData.append('max_file_size', settings.max_file_size_mb || 100);
        formData.append('extract_nested', settings.extract_nested_archives || true);
        formData.append('max_depth', settings.max_extraction_depth || 5);

        console.log('üì§ Sending file to server:', file.name);
        const response = await fetch('/api/logs/upload', {
            method: 'POST',
            body: formData
        });

        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.detail || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞');
        }

        const result = await response.json();
        console.log('üì• Server response:', result);
        
        if (result.upload_id) {
            console.log('üÜî Upload ID received:', result.upload_id);
            // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —á–µ—Ä–µ–∑ SSE
            this.trackServerProgress(result.upload_id, (progress) => {
                console.log('üìä Server progress:', progress);
            });
        }
        
        return result;
    }

    trackServerProgress(uploadId, progressCallback) {
        console.log('üîç Starting server progress tracking for:', uploadId);
        
        const eventSource = new EventSource(`/api/upload-progress/${uploadId}`);
        console.log('üîó Creating EventSource for:', `/api/upload-progress/${uploadId}`);

        eventSource.onopen = () => {
            console.log('üîó SSE connection opened successfully');
        };

        eventSource.onmessage = (event) => {
            console.log('üì® Raw SSE message:', event.data);
            try {
                const data = JSON.parse(event.data);
                console.log('üìä Server progress:', data);
                
                if (progressCallback) {
                    progressCallback(data);
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–∞—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞
                switch (data.status) {
                    case 'starting':
                        this.updateOperationProgress('upload', data.message, data.progress, data.details);
                        break;
                    case 'extracting':
                        this.updateOperationProgress('upload', data.message, data.progress, data.details);
                        break;
                    case 'saving_to_db':
                        this.updateOperationProgress('upload', data.message, data.progress, data.details);
                        break;
                    case 'filtering':
                        this.updateOperationProgress('upload', data.message, data.progress, data.details);
                        break;
                    case 'filtering_file':
                        this.updateOperationProgress('upload', data.message, data.progress, data.details);
                        break;
                    case 'completed':
                        this.showOperationComplete('upload', data.message, data.details);
                        this.loadFiles(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
                        eventSource.close();
                        break;
                    case 'error':
                        this.showOperationError('upload', data.message, data.details);
                        eventSource.close();
                        break;
                    default:
                        this.updateOperationProgress('upload', data.message, data.progress, data.details);
                }
            } catch (error) {
                console.error('‚ùå Error parsing SSE data:', error);
            }
        };

        eventSource.onerror = (error) => {
            console.error('‚ùå SSE error:', error);
            console.log('SSE readyState:', eventSource.readyState);
            console.log('SSE URL:', eventSource.url);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            if (eventSource.readyState === EventSource.CLOSED) {
                console.log('üîó SSE connection closed normally');
                return;
            }
            
            // Fallback mechanism —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∑–∞–∫—Ä—ã—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            this.startFallbackProgressTracking(uploadId);
        };
    }

    startFallbackProgressTracking(uploadId) {
        console.log('üîÑ Starting fallback progress tracking for:', uploadId);
        
        let retryCount = 0;
        const maxRetries = 10; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        
        setTimeout(() => {
            const fallbackInterval = setInterval(async () => {
                try {
                    const response = await fetch(`/api/upload-progress-json/${uploadId}`);
                    if (response.ok) {
                        const data = await response.json();
                        console.log('üìä Fallback progress data:', data);

                        if (data.status === 'completed') {
                            console.log('‚úÖ Upload completed via fallback');
                            setTimeout(async () => {
                                console.log('üîÑ Reloading files list after completion (fallback)');
                                await this.loadFiles();
                                this.showOperationComplete('upload', data.message, data.details);
                            }, 1000);
                            clearInterval(fallbackInterval);
                        } else if (data.status === 'error') {
                            console.log('‚ùå Upload error via fallback');
                            this.showOperationError('upload', data.message, data.details);
                            clearInterval(fallbackInterval);
                        } else if (data.status === 'not_found') {
                            retryCount++;
                            console.log(`‚ö†Ô∏è Upload ID not found (attempt ${retryCount}/${maxRetries}), will retry...`);
                            
                            // –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º
                            if (retryCount >= maxRetries) {
                                console.log('üõë Max retries reached, stopping fallback tracking');
                                clearInterval(fallbackInterval);
                                // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç–∞–∫ –∫–∞–∫ –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–≥–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è —É—Å–ø–µ—à–Ω–æ
                            }
                        } else if (data.status && data.progress !== undefined) {
                            this.updateOperationProgress('upload', data.message, data.progress, data.details);
                            retryCount = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
                        }
                    } else {
                        retryCount++;
                        console.log(`‚ö†Ô∏è Fallback response not ok (attempt ${retryCount}/${maxRetries})`);
                        
                        if (retryCount >= maxRetries) {
                            console.log('üõë Max retries reached, stopping fallback tracking');
                            clearInterval(fallbackInterval);
                        }
                    }
                } catch (error) {
                    retryCount++;
                    console.error(`‚ùå Fallback error (attempt ${retryCount}/${maxRetries}):`, error);
                    
                    if (retryCount >= maxRetries) {
                        console.log('üõë Max retries reached, stopping fallback tracking');
                        clearInterval(fallbackInterval);
                    }
                }
            }, 2000);
        }, 1000);
    }

    clearUpload() {
        console.log('clearUpload called');
        this.selectedFiles = [];
        document.getElementById('file-input').value = '';
        this.updateUploadButton();
        
        // –û—á–∏—â–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å–±–∞—Ä
        const uploadStatus = document.getElementById('upload-status');
        if (uploadStatus) {
            uploadStatus.innerHTML = '';
        }
        
        this.showNotification('–í—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤ –æ—á–∏—â–µ–Ω', 'info');
    }

    async loadFiles() {
        try {
            const response = await fetch('/api/logs/files');
            const data = await response.json();

            if (data.success) {
                this.uploadedFiles = data.data;
                this.renderFiles();
            }
        } catch (error) {
            console.error('Error loading files:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤', 'error');
        }
    }

    renderFiles() {
        const filesList = document.getElementById('files-list');
        
        if (this.uploadedFiles.length === 0) {
            filesList.innerHTML = '<p class="no-files">–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤</p>';
            return;
        }

        const filesHtml = this.uploadedFiles.map(file => `
            <div class="file-item" data-file-id="${file.id}">
                <div class="file-info">
                    <div class="file-icon">
                        <i class="fas fa-file-alt"></i>
                    </div>
                    <div class="file-details">
                        <h4>${file.original_name}</h4>
                        <p>–†–∞–∑–º–µ—Ä: ${this.formatFileSize(file.file_size)} | –¢–∏–ø: ${file.file_type} | –ó–∞–≥—Ä—É–∂–µ–Ω: ${new Date(file.upload_date).toLocaleString()}</p>
                    </div>
                </div>
                <div class="file-actions">
                    <button type="button" class="btn btn-secondary btn-sm" onclick="logAnalizer.previewFile('${file.id}')">
                        <i class="fas fa-eye"></i> –ü—Ä–æ—Å–º–æ—Ç—Ä
                    </button>
                    ${file.has_filtered_version ? `
                        <button type="button" class="btn btn-info btn-sm" onclick="logAnalizer.previewFilteredFile('${file.id}')">
                            <i class="fas fa-filter"></i> –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π
                        </button>
                    ` : ''}
                    <button type="button" class="btn btn-warning btn-sm" onclick="logAnalizer.filterFile('${file.id}')">
                        <i class="fas fa-magic"></i> ${file.has_filtered_version ? '–ü–µ—Ä–µ—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å' : '–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å'}
                    </button>
                    <button type="button" class="btn btn-danger btn-sm" onclick="logAnalizer.deleteFile('${file.id}')">
                        <i class="fas fa-trash"></i> –£–¥–∞–ª–∏—Ç—å
                    </button>
                </div>
            </div>
        `).join('');

        filesList.innerHTML = filesHtml;
    }

    formatFileSize(bytes) {
        if (bytes === 0) return '0 –ë';
        const k = 1024;
        const sizes = ['–ë', '–ö–ë', '–ú–ë', '–ì–ë'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    async previewFile(fileId) {
        try {
            const response = await fetch(`/api/logs/files/${fileId}/preview`);
            const data = await response.json();

            if (data.success) {
                this.showPreviewModal(data.original_name, data.preview);
            }
        } catch (error) {
            console.error('Error previewing file:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞', 'error');
        }
    }

    async previewFilteredFile(fileId) {
        try {
            const response = await fetch(`/api/logs/files/${fileId}/filtered`);
            const data = await response.json();

            if (data.success) {
                const title = `–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª (${data.total_lines} —Å—Ç—Ä–æ–∫)`;
                const content = data.preview;
                this.showPreviewModal(title, content);
            } else {
                this.showNotification('–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω', 'warning');
            }
        } catch (error) {
            console.error('Error previewing filtered file:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞', 'error');
        }
    }

    async filterFile(fileId) {
        try {
            // –ù–∞—Ö–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            const file = this.uploadedFiles.find(f => f.id === fileId);
            if (!file) {
                this.showNotification('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
                return;
            }

            const fileSize = this.formatFileSize(file.file_size);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            this.showOperationProgress('filter', '–ù–∞—á–∞–ª–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞...', 0);
            
            this.updateOperationProgress('filter', 
                `–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ ${file.original_name}...`, 
                10, 
                `–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${fileSize}`
            );
            await new Promise(resolve => setTimeout(resolve, 300));

            this.updateOperationProgress('filter', 
                `–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ ${file.original_name}...`, 
                25, 
                `–û–±—Ä–∞–±–æ—Ç–∫–∞: ${fileSize}`
            );
            await new Promise(resolve => setTimeout(resolve, 500));

            this.updateOperationProgress('filter', 
                `–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ ${file.original_name}...`, 
                50, 
                `–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: ${fileSize}`
            );
            await new Promise(resolve => setTimeout(resolve, 300));

            this.updateOperationProgress('filter', 
                `–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ${file.original_name}...`, 
                75, 
                `–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: ${fileSize}`
            );
            await new Promise(resolve => setTimeout(resolve, 200));

            const response = await fetch(`/api/logs/files/${fileId}/filter`, {
                method: 'POST'
            });
            const data = await response.json();

            if (data.success) {
                this.updateOperationProgress('filter', 
                    `–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ ${file.original_name}...`, 
                    90, 
                    `–§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: ${fileSize}`
                );
                await new Promise(resolve => setTimeout(resolve, 300));

                this.showOperationComplete('filter', '–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 
                    `–§–∞–π–ª ${file.original_name} (${fileSize}) —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω`);
                this.showNotification(data.message, 'success');
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                this.loadFiles();
            } else {
                this.showOperationError('filter', '–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞', data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
                this.showNotification('–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞', 'error');
            }
        } catch (error) {
            console.error('Error filtering file:', error);
            this.showOperationError('filter', '–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞', error.message);
            this.showNotification('–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞', 'error');
        }
    }

    showPreviewModal(title, content) {
        document.getElementById('preview-title').textContent = title;
        document.getElementById('preview-content').textContent = content.join('\n');
        document.getElementById('preview-modal').classList.add('active');
    }

    closePreviewModal() {
        document.getElementById('preview-modal').classList.remove('active');
    }

    async deleteFile(fileId) {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª?')) {
            return;
        }

        try {
            const response = await fetch(`/api/logs/files/${fileId}`, {
                method: 'DELETE'
            });

            if (response.ok) {
                this.showNotification('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω', 'success');
                this.loadFiles();
            } else {
                throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞');
            }
        } catch (error) {
            console.error('Error deleting file:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞', 'error');
        }
    }

    async clearAllFiles() {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã?')) {
            return;
        }

        try {
            const response = await fetch('/api/logs/files/clear', {
                method: 'POST'
            });

            if (response.ok) {
                this.showNotification('–í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã', 'success');
                this.loadFiles();
                
                // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç—É—Å–±–∞—Ä
                const uploadStatus = document.getElementById('upload-status');
                if (uploadStatus) {
                    uploadStatus.innerHTML = '';
                }
            } else {
                throw new Error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤');
            }
        } catch (error) {
            console.error('Error clearing files:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤', 'error');
        }
    }

    async loadPresets() {
        try {
            const response = await fetch('/api/presets');
            const data = await response.json();

            if (data.success) {
                this.presets = data.data;
                this.renderPresets();
            }
        } catch (error) {
            console.error('Error loading presets:', error);
        }
    }

    renderPresets() {
        const presetSelect = document.getElementById('preset-select');
        presetSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ—Å–µ—Ç...</option>';
        
        this.presets.forEach(preset => {
            const option = document.createElement('option');
            option.value = preset.id;
            option.textContent = preset.name;
            presetSelect.appendChild(option);
        });
    }

    async analyzeFiles() {
        const systemName = document.getElementById('system-name').value.trim();
        const presetId = document.getElementById('preset-select').value;
        const selectedFiles = this.getSelectedFilesForAnalysis();

        if (selectedFiles.length === 0) {
            this.showNotification('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞', 'warning');
            return;
        }

        if (!systemName) {
            this.showNotification('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã', 'warning');
            return;
        }

        const analyzeBtn = document.getElementById('analyze-btn');
        analyzeBtn.disabled = true;
        analyzeBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> –ê–Ω–∞–ª–∏–∑...';

        try {
            const response = await fetch('/api/logs/analyze', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    file_ids: selectedFiles,
                    system_name: systemName,
                    preset_id: presetId
                })
            });

            const data = await response.json();

            if (data.success) {
                this.renderAnalysisResults(data);
                this.showNotification('–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ', 'success');
            } else {
                throw new Error(data.detail || '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞');
            }
        } catch (error) {
            console.error('Analysis error:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ' + error.message, 'error');
        } finally {
            analyzeBtn.disabled = false;
            analyzeBtn.innerHTML = '<i class="fas fa-search"></i> –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å';
        }
    }

    getSelectedFilesForAnalysis() {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        return this.uploadedFiles.map(file => file.id);
    }

    renderAnalysisResults(data) {
        const resultsContainer = document.getElementById('analysis-results');
        
        let html = `
            <div class="analysis-summary">
                <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã: ${data.system_name}</h3>
                <p>–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${data.results.length}</p>
            </div>
        `;

        data.results.forEach(result => {
            html += `
                <div class="result-item">
                    <div class="result-header">
                        <h4>${result.original_name}</h4>
                        <div class="result-stats">
                            <span>–ù–∞–π–¥–µ–Ω–æ –≤–∞–∂–Ω—ã—Ö —Å—Ç—Ä–æ–∫: ${result.total_lines}</span>
                        </div>
                    </div>
                    <div class="important-lines">
                        ${result.important_lines.map(line => `
                            <div class="line-item">
                                <span class="line-number">${line.line_number}</span>
                                <span class="line-level ${line.level.toLowerCase()}">${line.level}</span>
                                <span class="line-content">${line.content}</span>
                            </div>
                        `).join('')}
                    </div>
                </div>
            `;
        });

        resultsContainer.innerHTML = html;
    }

    clearAnalysis() {
        document.getElementById('system-name').value = '';
        document.getElementById('preset-select').value = '';
        document.getElementById('analysis-results').innerHTML = '';
        this.showNotification('–ê–Ω–∞–ª–∏–∑ –æ—á–∏—â–µ–Ω', 'info');
    }

    async loadSettings() {
        try {
            console.log('üîÑ Loading settings from server...');
            const response = await fetch('/api/settings');
            const data = await response.json();

            if (data.success) {
                this.settings = data.data;
                console.log('üìä Settings loaded:', this.settings);
                this.renderSettings();
            } else {
                console.error('‚ùå Settings loading failed:', data);
            }
        } catch (error) {
            console.error('‚ùå Error loading settings:', error);
        }
    }

    renderSettings() {
        console.log('üé® Rendering settings:', this.settings);
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        const maxFileSize = this.settings.max_file_size_mb || 100;
        document.getElementById('max-file-size').value = maxFileSize;
        console.log('üìÅ Max file size:', maxFileSize);
        
        // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        const formatsContainer = document.getElementById('supported-formats');
        const formats = this.settings.supported_formats || [];
        formatsContainer.innerHTML = formats.map(format => `
            <div class="format-item">
                <input type="checkbox" id="format-${format}" value="${format}" checked>
                <label for="format-${format}">${format}</label>
            </div>
        `).join('');
        console.log('üìã Supported formats:', formats);

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏
        const extractNested = this.settings.extract_nested_archives || true;
        document.getElementById('extract-nested').checked = extractNested;
        const maxDepth = this.settings.max_extraction_depth || 5;
        document.getElementById('max-depth').value = maxDepth;
        console.log('üì¶ Extract nested:', extractNested, 'Max depth:', maxDepth);

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        const maxFilteringSize = this.settings.max_filtering_file_size_mb || 50;
        document.getElementById('max-filtering-file-size').value = maxFilteringSize;
        console.log('üîç Max filtering file size:', maxFilteringSize);

        // –í–∞–∂–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –ª–æ–≥–æ–≤
        const levelsContainer = document.getElementById('important-log-levels');
        const selectedLevels = this.settings.important_log_levels || [];
        
        // –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –ª–æ–≥–æ–≤
        const allLevels = ['ERROR', 'WARN', 'CRITICAL', 'FATAL', 'ALERT', 'EMERGENCY', 'INFO', 'DEBUG'];
        
        levelsContainer.innerHTML = allLevels.map(level => {
            const isChecked = selectedLevels.includes(level);
            return `
                <div class="level-item">
                    <input type="checkbox" id="level-${level}" value="${level}" ${isChecked ? 'checked' : ''}>
                    <label for="level-${level}">${level}</label>
                </div>
            `;
        }).join('');
        console.log('‚ö†Ô∏è All log levels:', allLevels);
        console.log('‚ö†Ô∏è Selected log levels:', selectedLevels);
    }

    async saveSettings() {
        const settings = {
            max_file_size_mb: parseInt(document.getElementById('max-file-size').value),
            supported_formats: this.getCheckedValues('supported-formats'),
            extract_nested_archives: document.getElementById('extract-nested').checked,
            max_extraction_depth: parseInt(document.getElementById('max-depth').value),
            max_filtering_file_size_mb: parseInt(document.getElementById('max-filtering-file-size').value),
            important_log_levels: this.getCheckedValues('important-log-levels')
        };

        try {
            const response = await fetch('/api/settings', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(settings)
            });

            if (response.ok) {
                this.showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
                this.settings = settings;
            } else {
                throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
            }
        } catch (error) {
            console.error('Error saving settings:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫', 'error');
        }
    }

    getCheckedValues(containerId) {
        const container = document.getElementById(containerId);
        const checkboxes = container.querySelectorAll('input[type="checkbox"]:checked');
        return Array.from(checkboxes).map(cb => cb.value);
    }

    async resetSettings() {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ —É–º–æ–ª—á–∞–Ω–∏—é?')) {
            return;
        }

        try {
            const response = await fetch('/api/settings', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({})
            });

            if (response.ok) {
                this.showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ —É–º–æ–ª—á–∞–Ω–∏—é', 'success');
                this.loadSettings();
            } else {
                throw new Error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
            }
        } catch (error) {
            console.error('Error resetting settings:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫', 'error');
        }
    }

    async loadInitialData() {
        await this.loadSettings();
        await this.loadFiles();
        await this.loadPresets();
        await this.loadCustomAnalysisSettings();
    }

    async getSettings() {
        if (Object.keys(this.settings).length === 0) {
            await this.loadSettings();
        }
        return this.settings;
    }

    showNotification(message, type = 'info') {
        const notifications = document.getElementById('notifications');
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        
        let icon = 'fas fa-info-circle';
        if (type === 'success') icon = 'fas fa-check-circle';
        if (type === 'error') icon = 'fas fa-exclamation-circle';
        if (type === 'warning') icon = 'fas fa-exclamation-triangle';

        notification.innerHTML = `
            <i class="${icon}"></i>
            <span>${message}</span>
        `;

        notifications.appendChild(notification);

        // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            notification.remove();
        }, 5000);
    }

    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
    async loadCustomAnalysisSettings() {
        try {
            const response = await fetch('/api/custom-analysis-settings');
            if (response.ok) {
                const data = await response.json();
                this.customSettings = data.data || [];
                this.renderCustomAnalysisSettings();
            }
        } catch (error) {
            console.error('Error loading custom analysis settings:', error);
        }
    }

    toggleInactiveSettings() {
        const container = document.getElementById('custom-analysis-settings');
        const toggleBtn = document.getElementById('toggle-inactive-settings-btn');
        const toggleText = toggleBtn.querySelector('.toggle-text');
        const toggleIcon = toggleBtn.querySelector('i');
        
        const inactiveItems = container.querySelectorAll('.custom-setting-item.inactive');
        const isShowingInactive = inactiveItems[0]?.classList.contains('show-inactive');
        
        if (isShowingInactive) {
            // –°–∫—Ä—ã–≤–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            inactiveItems.forEach(item => {
                item.classList.remove('show-inactive');
            });
            toggleText.textContent = '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å';
            toggleIcon.className = 'fas fa-eye';
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            inactiveItems.forEach(item => {
                item.classList.add('show-inactive');
            });
            toggleText.textContent = '–°–≤–µ—Ä–Ω—É—Ç—å';
            toggleIcon.className = 'fas fa-eye-slash';
        }
    }

    renderCustomAnalysisSettings() {
        const container = document.getElementById('custom-analysis-settings');
        if (!container) return;

        if (this.customSettings.length === 0) {
            container.innerHTML = '<p class="no-settings">–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–Ω–∞–ª–∏–∑–∞</p>';
            return;
        }

        container.innerHTML = this.customSettings.map(setting => `
            <div class="custom-setting-item ${!setting.enabled ? 'inactive' : ''}" data-setting-id="${setting.id}">
                <div class="custom-setting-info">
                    <div class="custom-setting-name">${setting.name}</div>
                    <div class="custom-setting-pattern">${setting.pattern}</div>
                    ${setting.description ? `<div class="custom-setting-description">${setting.description}</div>` : ''}
                </div>
                <div class="custom-setting-status">
                    <label class="custom-setting-enabled-checkbox">
                        <input type="checkbox" class="setting-enabled-checkbox" data-setting-id="${setting.id}" ${setting.enabled ? 'checked' : ''}>
                        <span class="checkbox-label">–ê–∫—Ç–∏–≤–Ω–∞</span>
                    </label>
                    <div class="custom-setting-actions">
                        <button type="button" class="btn btn-secondary btn-sm edit-setting-btn" data-setting-id="${setting.id}">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button type="button" class="btn btn-danger btn-sm delete-setting-btn" data-setting-id="${setting.id}">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            </div>
        `).join('');

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
        container.querySelectorAll('.edit-setting-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const settingId = e.target.closest('.edit-setting-btn').dataset.settingId;
                this.editCustomSetting(settingId);
            });
        });

        container.querySelectorAll('.delete-setting-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const settingId = e.target.closest('.delete-setting-btn').dataset.settingId;
                this.deleteCustomSetting(settingId);
            });
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤
        container.querySelectorAll('.setting-enabled-checkbox').forEach(checkbox => {
            checkbox.addEventListener('change', (e) => {
                // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–≤–æ–π–Ω—ã–µ –∫–ª–∏–∫–∏
                if (e.target.disabled) return;
                
                const settingId = e.target.dataset.settingId;
                const enabled = e.target.checked;
                
                // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º —á–µ–∫–±–æ–∫—Å
                e.target.disabled = true;
                
                this.updateSettingEnabled(settingId, enabled).finally(() => {
                    // –í–∫–ª—é—á–∞–µ–º —á–µ–∫–±–æ–∫—Å –æ–±—Ä–∞—Ç–Ω–æ
                    e.target.disabled = false;
                });
            });
        });
    }

    showCustomSettingModal(setting = null) {
        const modal = document.getElementById('custom-setting-modal');
        const title = document.getElementById('custom-setting-title');
        const form = document.getElementById('custom-setting-form');
        const deleteBtn = document.getElementById('delete-custom-setting-btn');

        if (setting) {
            // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            title.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞';
            form.querySelector('#custom-setting-name').value = setting.name;
            form.querySelector('#custom-setting-pattern').value = setting.pattern;
            form.querySelector('#custom-setting-description').value = setting.description || '';
            form.querySelector('#custom-setting-enabled').checked = setting.enabled;
            deleteBtn.style.display = 'inline-block';
            this.currentEditingSetting = setting;
        } else {
            // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            title.textContent = '–ù–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∞–ª–∏–∑–∞';
            form.reset();
            deleteBtn.style.display = 'none';
            this.currentEditingSetting = null;
        }

        modal.classList.add('active');
    }

    closeCustomSettingModal() {
        const modal = document.getElementById('custom-setting-modal');
        modal.classList.remove('active');
        this.currentEditingSetting = null;
    }

    async saveCustomSetting() {
        const form = document.getElementById('custom-setting-form');
        const formData = new FormData(form);
        
        const settingData = {
            name: formData.get('name'),
            pattern: formData.get('pattern'),
            description: formData.get('description'),
            enabled: formData.get('enabled') === 'on'
        };

        try {
            let response;
            if (this.currentEditingSetting) {
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                response = await fetch(`/api/custom-analysis-settings/${this.currentEditingSetting.id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(settingData)
                });
            } else {
                // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                response = await fetch('/api/custom-analysis-settings', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(settingData)
                });
            }

            if (response.ok) {
                this.showNotification(
                    this.currentEditingSetting ? '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞' : '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–∑–¥–∞–Ω–∞', 
                    'success'
                );
                this.closeCustomSettingModal();
                await this.loadCustomAnalysisSettings();
            } else {
                throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
            }
        } catch (error) {
            console.error('Error saving custom setting:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', 'error');
        }
    }

    editCustomSetting(settingId) {
        const setting = this.customSettings.find(s => s.id === settingId);
        if (setting) {
            this.showCustomSettingModal(setting);
        }
    }

    async updateSettingEnabled(settingId, enabled) {
        try {
            const setting = this.customSettings.find(s => s.id === settingId);
            if (!setting) return;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –ª–∏ –º—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if (setting.enabled === enabled) {
                return;
            }

            const response = await fetch(`/api/custom-analysis-settings/${settingId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    name: setting.name,
                    pattern: setting.pattern,
                    description: setting.description,
                    enabled: enabled
                })
            });

            if (response.ok) {
                this.showNotification(`–ù–∞—Å—Ç—Ä–æ–π–∫–∞ ${enabled ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞' : '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞'}`, 'success');
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –º–∞—Å—Å–∏–≤–µ
                const setting = this.customSettings.find(s => s.id === settingId);
                if (setting) {
                    setting.enabled = enabled;
                }
            } else {
                const error = await response.text();
                this.showNotification(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: ${error}`, 'error');
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–µ–∫–±–æ–∫—Å –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                const checkbox = document.querySelector(`[data-setting-id="${settingId}"]`);
                if (checkbox) checkbox.checked = !enabled;
            }
        } catch (error) {
            this.showNotification(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: ${error.message}`, 'error');
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–µ–∫–±–æ–∫—Å –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const checkbox = document.querySelector(`[data-setting-id="${settingId}"]`);
            if (checkbox) checkbox.checked = !enabled;
        }
    }

    async deleteCustomSetting(settingId = null) {
        const id = settingId || (this.currentEditingSetting ? this.currentEditingSetting.id : null);
        if (!id) return;

        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –Ω–∞—Å—Ç—Ä–æ–π–∫—É?')) {
            return;
        }

        try {
            const response = await fetch(`/api/custom-analysis-settings/${id}`, {
                method: 'DELETE'
            });

            if (response.ok) {
                this.showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–¥–∞–ª–µ–Ω–∞', 'success');
                if (this.currentEditingSetting) {
                    this.closeCustomSettingModal();
                }
                await this.loadCustomAnalysisSettings();
            } else {
                throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
            }
        } catch (error) {
            console.error('Error deleting custom setting:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', 'error');
        }
    }

    // –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–±–∞—Ä–∞
    showOperationProgress(operationId, message, progress = null) {
        const statusDiv = document.getElementById(`${operationId}-status`);
        if (!statusDiv) return;
        
        let progressHtml = '';
        if (progress !== null) {
            progressHtml = `
                <div class="progress-bar">
                    <div class="progress-fill" style="width: ${progress}%"></div>
                </div>
                <div class="progress-text">${progress.toFixed(1)}%</div>
            `;
        }
        
        statusDiv.innerHTML = `
            <div class="operation-status active">
                <div class="status-header">
                    <i class="fas fa-spinner fa-spin"></i>
                    <span class="status-message">${message}</span>
                </div>
                ${progressHtml}
                <div class="status-details">
                    <small>–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...</small>
                </div>
            </div>
        `;
    }

    updateOperationProgress(operationId, message, progress = null, details = null) {
        const statusDiv = document.getElementById(`${operationId}-status`);
        if (!statusDiv) return;
        
        let progressHtml = '';
        if (progress !== null) {
            progressHtml = `
                <div class="progress-bar">
                    <div class="progress-fill" style="width: ${progress}%"></div>
                </div>
                <div class="progress-text">${progress.toFixed(1)}%</div>
            `;
        }
        
        let detailsHtml = '';
        if (details) {
            detailsHtml = `<div class="status-details"><small>${details}</small></div>`;
        }
        
        statusDiv.innerHTML = `
            <div class="operation-status active">
                <div class="status-header">
                    <i class="fas fa-spinner fa-spin"></i>
                    <span class="status-message">${message}</span>
                </div>
                ${progressHtml}
                ${detailsHtml}
            </div>
        `;
    }

    showOperationComplete(operationId, message, details = null) {
        const statusDiv = document.getElementById(`${operationId}-status`);
        if (!statusDiv) return;
        
        let detailsHtml = '';
        if (details) {
            detailsHtml = `<div class="status-details"><small>${details}</small></div>`;
        }
        
        statusDiv.innerHTML = `
            <div class="operation-status success">
                <div class="status-header">
                    <i class="fas fa-check-circle"></i>
                    <span class="status-message">${message}</span>
                </div>
                ${detailsHtml}
            </div>
        `;
    }

    showOperationError(operationId, message, error = null) {
        const statusDiv = document.getElementById(`${operationId}-status`);
        if (!statusDiv) return;
        
        let errorHtml = '';
        if (error) {
            errorHtml = `<div class="status-details"><small class="error-text">${error}</small></div>`;
        }
        
        statusDiv.innerHTML = `
            <div class="operation-status error">
                <div class="status-header">
                    <i class="fas fa-exclamation-triangle"></i>
                    <span class="status-message">${message}</span>
                </div>
                ${errorHtml}
            </div>
        `;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    window.logAnalizer = new LogAnalizer();
}); 