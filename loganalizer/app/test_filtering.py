#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
"""

import asyncio
import asyncpg
import json
import sys
from pathlib import Path

async def test_filtering():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤"""
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = await asyncpg.connect(
            host='localhost',
            user='loganalizer',
            password='loganalizer',
            database='loganalizer'
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_result = await conn.fetchval('''
            SELECT value FROM settings WHERE key = 'important_log_levels'
        ''')
        
        print(f"üìã Current log levels: {settings_result}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
        files = await conn.fetch('''
            SELECT id, original_name, file_size, file_path 
            FROM log_files 
            ORDER BY created_at DESC 
            LIMIT 5
        ''')
        
        print(f"üìÅ Found {len(files)} files:")
        for file in files:
            file_size_mb = file['file_size'] / (1024 * 1024)
            print(f"  - {file['original_name']}: {file_size_mb:.1f}MB")
        
        await conn.close()
        
    except Exception as e:
        print(f"‚ùå Error: {e}")

if __name__ == "__main__":
    asyncio.run(test_filtering()) 