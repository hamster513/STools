#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è STools
–°–æ–∑–¥–∞–µ—Ç CSV —Ñ–∞–π–ª —Å 100k –∑–∞–ø–∏—Å–µ–π —Ö–æ—Å—Ç–æ–≤, –≤–∫–ª—é—á–∞—è 10k —Å —ç–∫—Å–ø–ª–æ–π—Ç–∞–º–∏
"""

import csv
import random
import string
from datetime import datetime, timedelta

def generate_cve_id():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π CVE ID"""
    year = random.randint(1999, 2024)
    number = random.randint(1, 99999)
    return f"CVE-{year}-{number:05d}"

def generate_ip():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π IP –∞–¥—Ä–µ—Å"""
    return f"{random.randint(1, 254)}.{random.randint(1, 254)}.{random.randint(1, 254)}.{random.randint(1, 254)}"

def generate_hostname():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è —Ö–æ—Å—Ç–∞"""
    prefixes = ['server', 'host', 'node', 'vm', 'container', 'instance', 'machine']
    suffixes = ['prod', 'dev', 'test', 'staging', 'backup', 'db', 'web', 'app']
    
    prefix = random.choice(prefixes)
    suffix = random.choice(suffixes)
    number = random.randint(1, 999)
    
    return f"{prefix}-{suffix}-{number:03d}"

def generate_test_data(num_hosts=100000, num_with_exploits=10000):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    
    # –°–æ–∑–¥–∞–µ–º –ø—É–ª CVE —Å —ç–∫—Å–ø–ª–æ–π—Ç–∞–º–∏ (10k –∑–∞–ø–∏—Å–µ–π —Å —ç–∫—Å–ø–ª–æ–π—Ç–∞–º–∏)
    exploit_cves = set()
    for _ in range(num_with_exploits):
        exploit_cves.add(generate_cve_id())
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π –ø—É–ª CVE
    all_cves = set()
    for _ in range(num_hosts * 3):  # –ë–æ–ª—å—à–µ CVE —á–µ–º —Ö–æ—Å—Ç–æ–≤
        all_cves.add(generate_cve_id())
    
    # –î–æ–±–∞–≤–ª—è–µ–º CVE —Å —ç–∫—Å–ø–ª–æ–π—Ç–∞–º–∏ –≤ –æ–±—â–∏–π –ø—É–ª
    all_cves.update(exploit_cves)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∫–∏
    all_cves_list = list(all_cves)
    exploit_cves_list = list(exploit_cves)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–æ—Å—Ç—ã
    hosts = []
    criticality_levels = ['Critical', 'High', 'Medium', 'Low', 'None']
    zones = ['DMZ', 'Internal', 'External', 'Management', 'Backup']
    os_names = ['Linux', 'Windows', 'macOS', 'FreeBSD', 'Ubuntu', 'CentOS', 'Debian']
    
    for i in range(num_hosts):
        hostname = generate_hostname()
        ip = generate_ip()
        
        # –í—ã–±–∏—Ä–∞–µ–º CVE –¥–ª—è —Ö–æ—Å—Ç–∞
        if i < num_with_exploits:
            # –ü–µ—Ä–≤—ã–µ 10k —Ö–æ—Å—Ç–æ–≤ –ø–æ–ª—É—á–∞—é—Ç CVE —Å —ç–∫—Å–ø–ª–æ–π—Ç–∞–º–∏
            cve = random.choice(exploit_cves_list)
        else:
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—É—á–∞—é—Ç —Å–ª—É—á–∞–π–Ω—ã–µ CVE
            cve = random.choice(all_cves_list)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ CVE (1-3 —à—Ç—É–∫–∏)
        additional_cves = []
        for _ in range(random.randint(0, 3)):
            additional_cve = random.choice(all_cves_list)
            if additional_cve != cve and additional_cve not in additional_cves:
                additional_cves.append(additional_cve)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º CVE
        all_cves_for_host = [cve] + additional_cves
        cve_string = ','.join(all_cves_for_host)
        
        host = {
            '@Host': f'{hostname} ({ip})',
            'Host.@Vulners.CVEs': cve_string,
            'host.UF_Criticality': random.choice(criticality_levels),
            'Host.UF_Zone': random.choice(zones),
            'Host.OsName': random.choice(os_names)
        }
        
        hosts.append(host)
    
    return hosts

def save_to_csv(hosts, filename='test_data_100k.csv'):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ CSV —Ñ–∞–π–ª"""
    
    fieldnames = ['@Host', 'Host.@Vulners.CVEs', 'host.UF_Criticality', 'Host.UF_Zone', 'Host.OsName']
    
    with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames, delimiter=';')
        writer.writeheader()
        writer.writerows(hosts)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è
    import os
    file_size = os.path.getsize(filename) / (1024*1024)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª {filename}")
    print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(hosts):,}")
    print(f"üéØ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:.2f} –ú–ë")

def main():
    print("üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    print("üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")
    print("   - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ—Å—Ç–æ–≤: 100,000")
    print("   - –•–æ—Å—Ç–æ–≤ —Å —ç–∫—Å–ø–ª–æ–π—Ç–∞–º–∏: 10,000")
    print("   - CVE –Ω–∞ —Ö–æ—Å—Ç: 1-5")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    hosts = generate_test_data(100000, 10000)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    save_to_csv(hosts, 'test_data_100k.csv')
    
    print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    main()
