#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤
"""
import asyncio
import asyncpg
from datetime import datetime

async def test_risk_calculation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤"""
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = await asyncpg.connect(
        host='postgres',
        port=5432,
        user='stools_user',
        password='stools_pass',
        database='stools_db'
    )
    
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ö–µ–º—É
        await conn.execute('SET search_path TO vulnanalizer')
        
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ö–æ—Å—Ç–æ–≤...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ—Å—Ç–æ–≤
        total_hosts = await conn.fetchval("SELECT COUNT(*) FROM hosts")
        print(f"üìä –í—Å–µ–≥–æ —Ö–æ—Å—Ç–æ–≤: {total_hosts}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–æ—Å—Ç—ã —Å EPSS –¥–∞–Ω–Ω—ã–º–∏
        hosts_with_epss = await conn.fetchval("SELECT COUNT(*) FROM hosts WHERE epss_score IS NOT NULL")
        print(f"üìä –•–æ—Å—Ç–æ–≤ —Å EPSS –¥–∞–Ω–Ω—ã–º–∏: {hosts_with_epss}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–æ—Å—Ç—ã —Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏ —Ä–∏—Å–∫–∞–º–∏
        hosts_with_risk = await conn.fetchval("SELECT COUNT(*) FROM hosts WHERE risk_score IS NOT NULL")
        print(f"üìä –•–æ—Å—Ç–æ–≤ —Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏ —Ä–∏—Å–∫–∞–º–∏: {hosts_with_risk}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–æ—Å—Ç—ã –±–µ–∑ EPSS –¥–∞–Ω–Ω—ã—Ö
        hosts_without_epss = await conn.fetchval("SELECT COUNT(*) FROM hosts WHERE epss_score IS NULL")
        print(f"üìä –•–æ—Å—Ç–æ–≤ –±–µ–∑ EPSS –¥–∞–Ω–Ω—ã—Ö: {hosts_without_epss}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–æ—Å—Ç—ã –±–µ–∑ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤
        hosts_without_risk = await conn.fetchval("SELECT COUNT(*) FROM hosts WHERE risk_score IS NULL")
        print(f"üìä –•–æ—Å—Ç–æ–≤ –±–µ–∑ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤: {hosts_without_risk}")
        
        # –ù–∞—Ö–æ–¥–∏–º CVE —Ö–æ—Å—Ç–æ–≤ –±–µ–∑ EPSS –¥–∞–Ω–Ω—ã—Ö, –Ω–æ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ EPSS –¥–∞–Ω–Ω—ã–º–∏
        cve_query = """
            SELECT DISTINCT h.cve 
            FROM hosts h 
            LEFT JOIN epss e ON h.cve = e.cve 
            WHERE h.cve IS NOT NULL AND h.cve != '' 
            AND (h.epss_score IS NULL OR h.risk_score IS NULL)
            AND e.cve IS NOT NULL
            ORDER BY h.cve
            LIMIT 10
        """
        cve_rows = await conn.fetch(cve_query)
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(cve_rows)} CVE –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤ (–ø–µ—Ä–≤—ã–µ 10):")
        for row in cve_rows:
            print(f"  - {row['cve']}")
        
        if cve_rows:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π CVE –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            test_cve = cve_rows[0]['cve']
            print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç —Ä–∏—Å–∫–æ–≤ –¥–ª—è CVE: {test_cve}")
            
            # –ü–æ–ª—É—á–∞–µ–º EPSS –¥–∞–Ω–Ω—ã–µ
            epss_query = "SELECT epss, percentile FROM epss WHERE cve = $1"
            epss_row = await conn.fetchrow(epss_query, test_cve)
            
            if epss_row:
                print(f"‚úÖ EPSS –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã: {epss_row['epss']}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ö–æ—Å—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ CVE
                hosts_query = "SELECT id, hostname, cvss, criticality FROM hosts WHERE cve = $1 LIMIT 5"
                hosts_rows = await conn.fetch(hosts_query, test_cve)
                
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(hosts_rows)} —Ö–æ—Å—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                settings_query = "SELECT key, value FROM settings"
                settings_rows = await conn.fetch(settings_query)
                settings = {row['key']: row['value'] for row in settings_rows}
                
                print(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏: {settings}")
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∏—Å–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ö–æ—Å—Ç–∞
                for host_row in hosts_rows:
                    print(f"\nüè† –•–æ—Å—Ç: {host_row['hostname']} (ID: {host_row['id']})")
                    print(f"   CVE: {test_cve}")
                    print(f"   CVSS: {host_row['cvss']}")
                    print(f"   Criticality: {host_row['criticality']}")
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∏—Å–∫
                    epss_score = float(epss_row['epss'])
                    criticality = host_row['criticality'] or 'Medium'
                    
                    # –í–µ—Å–∞ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ —Ä–µ—Å—É—Ä—Å–∞
                    resource_weights = {
                        'Critical': 0.33,
                        'High': 0.25,
                        'Medium': 0.15,
                        'Low': 0.1,
                        'None': 0.05
                    }
                    
                    # –í–µ—Å–∞ –¥–ª—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    data_weights = {
                        '–ï—Å—Ç—å': 0.33,
                        '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç': 0.1
                    }
                    
                    # –í–µ—Å–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
                    internet_weights = {
                        '–î–æ—Å—Ç—É–ø–µ–Ω': 0.33,
                        '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω': 0.1
                    }
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                    confidential_data = settings.get('impact_confidential_data', '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç')
                    internet_access = settings.get('impact_internet_access', '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º Impact
                    impact = (
                        resource_weights.get(criticality, 0.15) +
                        data_weights.get(confidential_data, 0.1) +
                        internet_weights.get(internet_access, 0.1)
                    )
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∏—Å–∫
                    raw_risk = epss_score * impact
                    risk_score = min(1, raw_risk) * 100
                    
                    print(f"   EPSS: {epss_score}")
                    print(f"   Impact: {impact}")
                    print(f"   Raw Risk: {raw_risk}")
                    print(f"   Risk Score: {risk_score}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ö–æ—Å—Ç
                    update_query = """
                        UPDATE hosts SET
                            epss_score = $1,
                            epss_percentile = $2,
                            risk_score = $3,
                            risk_raw = $4,
                            epss_updated_at = $5,
                            risk_updated_at = $6
                        WHERE id = $7
                    """
                    
                    await conn.execute(update_query,
                        epss_score,
                        float(epss_row['percentile']) if epss_row['percentile'] else None,
                        risk_score,
                        raw_risk,
                        datetime.now(),
                        datetime.now(),
                        host_row['id']
                    )
                    
                    print(f"   ‚úÖ –•–æ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω")
        
        print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        print(f"‚ùå –î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
    finally:
        await conn.close()

if __name__ == "__main__":
    asyncio.run(test_risk_calculation())
