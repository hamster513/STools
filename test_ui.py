#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–∞–≥–æ–≤
"""

import requests
import time
import json
from bs4 import BeautifulSoup
from urllib.parse import urljoin

class WebUITester:
    def __init__(self, base_url="http://localhost"):
        self.base_url = base_url
        self.session = requests.Session()
        self.bugs = []
        
    def test_page_loading(self, path):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            url = urljoin(self.base_url, path)
            response = self.session.get(url, timeout=10)
            
            if response.status_code != 200:
                self.bugs.append(f"‚ùå {path}: HTTP {response.status_code}")
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            soup = BeautifulSoup(response.text, 'html.parser')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º CSS
            css_links = soup.find_all('link', rel='stylesheet')
            for css in css_links:
                css_url = css.get('href')
                if css_url:
                    css_response = self.session.get(urljoin(url, css_url))
                    if css_response.status_code != 200:
                        self.bugs.append(f"‚ùå CSS –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è: {css_url}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º JavaScript
            js_scripts = soup.find_all('script', src=True)
            for script in js_scripts:
                js_url = script.get('src')
                if js_url:
                    js_response = self.session.get(urljoin(url, js_url))
                    if js_response.status_code != 200:
                        self.bugs.append(f"‚ùå JS –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è: {js_url}")
            
            print(f"‚úÖ {path}: OK")
            return True
            
        except Exception as e:
            self.bugs.append(f"‚ùå {path}: {str(e)}")
            return False
    
    def test_api_endpoints(self):
        """–¢–µ—Å—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
        endpoints = [
            "/auth/api/login",
            "/vulnanalizer/api/hosts/search",
            "/loganalizer/api/logs/files"
        ]
        
        for endpoint in endpoints:
            try:
                url = urljoin(self.base_url, endpoint)
                response = self.session.get(url, timeout=5)
                
                # API –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å JSON –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                if response.status_code not in [200, 401, 405]:
                    self.bugs.append(f"‚ùå API {endpoint}: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å {response.status_code}")
                else:
                    print(f"‚úÖ API {endpoint}: OK")
                    
            except Exception as e:
                self.bugs.append(f"‚ùå API {endpoint}: {str(e)}")
    
    def test_static_files(self):
        """–¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤"""
        static_files = [
            "/static/css/style.css",
            "/auth/static/css/style.css",
            "/auth/static/js/login.js"
        ]
        
        for file_path in static_files:
            try:
                url = urljoin(self.base_url, file_path)
                response = self.session.get(url, timeout=5)
                
                if response.status_code != 200:
                    self.bugs.append(f"‚ùå –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                else:
                    print(f"‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª: {file_path}")
                    
            except Exception as e:
                self.bugs.append(f"‚ùå –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª {file_path}: {str(e)}")
    
    def test_redirects(self):
        """–¢–µ—Å—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤"""
        redirects = [
            ("/", "/vulnanalizer/"),
            ("/loganalizer/", "/loganalizer/"),
            ("/vulnanalizer/", "/vulnanalizer/")
        ]
        
        for from_path, expected_to in redirects:
            try:
                url = urljoin(self.base_url, from_path)
                response = self.session.get(url, allow_redirects=False, timeout=5)
                
                if response.status_code in [301, 302]:
                    location = response.headers.get('Location', '')
                    if expected_to not in location:
                        self.bugs.append(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–µ–¥–∏—Ä–µ–∫—Ç {from_path} -> {location}")
                    else:
                        print(f"‚úÖ –†–µ–¥–∏—Ä–µ–∫—Ç {from_path} -> {location}")
                else:
                    print(f"‚úÖ {from_path}: –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø")
                    
            except Exception as e:
                self.bugs.append(f"‚ùå –†–µ–¥–∏—Ä–µ–∫—Ç {from_path}: {str(e)}")
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üîç –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        pages = [
            "/",
            "/vulnanalizer/",
            "/loganalizer/",
            "/auth/"
        ]
        
        for page in pages:
            self.test_page_loading(page)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
        self.test_api_endpoints()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
        self.test_static_files()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã
        self.test_redirects()
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        if self.bugs:
            print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {len(self.bugs)} –ø—Ä–æ–±–ª–µ–º:")
            for bug in self.bugs:
                print(f"  {bug}")
        else:
            print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        
        return len(self.bugs) == 0

if __name__ == "__main__":
    tester = WebUITester()
    success = tester.run_all_tests()
    exit(0 if success else 1)
